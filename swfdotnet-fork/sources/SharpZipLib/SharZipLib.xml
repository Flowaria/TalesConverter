<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpZipLib</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2">
            <summary>
            Does all the compress and decompress pre-operation stuff.
            Sets up the streams and file header characters.
            Uses multiply overloaded methods to call for the compress/decompress.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompress <paramref name="instream">input</paramref> writing 
            decompressed data to <paramref name="outstream">output stream</paramref>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2.Compress(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Compress <paramref name="instream">input stream</paramref> sending 
            result to <paramref name="outputstream">output stream</paramref>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2Constants">
            <summary>
            Defines internal values for both compression and decompression
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.rNums">
            <summary>
            Random numbers used to randomise repetitive blocks
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.baseBlockSize">
            <summary>
            When multiplied by compression parameter (1-9) gives the block size for compression
            9 gives the best compresssion but uses the most memory.
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_ALPHA_SIZE">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_CODE_LEN">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RUNA">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RUNB">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.N_GROUPS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.G_SIZE">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.N_ITERS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_SELECTORS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.NUM_OVERSHOOT_BYTES">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses files in the BZip2 format 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            This operation is not supported and will throw a NotSupportedExceptionortedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a sequence of bytes and advance position in stream
            </summary>
            <param name="b">Array of bytes to store values in</param>
            <param name="off">Offset in array to begin storing data</param>
            <param name="len">The maximum number of bytes to read</param>
            <returns>The total number of bytes read into the buffer. This might be less
            than the number of bytes requested if that number of bytes are not 
            currently available or zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Close">
            <summary>
            Closes the input stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct instance for reading from stream
            </summary>
            <param name="stream">Data source</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position
            </summary>
            <returns>byte read or -1 on end of stream</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating if the stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the streams position
            Setting the position is not supported and will throw a NotSupportException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set the position</exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream">
            <summary>
            An output stream that compresses into the BZip2 format 
            including file header chars into another stream.
            TODO: Update to BZip2 1.0.1, 1.0.2
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.ReadByte">
            <summary>
            Read a byte from the stream advancing the position.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of bytes to the stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a default output stream with maximum block size
            </summary>
            <param name="inStream"></param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct output stream with custom block size
            </summary>
            <param name="inStream"></param>
            <param name="inBlockSize"></param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            write a byte to output
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Finalize">
            <summary>
            Free any resources and other cleanup before garbage collection reclaims memory
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Close">
            <summary>
            End the current block and end compression.
            Close the stream and free any resources
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flush output buffers
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the <code>Adler32</code> class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buf">
            an array of bytes
            </param>
            <param name="off">
            the start of the data used for this update
            </param>
            <param name="len">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Crc32">
            <summary>
            Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
            x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
            Polynomials over GF(2) are represented in binary, one bit per coefficient,
            with the lowest powers in the most significant bit.  Then adding polynomials
            is just exclusive-or, and multiplying a polynomial by x is a right shift by
            one.  If we call the above polynomial p, and represent a byte as the
            polynomial q, also with the lowest power in the most significant bit (so the
            byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
            where a mod b means the remainder after dividing a by b.
            
            This calculation is done using the shift-register method of multiplying and
            taking the remainder.  The register is initialized to zero, and for each
            incoming bit, x^32 is added mod p to the register if the bit is a one (where
            x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
            x (which is shifting right by one and adding x^32 mod p if the bit shifted
            out is a one).  We start with the highest power (least significant bit) of
            q and repeat for all eight bits of q.
            
            The table is simply the CRC of all possible eight bit values.  This is all
            the information needed to generate CRC's on data a byte at a time for all
            combinations of CRC register values and incoming bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "bval">
            the byte is taken as the lower 8 bits of bval
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            construct Crc
            </summary>	
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            reset state of Crc
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            update Crc value
            </summary>
            <param name="inCh">data update is based on</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            update Crc based on a portion of a block of data
            </summary>
            <param name="buf">block of data</param>
            <param name="off">index of first byte to use</param>
            <param name="len">number of bytes to use</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            current Crc value
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code lang="C#">
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		Stream s = new GZipInputStream(File.OpenRead(args[0]));
            		FileStream fs = File.Create(Path.GetFileNameWithoutExtension(args[0]));
            		int size = 2048;
            		byte[] writeData = new byte[2048];
            		while (true) {
            			size = s.Read(writeData, 0, size);
            			if (size > 0) {
            				fs.Write(writeData, 0, size);
            			} else {
            				break;
            			}
            		}
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
            <summary>
            This filter stream is used to decompress data compressed using the "deflate"
            format. The "deflate" format is described in RFC 1951.
            
            This stream may form the basis for other decompression filters, such
            as the <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
            Author of the original java version : John Leuner.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.buf">
            <summary>
            Byte array used for buffering input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.len">
            <summary>
            Size of buffer <see cref="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.buf"></see>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.FillInputBuffer">
            <summary>
            Fill input buffer with a chunk of data.
            </summary>		
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            Stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            Stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.ReadByte">
            <summary>
            Reads one byte of decompressed data.
            
            The byte is baseInputStream the lower 8 bits of the int.
            </summary>
            <returns>
            The byte read cast to an int, or -1 on end of stream.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses data into the byte array
            </summary>
            <param name="b">
            The array to read and decompress data into
            </param>
            <param name="off">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="n">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is zero or less
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.cryptbuffer">
            <summary>
            A buffer used for decrypting data.  Used to hold Zip crypto header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.DecryptByte">
            <summary>
            Decrypt a single byte
            </summary>
            <returns>plain text byte value</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.DecryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypt cipher text block, updating keys
            </summary>
            <param name="buf">Data to decrypt</param>
            <param name="off">Offset of first byte to process</param>
            <param name="len">Number of bytes to process</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.InitializePassword(System.String)">
            <summary>
            Initialise the decryption keys
            </summary>
            <param name="password">The password used to initialise the keys</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.UpdateKeys(System.Byte)">
            <summary>
            Update the decryption keys
            </summary>
            <param name="ch">Character to update the keys with</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Value of false indicating seeking is not supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Get true if stream is writeable
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
            TODO make this a bool property?
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BufferReadSize">
            <summary>
            Sets the size of chunks to read from the input stream
            0 means as larger as possible.
            </summary>
            <remarks>
            Used to handle decryption where the length of stream is unknown.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.eos">
            <summary>
            Indicates end of stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buf">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of uncompressed bytes to be read
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipOutputStream">
            <summary>
            This filter stream is used to compress a stream into a "GZIP" stream.
            The "GZIP" format is described in RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to gzip a file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		Stream s = new GZipOutputStream(File.Create(args[0] + ".gz"));
            		FileStream fs = File.OpenRead(args[0]);
            		byte[] writeData = new byte[fs.Length];
            		fs.Read(writeData, 0, (int)fs.Length);
            		s.Write(writeData, 0, writeData.Length);
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.
            
            authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buf">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.def">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the def's input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="defl">
            the underlying deflater.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufsize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls finish() and closes the stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="bval">
            The byte value.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buf">
            The byte array
            </param>
            <param name="off">
            The offset into the byte array where to start.
            </param>
            <param name="len">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptByte">
            <summary>
            Encrypt a single byte 
            </summary>
            <returns>
            The encrypted value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            The current position within the stream.
            Always throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.  When null no encryption is performed
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buf">Buffer to write</param>
            <param name="off">Offset of first byte in buf to write</param>
            <param name="len">Number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException">
            <summary>
            This exception is used to indicate that there is a problem
            with a TAR archive header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor">
            <summary>
            Construct default instance
            Used to indicate problems with Tar archive headers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Construct instance with a message
            Used to indicate problems with Tar archive headers
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler">
            <summary>
            Used to advise clients of 'events' while processing archives
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarArchive">
            <summary>
            The TarArchive class implements the concept of a
            'Tape Archive'. A tar archive is a series of entries, each of
            which represents a file system object. Each entry in
            the archive consists of a header block followed by 0 or more data blocks.
            Directory entries consist only of the header block, and are followed by entries
            for the directory's contents. File entries consist of a
            header followed by the number of blocks needed to
            contain the file's contents. All entries are written on
            block boundaries. Blocks are 512 bytes long.
            
            TarArchives are instantiated in either read or write mode,
            based upon whether they are instantiated with an InputStream
            or an OutputStream. Once instantiated TarArchives read/write
            mode can not be changed.
            
            There is currently no support for random access to tar archives.
            However, it seems that subclassing TarArchive, and using the
            TarBuffer.getCurrentRecordNum() and TarBuffer.getCurrentBlockNum()
            methods, this would be rather trvial.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.OnProgressMessageEvent(ICSharpCode.SharpZipLib.Tar.TarEntry,System.String)">
            <summary>
            Raises the ProgressMessage event
            </summary>
            <param name="entry">TarEntry for this event</param>
            <param name="message">message for this event.  Null is no message</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor">
            <summary>
            Constructor for a TarArchive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream)">
            <summary>
            The InputStream based constructors create a TarArchive for the
            purposes of extracting or listing a tar archive. Thus, use
            these constructors when you wish to extract files from or list
            the contents of an existing tar archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create TarArchive for reading setting block factor
            </summary>
            <param name="inputStream">Stream for tar archive contents</param>
            <param name="blockFactor">The blocking factor to apply</param>
            <returns>
            TarArchive
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default block factor
            </summary>
            <param name="outputStream">Stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a TarArchive for writing to
            </summary>
            <param name="outputStream">Stream to write to</param>
            <param name="blockFactor">Block factor to use for buffering</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Initialize(System.Int32)">
            <summary>
            Common constructor initialization code.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetDebug(System.Boolean)">
            <summary>
            Set the debugging flag
            </summary>
            <param name="debugFlag"> The new debug setting.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepOldFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetAsciiTranslation(System.Boolean)">
            <summary>
            Set the ascii file translation flag. If ascii file translation
            is true, then the MIME file type will be consulted to determine
            if the file is of type 'text/*'. If the MIME type is not found,
            then the TransFileTyper is consulted if it is not null. If
            either of these two checks indicates the file is an ascii text
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
            <param name= "asciiTranslate">
            If true, translate ascii text files.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. Since Java currently provides no means
            of determining a user name, user id, group name, or group id for
            a given File, TarArchive allows the programmer to specify values
            to be used in their place.
            </summary>
            <param name="userId">
            The user Id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CloseArchive">
            <summary>
            Close the archive. This simply calls the underlying
            tar stream's close() method.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ListContents">
            <summary>
            Perform the "list" command and list the contents of the archive.
            
            NOTE That this method uses the progress display to actually list
            the contents. If the progress display is not set, nothing will be
            listed!
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractContents(System.String)">
            <summary>
            Perform the "extract" command and extract the contents of the archive.
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractEntry(System.String,ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Extract an entry from the archive. This method assumes that the
            tarIn stream has been properly set with a call to getNextEntry().
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
            <param name="entry">
            The TarEntry returned by tarIn.getNextEntry().
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.WriteEntry(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="entry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent">
            <summary>
            Client hook allowing detailed information to be reported during processing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.IsVerbose">
            <summary>
            Get/Set the verbosity setting.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserId">
            <summary>
            Get the user id being used for archive entry headers.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserName">
            <summary>
            Get the user name being used for archive entry headers.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupId">
            <summary>
            Get the group id being used for archive entry headers.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupName">
            <summary>
            Get the group name being used for archive entry headers.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RecordSize">
            <summary>
            Get the archive's record size. Because of its history, tar
            supports the concept of buffered IO consisting of RECORDS of
            BLOCKS. This allowed tar to match the IO characteristics of
            the physical device being used. Of course, in the C# world,
            this makes no sense, WITH ONE EXCEPTION - archives are expected
            to be properly "blocked". Thus, all of the horrible TarBuffer
            support boils down to simply getting the "boundaries" correct.
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarBuffer">
            <summary>
            The TarBuffer class implements the tar archive concept
            of a buffered input stream. This concept goes back to the
            days of blocked tape drives and special io devices. In the
            C# universe, the only real function that this class
            performs is to ensure that files have the correct "record"
            size, or other tars will complain.
            <p>
            You should never have a need to access this class directly.
            TarBuffers are created by Tar IO Streams.
            </p>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockSize">
            <summary>
            The size of a block in a tar archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultBlockFactor">
            <summary>
            Number of blocks in a record by default
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultRecordSize">
            <summary>
            Size in bytes of a record by default
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.SetDebug(System.Boolean)">
            <summary>
            Set the debugging flag for the buffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.#ctor">
            <summary>
            Construct a default TarBuffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream)">
            <summary>
            Create TarBuffer for reading with default BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for reading inputStream setting BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct TarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">output stream for buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for writing setting BlockFactor
            </summary>
            <param name="outputStream">output stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Initialize(System.Int32)">
            <summary>
            Initialization common to all constructors.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetBlockFactor">
            <summary>
            Get the TAR Buffer's block factor
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetRecordSize">
            <summary>
            Get the TAR Buffer's record size.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.IsEOFBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates End of Archive. End of
            archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">
            The block data to check.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.SkipBlock">
            <summary>
            Skip over a block on the input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadBlock">
            <summary>
            Read a block from the input stream and return the data.
            </summary>
            <returns>
            The block of data read
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadRecord">
            <summary>
            Read a record from data stream.
            </summary>
            <returns>
            alse if End-Of-File, else true
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <returns>
            The current zero based block number.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">
            <summary>
            Get the current record number
            Absolute block number in file = (currentRecordNum * block factor) + currentBlockNum.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
            
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buf">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buf.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteRecord">
            <summary>
            Write a TarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Flush">
            <summary>
            Flush the current data block if it has any data in it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Close">
            <summary>
            Close the TarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.RecordSize">
            <summary>
            Get the recordsize for this buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarEntry">
            <summary>
            This class represents an entry in a Tar archive. It consists
            of the entry's header, as well as the entry's File. Entries
            can be instantiated in one of three ways, depending on how
            they are to be used.
            <p>
            TarEntries that are created from the header bytes read from
            an archive are instantiated with the TarEntry( byte[] )
            constructor. These entries will be used when extracting from
            or listing the contents of an archive. These entries have their
            header filled in using the header bytes. They also set the File
            to null, since they reference an archive entry not a file.</p>
            <p>
            TarEntries that are created from Files that are to be written
            into an archive are instantiated with the TarEntry( File )
            constructor. These entries have their header filled in using
            the File's information. They also keep a reference to the File
            for convenience when writing entries.</p>
            <p>
            Finally, TarEntries can be constructed from nothing but a name.
            This allows the programmer to construct the entry by hand, for
            instance when only an InputStream is available for writing to
            the archive, and the header information is constructed from
            other information. In this case the header fields are set to
            defaults and the File is set to null.</p>
            
            <see cref="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader"/>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.file">
            <summary>
            If this entry represents a File, this references it.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.header">
            <summary>
            This is the entry's header information.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor">
            <summary>
            Only allow creation of Entries with the static CreateXYZ factory methods.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(System.Byte[])">
            <summary>
            Construct an entry from an archive's header bytes. File is set
            to null.
            </summary>
            <param name = "headerBuf">
            The header bytes from a tar archive entry.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(ICSharpCode.SharpZipLib.Tar.TarHeader)">
            <summary>
            Construct a TarEntry using the <paramref name="header">header</paramref> provided
            </summary>
            <param name="header">Header details for entry</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateTarEntry(System.String)">
            <summary>
            Construct an entry with only a <paramref name="name"></paramref>.
            This allows the programmer to construct the entry's header "by hand". 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateEntryFromFile(System.String)">
            <summary>
            Construct an entry for a file. File is set to file, and the
            header is constructed from information from the file.
            </summary>
            <param name = "fileName">
            The file that the entry represents.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Initialize">
            <summary>
            Initialization code common to all pseudo constructors.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Equals(System.Object)">
            <summary>
            Determine if the two entries are equal. Equality is determined
            by the header names being equal.
            </summary>
            <returns>
            True if the entries are equal.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetHashCode">
            <summary>
            Must be overridden when you override Equals.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDescendent(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Determine if the given entry is a descendant of this entry.
            Descendancy is determined by the name of the descendant
            starting with this entry's name.
            </summary>
            <param name = "desc">
            Entry to be checked as a descendent of this.
            </param>
            <returns>
            True if entry is a descendant of this.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetIds(System.Int32,System.Int32)">
            <summary>
            Convenience method to set this entry's group and user ids.
            </summary>
            <param name="userId">
            This entry's new user id.
            </param>
            <param name="groupId">
            This entry's new group id.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetNames(System.String,System.String)">
            <summary>
            Convenience method to set this entry's group and user names.
            </summary>
            <param name="userName">
            This entry's new user name.
            </param>
            <param name="groupName">
            This entry's new group name.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.AdjustEntryName(System.Byte[],System.String)">
            <summary>
            Convenience method that will modify an entry's name directly
            in place in an entry header buffer byte array.
            </summary>
            <param name="outbuf">
            The buffer containing the entry header to modify.
            </param>
            <param name="newName">
            The new name to place into the header buffer.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetFileTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader with information from a File.
            </summary>
            <param name="hdr">
            The TarHeader to fill in.
            </param>
            <param name="file">
            The file from which to get the header information.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetDirectoryEntries">
            <summary>
            If this entry represents a directory, return
            an array of TarEntries for this entry's children.
            </summary>
            <returns>
            An array of TarEntry's for this entry's children.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.WriteEntryHeader(System.Byte[])">
            <summary>
            Write an entry's header information to a header buffer.
            </summary>
            <param name = "outbuf">
            The tar entry header buffer to fill in.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.NameTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader given only the entry's name.
            </summary>
            <param name="hdr">
            The TarHeader to fill in.
            </param>
            <param name="name">
            The tar entry name.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader">
            <summary>
            Get this entry's header.
            </summary>
            <returns>
            This entry's TarHeader.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Name">
            <summary>
            Get/Set this entry's name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserId">
            <summary>
            Get/set this entry's user id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupId">
            <summary>
            Get/set this entry's group id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserName">
            <summary>
            Get/set this entry's user name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupName">
            <summary>
            Get/set this entry's group name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.ModTime">
            <summary>
            Get/Set the modification time for this entry
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.File">
            <summary>
            Get this entry's file.
            </summary>
            <returns>
            This entry's file.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Size">
            <summary>
            Get/set this entry's recorded file size.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarHeader">
            <summary>
            This class encapsulates the Tar Entry Header used in Tar Archives.
            The class also holds a number of tar constants, used mostly in headers.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_ACL">
            <summary>
            Solaris access control list file type
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.name">
            <summary>
            The entry's name.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.mode">
            <summary>
            The entry's Unix style permission mode.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.userId">
            <summary>
            The entry's user id.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.groupId">
            <summary>
            The entry's group id.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.size">
            <summary>
            The entry's size.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.modTime">
            <summary>
            The entry's modification time.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.checkSum">
            <summary>
            The entry's checksum.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.typeFlag">
            <summary>
            The entry's type flag.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.linkName">
            <summary>
            The entry's link name.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.magic">
            <summary>
            The entry's magic tag.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.version">
            <summary>
            The entry's version.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.userName">
            <summary>
            The entry's user name.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.groupName">
            <summary>
            The entry's group name.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.devMajor">
            <summary>
            The entry's major device number.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.devMinor">
            <summary>
            The entry's minor device number.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.#ctor">
            <summary>
            Construct default TarHeader instance
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Clone">
            <summary>
            TarHeaders can be cloned.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetName">
            <summary>
            Get the name of this entry.
            </summary>
            <returns>
            The entry's name.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseOctal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an octal string from a header buffer. This is used for the
            file permission mode value.
            </summary>
            <param name = "header">
            The header buffer from which to parse.
            </param>
            <param name = "offset">
            The offset into the buffer from which to parse.
            </param>
            <param name = "length">
            The number of header bytes to parse.
            </param>
            <returns>
            The long value of the octal string.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an entry name from a header buffer.
            </summary>
            <param name="header">
            The header buffer from which to parse.
            </param>
            <param name="offset">
            The offset into the buffer from which to parse.
            </param>
            <param name="length">
            The number of header bytes to parse.
            </param>
            <returns>
            The header's entry name.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">the name to add</param>
            <param name="nameOffset">the offset of the first character</param>
            <param name="buf">the buffer to add to</param>
            <param name="bufferOffset">the index of the first byte to add</param>
            <param name="length">the number of characters/bytes to add</param>
            <returns>the next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">
            The name to add
            </param>
            <param name="buf">
            The buffer to add to
            </param>
            <param name="offset">
            The offset into the buffer from which to start adding
            </param>
            <param name="length">
            The number of header bytes to add
            </param>
            <returns>
            The index of the next free byte in the buffer
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "val">
            the value to be converted to octal
            </param>
            <param name = "buf">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "val">
            Value to be convert to octal
            </param>
            <param name = "buf">
            The buffer to update
            </param>
            <param name = "offset">
            The offset into the buffer to store the value
            </param>
            <param name = "length">
            The length of the octal string
            </param>
            <returns>
            Index of next byte
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum octal integer to header buffer.
            </summary>
            <param name = "val">
            </param>
            <param name = "buf">
            The header buffer to set the checksum for
            </param>
            <param name = "offset">
            The offset into the buffer for the checksum
            </param>
            <param name = "length">
            The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>
            The modified buffer offset
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buf">
            The tar entry's header buffer.
            </param>
            <returns>
            The computed checksum.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseBuffer(System.Byte[])">
            <summary>
            Parse TarHeader information from a header buffer.
            </summary>
            <param name = "header">
            The tar entry header buffer to get information from.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided
            </summary>
            <param name="outbuf">output buffer for header information</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream">
            <summary>
            The TarInputStream reads a UNIX tar archive as an InputStream.
            methods are provided to position at each successive entry in
            the archive, and the read each entry as a normal input stream
            using read().
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.debug">
            <summary>
            Internal debugging flag
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.hasHitEOF">
            <summary>
            Flag set when last block has been read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entrySize">
            <summary>
            Size of this entry as recorded in header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entryOffset">
            <summary>
            Number of bytes read for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.readBuf">
            <summary>
            Buffer used with calls to <code>Read()</code>
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.buffer">
            <summary>
            Working buffer
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.currEntry">
            <summary>
            Current entry being read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.eFactory">
            <summary>
            Factory used to create TarEntry or descendant class instance
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a TarInputStream with default block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a TarInputStream with user specified block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
            <param name="blockFactor">block factor to apply to archive</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetDebug(System.Boolean)">
            <summary>
            set debug flag both locally and for buffer
            </summary>
            <param name="debugFlag">debug on or off</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetBufferDebug(System.Boolean)">
            <summary>
            set debug flag for buffer
            </summary>
            <param name="debug">debug on or off</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetEntryFactory(ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)">
            <summary>
            Set the entry factory for this instance.
            </summary>
            <param name="factory">The factory for creating new entries</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Close">
            <summary>
            Closes this stream. Calls the TarBuffer's close() method.
            The underlying stream is closed by the TarBuffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            TarBuffer record size.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Skip(System.Int32)">
            <summary>
            Skip bytes in the input buffer. This skips bytes in the
            current entry's data, not the entire archive, and will
            stop at the end of the current entry's data if the number
            to skip extends beyond that point.
            </summary>
            <param name="numToSkip">
            The number of bytes to skip.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Mark(System.Int32)">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
            <param name ="markLimit">
            The limit to mark.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Reset">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetNextEntry">
            <summary>
            Get the next entry in this tar archive. This will skip
            over any remaining data in the current entry, if there
            is one, and place the input stream at the header of the
            next entry, and read the header and instantiate a new
            TarEntry from the header bytes and return that entry.
            If there are no more entries in the archive, null will
            be returned to indicate that the end of the archive has
            been reached.
            </summary>
            <returns>
            The next TarEntry in the archive, or null.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.ReadByte">
            <summary>
            Reads a byte from the current tar archive entry.
            This method simply calls read(byte[], int, int).
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the current tar archive entry.
            
            This method is aware of the boundaries of the current
            entry in the archive and will deal with them appropriately
            </summary>
            <param name="outputBuffer">
            The buffer into which to place bytes read.
            </param>
            <param name="offset">
            The offset at which to place bytes read.
            </param>
            <param name="numToRead">
            The number of bytes to read.
            </param>
            <returns>
            The number of bytes read, or 0 at end of stream/EOF.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.CopyEntryContents(System.IO.Stream)">
            <summary>
            Copies the contents of the current tar archive entry directly into
            an output stream.
            </summary>
            <param name="outputStream">
            The OutputStream into which to write the entry's data.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanWrite">
            <summary>
            Gets a value indicating if the stream supports writing.
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Length">
            <summary>
            The length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Position">
            <summary>
            Gets or sets the position within the stream. 
            Setting the Position is not supported and throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Available">
            <summary>
            Get the available data that can be read from the current
            entry in the archive. This does not indicate how much data
            is left in the entire archive, only in the current entry.
            This value is determined from the entry's size header field
            and the amount of data already read from the current entry.
            </summary>
            <returns>
            The number of available bytes for the current entry.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.IsMarkSupported">
            <summary>
            Since we do not support marking just yet, we return false.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory">
            <summary>
            This interface is provided, along with the method setEntryFactory(), to allow
            the programmer to have their own TarEntry subclass instantiated for the
            entries return from getNextEntry().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.String)">
            <summary>
            Create an entry based on name alone
            </summary>
            <param name="name">
            Name of the new EntryPointNotFoundException to create
            </param>
            <returns>created TarEntry or descendant class</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntryFromFile(System.String)">
            <summary>
            Create an instance based on an actual file
            </summary>
            <param name="fileName">
            Name of file to represent in the entry
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.Byte[])">
            <summary>
            Create a tar entry based on the header information passed
            </summary>
            <param name="headerBuf">
            Buffer containing header information to base entry on
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter">
            <summary>
            Standard entry factory class creating instances of the class TarEntry
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.String)">
            <summary>
            Create a TarEntry based on named
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntryFromFile(System.String)">
            <summary>
            Create a tar entry with details obtained from <paramref name="fileName">file</paramref>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.Byte[])">
            <summary>
            Create and entry based on details in <paramref name="headerBuf">header</paramref>
            </summary>			
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarOutputStream">
            <summary>
            The TarOutputStream writes a UNIX tar archive as an OutputStream.
            Methods are provided to put entries, and then write their contents
            by writing to this stream using write().
            </summary>
            public
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.debug">
            <summary>
            flag indicating debugging code should be activated or not
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currSize">
            <summary>
            Size for the current entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currBytes">
            <summary>
            bytes written for this entry so far
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.blockBuf">
            <summary>
            single block working buffer 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemLen">
            <summary>
            current 'Assembly' buffer length
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemBuf">
            <summary>
            'Assembly' buffer used to assmble data before writing
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.buffer">
            <summary>
            TarBuffer used to provide correct blocking factor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.outputStream">
            <summary>
            the destination stream for the archive contents
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.SetLength(System.Int64)">
            <summary>
            set the length of the current stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read, or zero if at the end of the stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct TarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.SetDebug(System.Boolean)">
            <summary>
            Sets the debugging flag.
            </summary>
            <param name = "debugFlag">
            True to turn on debugging.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.SetBufferDebug(System.Boolean)">
            <summary>
             Set the debug flag for the buffer
            </summary>
            <param name="debug">True for debug on false for debug off</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF record of nulls is written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            This means that finish() is called followed by calling the
            TarBuffer's close().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            The TarBuffer record size.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <B>MUST</B> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The TarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="b">
            The byte to be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by TarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "wBuf">
            The buffer to write to the archive.
            </param>
            <param name = "wOffset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "numToWrite">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteEOFRecord">
            <summary>
            Write an EOF (end of archive) record to the tar archive.
            An EOF record consists of a record of all zeros.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.
            
            author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            write a byte to this output window
            </summary>
            <param name="abyte">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="len">length of pattern to copy</param>
            <param name="dist">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="len">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dict">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="len">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
            <summary>
            This class allows us to retrieve a specified number of bits from
            the input buffer, as well as copy big byte blocks.
            
            It uses an int buffer to store up to 31 bits for direct
            manipulation.  This guarantees that we can get at least 16 bits,
            but we only need at most 15, so this is all safe.
            
            There are some optimizations in this class, for example, you must
            never peek more than 8 bits more than needed, and you must first
            peek bits before you may drop them.  This is not a general purpose
            class but optimized for the behaviour of the Inflater.
            
            authors of the original java version : John Leuner, Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to PeekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buf">data to be input</param>
            <param name="off">offset of first byte of input</param>
            <param name="len">length of input</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
            <summary>
            This is the Deflater class.  The deflater class compresses input
            with the deflate algorithm described in RFC 1951.  It has several
            compression levels and three different strategies described below.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="off">
            the start of the data.
            </param>
            <param name="len">
            the length of the data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If end() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            The dictionary data
            </param>
            <param name="offset">
            An offset into the dictionary.
            </param>
            <param name="length">
            The length of the dictionary data to use
            </param>
            <exception cref="T:System.InvalidOperationException">
            If setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> via SetInput</see>
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="lit"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.freqs">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.length">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.minNumCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.numCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteSymbol(System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that at least one frequency is non-zero
            </summary>
            <exception cref="T:System.ApplicationException">
            No frequencies are non-zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="stCodes">new codes</param>
            <param name="stLength">length for new codes</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildTree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buf">
            <summary>Internal work buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufsize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            write a byte to buffer
            </summary>
            <param name="b">
            value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="len">number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            the output array;
            </param>
            <param name="offset">
            the offset into output array;
            </param>
            <param name="length">		
            length the maximum number of bytes to store;
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            converted buffer contents contents
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
            <summary>
            Inflater is used to decompress data that has been compressed according
            to the "deflate" standard described in rfc1951.
            
            By default Zlib (rfc1950) headers and footers are expected in the input.
            You can use constructor <code> public Inflater(bool noHeader)</code> passing true
            if there is no Zlib header information
            
            The usage is as following.  First you have to set some input with
            <code>setInput()</code>, then inflate() it.  If inflate doesn't
            inflate any bytes there may be three reasons:
            <ul>
            <li>needsInput() returns true because the input buffer is empty.
            You have to provide more input with <code>setInput()</code>.
            NOTE: needsInput() also returns true when, the stream is finished.
            </li>
            <li>needsDictionary() returns true, you have to provide a preset
               dictionary with <code>setDictionary()</code>.</li>
            <li>finished() returns true, the inflater has finished.</li>
            </ul>
            Once the first output byte is produced, a dictionary will not be
            needed at a later stage.
            
            author of the original java version : John Leuner, Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:System.ApplicationException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:System.ApplicationException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:System.ApplicationException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:System.ApplicationException">
            ApplicationException, if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:System.ArgumentException">
            if the dictionary checksum is wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="offset">
            The offset into buffer where the dictionary starts.
            </param>
            <param name="len">
            The length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:System.ApplicationException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if no input is needed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="offset">
            The offset into buffer where the input starts.
            </param>
            <param name="length">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The off and/or len are wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <param name="offset">
            the offset into buffer where the output should start.
            </param>
            <param name="len">
            the maximum length of the output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the offset and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCVER">
            <summary>
            Offset of version to extract in local entry header
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCFLG">
            <summary>
            Offset of general purpose flags in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHOW">
            <summary>
            Offset of compression method in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCTIM">
            <summary>
            Offset of last mod file time + date in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCCRC">
            <summary>
            Offset of crc-32 in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIZ">
            <summary>
            Offset of compressed size in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCLEN">
            <summary>
            Offset of uncompressed size in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCNAM">
            <summary>
            Offset of file name length in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCEXT">
            <summary>
            Offset of extra field length in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.<br/>
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTCRC">
            <summary>
            Offset of crc-32 in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIZ">
            <summary>
            Offset of compressed size in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTLEN">
            <summary>
            Offset of uncompressed length in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENVEM">
            <summary>
            Offset of version made by in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENVER">
            <summary>
            Offset of version needed to extract in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENFLG">
            <summary>
            Offset of general purpose bit flag in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHOW">
            <summary>
            Offset of compression method in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENTIM">
            <summary>
            Offset of time/date in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENCRC">
            <summary>
            Offset of crc-32 in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIZ">
            <summary>
            Offset of compressed size in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENLEN">
            <summary>
            Offset of uncompressed size in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENNAM">
            <summary>
            Offset of file name length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENEXT">
            <summary>
            Offset of extra field length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENCOM">
            <summary>
            Offset of file comment length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDSK">
            <summary>
            Offset of disk start number in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENATT">
            <summary>
            Offset of internal file attributes in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENATX">
            <summary>
            Offset of external file attributes in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENOFF">
            <summary>
            Offset of relative offset of local header in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDNRD">
            <summary>
            Offset of number of this disk
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDDCD">
            <summary>
            Offset of number of disk with start of central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSUB">
            <summary>
            Offset of number of entries in the central directory of this disk
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDTOT">
            <summary>
            Offset of total number of entries in the central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIZ">
            <summary>
            Offset of size of central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDOFF">
            <summary>
            Offset of offset of start of central directory with respect to starting disk number
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDCOM">
            <summary>
            Offset of ZIP file comment length
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="length">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives default system ansi code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a copy of the given zip entry.
            </summary>
            <param name="e">
            The entry to copy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            </summary>
            <param name="name">Name to clean</param>
            <param name="relativePath">Make names relative if true or absolute if false</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with Windows-XPs built in Zip file handling.
            </summary>
            <param name="name">Name to clean</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets the string representation of this ZipEntry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-15: Unused or reserved<br/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Name">
            <summary>
            Returns the entry name.  The path components in the entry should
            always separated by slashes ('/').  Dos device names like C: should also
            be removed.  See <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the size is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Size is not in the range 0..0xffffffff
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 0xffff bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating of the if the entry is a directory.  A directory is determined by
            an entry name with a trailing slash '/'.  The external file attributes
            can also mark a file as a directory.  The trailing slash convention should always be followed
            however.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            This class is thread safe:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		ZipFile zFile = new ZipFile(args[0]);
            		Console.WriteLine("Listing of : " + zFile.Name);
            		Console.WriteLine("");
            		Console.WriteLine("Raw Size    Size      Date     Time     Name");
            		Console.WriteLine("--------  --------  --------  ------  ---------");
            		foreach (ZipEntry e in zFile) {
            			DateTime d = e.DateTime;
            			Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            			                                                    d.ToString("dd-MM-yy"), d.ToString("t"),
            			                                                    e.Name);
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given FileStream
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given Stream
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The file doesn't contain a valid zip archive.<br/>
            The stream provided cannot seek
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries
            array.  This is called exactly once by the constructors.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  This also closes all input streams managed by
            this class.  Once closed, no further instance methods should be
            called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator for the Zip entries in this Zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            The zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CheckLocalHeader(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Checks, if the local header of the entry at index i matches the
            central directory, and returns the offset to the data.
            </summary>
            <returns>
            The start offset of the (compressed) data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates an input stream reading the given zip entry as
            uncompressed data.  Normally zip entry should be an entry
            returned by GetEntry().
            </summary>
            <returns>
            the input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int32)">
            <summary>
            Creates an input stream reading the zip entry based on the index passed
            </summary>
            <returns>
            An input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream">
            <summary>
            This is an InflaterInputStream that reads the files baseInputStream an zip archive
            one after another.  It has a special method to get the zip entry of
            the next file.  The zip entry contains information about the file name
            size, compressed size, Crc, etc.
            It includes support for Stored and Deflated entries.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            
            <example> This sample shows how to read a zip file
            <code lang="C#">
            using System;
            using System.Text;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]));
            		
            		ZipEntry theEntry;
            		while ((theEntry = s.GetNextEntry()) != null) {
            			int size = 2048;
            			byte[] data = new byte[2048];
            			
            			Console.Write("Show contents (y/n) ?");
            			if (Console.ReadLine() == "y") {
            				while (true) {
            					size = s.Read(data, 0, data.Length);
            					if (size > 0) {
            						Console.Write(new ASCIIEncoding().GetString(data, 0, size));
            					} else {
            						break;
            					}
            				}
            			}
            		}
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadLeShort">
            <summary>
            Read an unsigned short baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadLeInt">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadLeLong">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            Password is not set, password is invalid, compression method is invalid, 
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
            <exception name="System.IO.IOException">
            An i/o error occured.
            </exception>
            <exception name="ICSharpCode.SharpZipLib.ZipException">
            The deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if the entry can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipOutputStream">
            <summary>
            This is a DeflaterOutputStream that writes the files into a zip
            archive one after another.  It has a special method to start a new
            zip entry.  The zip entries contains information about the file name
            size, compressed size, CRC, etc.
            
            It includes support for Stored and Deflated entries.
            This class is not thread safe.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example> This sample shows how to create a zip file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		string[] filenames = Directory.GetFiles(args[0]);
            		
            		ZipOutputStream s = new ZipOutputStream(File.Create(args[1]));
            		
            		s.SetLevel(5); // 0 - store only to 9 - means best compression
            		
            		foreach (string file in filenames) {
            			FileStream fs = File.OpenRead(file);
            			
            			byte[] buffer = new byte[fs.Length];
            			fs.Read(buffer, 0, buffer.Length);
            			
            			ZipEntry entry = new ZipEntry(file);
            			
            			s.PutNextEntry(entry);
            			
            			s.Write(buffer, 0, buffer.Length);
            			
            		}
            		
            		s.Finish();
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment string
            </param>
            <exception name ="ArgumentOutOfRangeException">
            Encoding of comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets default compression level.  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflate compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            Archive size is invalid
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets boolean indicating central header has been added for this archive...
            No further entries can be added once this has been done.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.ZipException">
            <summary>
            Represents errors specific to Zip file handling
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
        </member>
    </members>
</doc>
