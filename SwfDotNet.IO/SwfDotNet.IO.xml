<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SwfDotNet.IO</name>
    </assembly>
    <members>
        <member name="T:SwfDotNet.IO.ByteCode.ActionCode">
            <summary>
            Action (byte-)codes for actions derived from <see cref="T:SwfDotNet.IO.ByteCode.Actions.BaseAction"/>.	
            </summary>
            <remarks>
            Pseudo actions are given negative values since they are not compiled into swf.
            </remarks>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.NextFrame">
            <summary>NextFrame instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.PreviousFrame">
            <summary>PreviousFrame instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Play">
            <summary>Play instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Stop">
            <summary>Stop instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.ToggleQuality">
            <summary>ToggleQuality instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StopSounds">
            <summary>StopSounds instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Pop">
            <summary>Pop instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Add">
            <summary>Add instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Subtract">
            <summary>Subtract instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Multiply">
            <summary>Multiply instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Divide">
            <summary>Divide  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Equals">
            <summary>Equals instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Less">
            <summary>Less instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.And">
            <summary>And instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Or">
            <summary>Or instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Not">
            <summary>Not instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StringAdd">
            <summary>StringAdd instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StringEquals">
            <summary>StringEquals  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StringExtract">
            <summary>StringExtract instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StringLength">
            <summary>StringLength instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StringLess">
            <summary>StringLess  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.MBStringExtract">
            <summary>MBStringExtract  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.MBStringLength">
            <summary>MBStringLength instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.AsciiToChar">
            <summary>AsciiToChar instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.CharToAscii">
            <summary>CharToAscii  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.ToInteger">
            <summary>ToInteger instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.MBAsciiToChar">
            <summary>MBAsciiToChar instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.MBCharToAscii">
            <summary>MBCharToAscii instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Call">
            <summary>Call instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GetVariable">
            <summary>GetVariable  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.SetVariable">
            <summary>SetVariable instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GetProperty">
            <summary>GetPropertye instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.RemoveSprite">
            <summary>RemoveSprite instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.SetProperty">
            <summary>SetProperty instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.SetTarget2">
            <summary>SetTarget2 instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StartDrag">
            <summary>StartDrag instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.CloneSprite">
            <summary>CloneSprite instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.EndDrag">
            <summary>EndDrag instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GetTime">
            <summary>GetTime instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.RandomNumber">
            <summary>RandomNumber instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Trace">
            <summary>Trace instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.CallFunction">
            <summary>CallFunction instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.CallMethod">
            <summary>CallMethod instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.DefineLocal">
            <summary>DefineLocal instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.DefineLocal2">
            <summary>DefineLocal2 instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Delete">
            <summary>Delete instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Delete2">
            <summary>Delete2 instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Enumerate">
            <summary>Enumerate instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Equals2">
            <summary>Equals2  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GetMember">
            <summary>GetMembe instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.InitArray">
            <summary>InitArray instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.InitObject">
            <summary>InitObject instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.NewMethod">
            <summary>NewMethod instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.NewObject">
            <summary>NewObject instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.SetMember">
            <summary>SetMember  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.TargetPath">
            <summary>TargetPath instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.ToNumber">
            <summary>ToNumber instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.ToString">
            <summary>ToString instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.TypeOf">
            <summary>TypeOf instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Add2">
            <summary>Add2 instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Less2">
            <summary>Less2 instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Modulo">
            <summary>Modulo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.BitAnd">
            <summary>BitAnd instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.BitLShift">
            <summary>BitLShift  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.BitOr">
            <summary>BitOr instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.BitRShift">
            <summary>BitRShift  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.BitURShift">
            <summary>BitURShift instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.BitXor">
            <summary>BitXor instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Decrement">
            <summary>Decremente instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Increment">
            <summary>Increment instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.PushDuplicate">
            <summary>PushDuplicate instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Return">
            <summary>Return instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StackSwap">
            <summary>StackSwap instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.InstanceOf">
            <summary>InstanceOf  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Enumerate2">
            <summary>Enumerate2  instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StrictEquals">
            <summary>StrictEquals instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Greater">
            <summary>Greater instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StringGreater">
            <summary>StringGreater instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Extends">
            <summary>Extends instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.CastOp">
            <summary>CastOp instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Implements">
            <summary>Implements instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Throw">
            <summary>Throw instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.End">
            <summary>Action Record End</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.SetTarget">
            <remarks>multibyte actions:</remarks>
            <summary>SetTarget instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GotoFrame">
            <summary>GotoFrame instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GotoFrame2">
            <summary>GotoFrame2 instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GoToLabel">
            <summary>GoToLabel instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GetURL">
            <summary>GetURL  instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.GetURL2">
            <summary>GetURL2 instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.StoreRegister">
            <summary>StoreRegister instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.ConstantPool">
            <summary>ConstantPool instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.If">
            <remarks>jump actions:</remarks>
            <summary>If instruction (conditional branch); multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Jump">
            <summary>Jump instruction (branch); multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.DefineFunction">
            <remarks>block actions:</remarks>
            <summary>DefineFunction (block) instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.DefineFunction2">
            <summary>DefineFunction2 (block) instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Push">
            <summary>Push instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Try">
            <summary>Try (block) instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.With">
            <summary>With instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.WaitForFrame">
            <summary>WaitForFrame instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.WaitForFrame2">
            <summary>WaitForFrame2 instruction; multi-byte</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Dummy">
            <remarks>pseudo actions:</remarks>
            <summary>Dummy pseudo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.PushList">
            <summary>PushList pseudo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Label">
            <summary>Label pseudo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Catch">
            <summary>Catch pseudo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Finally">
            <summary>Finally pseudo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.EndTry">
            <summary>EndTry pseudo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.EndWith">
            <summary>EndWith pseudo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.EndWait">
            <summary>EndWait pseudo instruction</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.ActionCode.Container">
            <summary>action container pseudo instruction</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionAdd">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionAdd.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionAdd.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionAdd.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionAdd.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionAdd2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionAdd2.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionAdd2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionAdd2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionAdd2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionAnd">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionAnd.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionAnd.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionAnd.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionAnd.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionAsciiToChar">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionAsciiToChar.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionAsciiToChar.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionAsciiToChar.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionAsciiToChar.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionBitAnd">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitAnd.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitAnd.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>		
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitAnd.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitAnd.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionBitLShift">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitLShift.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitLShift.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitLShift.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitLShift.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionBitOr">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitOr.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitOr.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitOr.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitOr.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionBitRShift">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitRShift.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitRShift.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitRShift.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitRShift.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionBitURShift">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitURShift.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitURShift.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitURShift.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitURShift.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionBitXor">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitXor.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitXor.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionBitXor.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionBitXor.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionCall">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCall.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCall.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCall.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCall.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionCallFunction">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCallFunction.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCallFunction.NumArgs">
            <summary>
            argument count as found by <see cref="T:SwfDotNet.IO.ByteCode.InvocationExaminer"></see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCallFunction.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCallFunction.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCallFunction.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionCallMethod">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCallMethod.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCallMethod.NumArgs">
            <summary>
            argument count as found by <see cref="T:SwfDotNet.IO.ByteCode.InvocationExaminer"></see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCallMethod.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCallMethod.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCallMethod.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionCastOp">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCastOp.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCastOp.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCastOp.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCastOp.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionCatch">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCatch.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCatch.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCatch.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCatch.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionCharToAscii">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCharToAscii.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCharToAscii.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCharToAscii.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCharToAscii.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionCloneSprite">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCloneSprite.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCloneSprite.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionCloneSprite.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionCloneSprite.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionConstantPool">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionConstantPool.ConstantList">
            <summary>
            list of constant pool strings by index 
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionConstantPool.#ctor(System.String[])">
            <summary>
            constructor
            </summary>
            <param name="c">constant list</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionConstantPool.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionConstantPool.ToString">
            <summary>
            overriden ToString() method
            </summary>/// <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionConstantPool.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>/// <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionContainer">
            <summary>
            pseudo/helper action for aggregating a whole list of actions into one action.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionContainer.#ctor(SwfDotNet.IO.ByteCode.Actions.BaseAction[])">
            <summary>constructor</summary> 
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionContainer.ActionList">
            <summary>list of contained actions</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionContainer.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionContainer.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionContainer.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionContainer.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDecrement">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDecrement.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDecrement.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDecrement.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDecrement.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal2.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineLocal2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDelete">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDelete.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDelete.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDelete.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDelete.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDelete2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDelete2.#ctor">
            <summary>
            constructor
            </summary>	
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDelete2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDelete2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDelete2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDivide">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDivide.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDivide.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDivide.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDivide.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEnd">
            <summary>
            action record end instruction
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEnd.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEnd.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEndDrag">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndDrag.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEndDrag.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEndDrag.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndDrag.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEndTryBlock">
            <summary>
            pseudo instruction
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndTryBlock.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndTryBlock.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEndTryBlock.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndTryBlock.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEndWait">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndWait.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndWait.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEndWait.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndWait.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEndWith">
            <summary>
            pseudo instruction for end of with-block
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndWith.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndWith.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEndWith.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEndWith.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate2.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEnumerate2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEquals">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEquals.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEquals.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEquals.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEquals.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionEquals2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEquals2.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEquals2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionEquals2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionEquals2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionExtends">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionExtends.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionExtends.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionExtends.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionExtends.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionFinally">
            <summary>
            pseudo instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionFinally.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionFinally.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionFinally.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionFinally.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.Name">
            <summary>
            function name
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.ParameterList">
            <summary>
            list of function parameters
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.ActionRecord">
            <summary>
            inner actions (function body)
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.#ctor(System.String,System.String[],System.Collections.ArrayList)">
            <summary>
            constructor
            </summary>
            <param name="n">function name</param>
            <param name="parmList">funtion parameters</param>
            <param name="actionRec">inner action block (function body)</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.RegParamPair">
            <summary>
            register/name pair of function parameter
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.RegParamPair.#ctor(System.Int32,System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.RegParamPair.ToString">
            <summary>
            overriden ToString method, called by outer class
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet">
            <summary>
            set of flags for automatically storing variables in registers 
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.PreloadParent">
            <summary>preload '_parent' variable</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.PreloadRoot">
            <summary>preload '_root' variable</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.SuppressSuper">
            <summary>suppress '_root' variable</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.PreloadSuper">
            <summary>preload 'super' variable</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.SuppressArguments">
            <summary>suppress 'super' variable</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.PreloadArguments">
            <summary>preload 'arguments' variable</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.SuppressThis">
            <summary>suppress 'arguments' variable</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.PreloadThis">
            <summary>preload 'this' variable</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.PreloadGlobal">
            <summary>preload '_global' variable</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>constructor</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.Count">
            <summary>
            count of positive flags
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.CheckExclusion">
            <summary>
            check wether flags exclude each other
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.Bytecode">
            <summary>
            bytecode for flag set
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet.ToString">
            <summary>
            ToString method, called by outer class´ ToString
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.Name">
            <summary>
            function name
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.ParameterList">
            <summary>
            <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.RegParamPair">RegParamPair</see> of expected parameters 
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.RegisterCount">
            <summary>
            registers allocated by function
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.ActionRecord">
            <summary>
            inner actions (function body)
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.Flags">
            <summary>
            automatically allocated registers flags (this, _global etc.)
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.#ctor(System.String,SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.RegParamPair[],System.Int32,SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.VariableFlagSet,System.Collections.ArrayList)">
            <summary>
            constructor
            </summary>
            <param name="n">function name</param>
            <param name="p">function parameters</param>
            <param name="r">register count</param>
            <param name="f">flags for automatic register allocation</param>
            <param name="actionRec">inner action block (body)</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.InnerByteCount">
            <summary>
            summarized byte count of inner action block
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionDefineFunction2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGetMember">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetMember.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetMember.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetMember.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetMember.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGetProperty">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetProperty.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetProperty.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetProperty.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetProperty.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGetTime">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetTime.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetTime.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetTime.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetTime.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl.#ctor(System.String,System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl2.#ctor(System.Byte)">
            <summary>
            constructor
            </summary>
            <param name="flags">flag settings</param>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl2.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl2.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGetVariable">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetVariable.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetVariable.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGetVariable.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGetVariable.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame.#ctor(System.Int16)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame2.#ctor(System.Byte[])">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame2.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame2.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGotoLabel">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoLabel.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGotoLabel.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoLabel.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGotoLabel.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionGreater">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGreater.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGreater.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionGreater.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionGreater.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionIf">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionIf.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="offs">branch offset</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionIf.Offset">
            <summary>
            branch offset
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionIf.LabelId">
            <summary>
            label id
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionIf.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionIf.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionIf.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionIf.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionIf.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionImplements">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionImplements.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionImplements.NumInterfaces">
            <summary>number of interfaces implemented</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionImplements.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionImplements.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionImplements.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionIncrement">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionIncrement.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionIncrement.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionIncrement.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionIncrement.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionInitArray">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionInitArray.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionInitArray.NumValues">
            <summary>
            array count as found by <see cref="T:SwfDotNet.IO.ByteCode.InvocationExaminer">Invocation Examiner</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionInitArray.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionInitArray.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionInitArray.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionInitObject">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionInitObject.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionInitObject.NumProps">
            <summary>
            property count as found by <see cref="T:SwfDotNet.IO.ByteCode.InvocationExaminer">Invocation Examiner</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionInitObject.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionInitObject.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionInitObject.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionInstanceOf">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionInstanceOf.#ctor">
            <summary>
            array count as found by <see cref="T:SwfDotNet.IO.ByteCode.InvocationExaminer">Invocation Examiner</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionInstanceOf.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionInstanceOf.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionInstanceOf.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionJump">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionJump.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="offs">branch offset</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionJump.Offset">
            <summary>
            branch offsets
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionJump.LabelId">
            <summary>
            label id
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionJump.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionJump.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionJump.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionLabel">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionLabel.LabelId">
            <summary>
            label id
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionLabel.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionLabel.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionLabel.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionLabel.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionLess">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionLess.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionLess.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionLess.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionLess.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionLess2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionLess2.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionLess2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionLess2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionLess2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionMBAsciiToChar">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMBAsciiToChar.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMBAsciiToChar.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMBAsciiToChar.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMBAsciiToChar.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionMBCharToAscii">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMBCharToAscii.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMBCharToAscii.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMBCharToAscii.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMBCharToAscii.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionMBStringExtract">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMBStringExtract.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMBStringExtract.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMBStringExtract.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMBStringExtract.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionMBStringLength">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMBStringLength.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMBStringLength.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMBStringLength.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMBStringLength.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionModulo">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionModulo.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionModulo.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionModulo.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionModulo.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionMultiply">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMultiply.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMultiply.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionMultiply.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionMultiply.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionNewMethod">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionNewMethod.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionNewMethod.NumArgs">
            <summary>
            number of arguments found by <see cref="T:SwfDotNet.IO.ByteCode.InvocationExaminer">InvocationExaminer</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionNewMethod.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionNewMethod.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionNewMethod.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionNewObject">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionNewObject.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionNewObject.NumArgs">
            <summary>
            argument count found by <see cref="T:SwfDotNet.IO.ByteCode.InvocationExaminer">InvocationExaminer</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionNewObject.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionNewObject.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionNewObject.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionNextFrame">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionNextFrame.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionNextFrame.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionNot">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionNot.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionNot.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionNot.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionNot.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionOr">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionOr.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionOr.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionOr.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionOr.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionPlay">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPlay.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPlay.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionPop">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPop.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPop.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPop.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPop.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionPreviousFrame">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPreviousFrame.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPreviousFrame.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionPush">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType">
            <summary>
            enumaration of push types
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.String">
            <summary>push type 0: string</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Float">
            <summary>push type 1: float</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Null">
            <summary>push type 2: null</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Undef">
            <summary>push type 3: undef</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Register">
            <summary>push type 4: register</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Boolean">
            <summary>push type 5: bool</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Double">
            <summary>push type 6: double</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Int">
            <summary>push type 7: int</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Constant8">
            <summary>push type 8: constant8</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushType.Constant16">
            <summary>push type 9: constant9</summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.Type">
            <summary>
            push type
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionPush.Value">
            <summary>
            push value
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPush.#ctor(System.Int32,System.Object)">
            <summary>
            constructor.
            </summary>
            <param name="type">push type</param>
            <param name="val">push value</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPush.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPush.GetIntValue">
            <summary>
            get push value as int
            </summary>
            <returns>pushed value as int</returns>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPush.GetStringValue">
            <summary>
            get value as string
            </summary>
            <returns>pushed value as string</returns>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPush.CompileBody(System.IO.BinaryWriter)">
            <summary>
            compile push type and value (but not action code), so method can
            be used by <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionPushList">ActionPushList</see> as well
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPush.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPush.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPush.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPush.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionPushDuplicate">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPushDuplicate.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPushDuplicate.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPushDuplicate.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPushDuplicate.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionPushList">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPushList.Length">
            <summary>
            length of push list
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPushList.#ctor(SwfDotNet.IO.ByteCode.Actions.ActionPush[])">
            <summary>
            constructor
            </summary>
            <param name="p">list of single push instructions</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPushList.Item(System.Int32)">
            <summary>
            indexer to access single push actions
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPushList.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPushList.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionPushList.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPushList.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionPushList.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionRandomNumber">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionRandomNumber.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionRandomNumber.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionRandomNumber.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionRandomNumber.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionRemoveSprite">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionRemoveSprite.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionRemoveSprite.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionRemoveSprite.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionRemoveSprite.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionReturn">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionReturn.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionReturn.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionReturn.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionReturn.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionSetMember">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetMember.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetMember.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetMember.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetMember.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionSetProperty">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetProperty.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetProperty.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetProperty.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetProperty.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget2.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget2.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget2.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionSetVariable">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetVariable.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetVariable.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSetVariable.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSetVariable.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStackSwap">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStackSwap.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStackSwap.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStackSwap.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStackSwap.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStartDrag">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStartDrag.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStartDrag.Constrain">
            <summary>
            constrain property; see swf specs
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStartDrag.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStartDrag.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStartDrag.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStop">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStop.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStop.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStopSounds">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStopSounds.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStopSounds.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStoreRegister">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.ActionStoreRegister.Register">
            <summary>
            register number
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStoreRegister.#ctor(System.Byte)">
            <summary>
            constructor
            </summary>
            <param name="r">register number</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStoreRegister.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStoreRegister.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStoreRegister.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStrictEquals">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStrictEquals.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStrictEquals.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStrictEquals.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStrictEquals.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStringAdd">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringAdd.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringAdd.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringAdd.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringAdd.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStringEquals">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringEquals.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringEquals.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringEquals.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringEquals.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStringExtract">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringExtract.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringExtract.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringExtract.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringExtract.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStringGreater">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringGreater.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringGreater.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringGreater.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringGreater.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStringLength">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringLength.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringLength.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringLength.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringLength.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionStringLess">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringLess.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringLess.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionStringLess.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionStringLess.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionSubtract">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSubtract.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSubtract.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionSubtract.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionSubtract.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionTargetPath">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTargetPath.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTargetPath.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTargetPath.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTargetPath.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionThrow">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionThrow.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionThrow.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionThrow.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionThrow.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionToggleQuality">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionToggleQuality.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionToggleQuality.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionToInteger">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionToInteger.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionToInteger.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionToInteger.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionToInteger.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionToNumber">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionToNumber.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionToNumber.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionToNumber.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionToNumber.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionToString">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionToString.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionToString.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionToString.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionToString.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionTrace">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTrace.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTrace.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTrace.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTrace.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionTry">
            <summary>
            bytecode instruction object try/catch/finally block
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTry.SizeTry">
            <summary>
            byte size of try block
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTry.SizeCatch">
            <summary>
            byte size of catch block
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTry.SizeFinally">
            <summary>
            byte size of finally block
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTry.#ctor(System.Boolean,System.Boolean,System.Boolean,System.UInt16,System.UInt16,System.UInt16,System.String,System.Byte)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTry.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTry.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTry.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionTypeOf">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTypeOf.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTypeOf.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionTypeOf.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionTypeOf.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame.SkipCount">
            <summary>
            count of byte to skip
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame.#ctor(System.Int16,System.Byte)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame2">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame2.SkipCount">
            <summary>count of bytes to skip</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame2.#ctor(System.Byte)">
            <summary>constructor</summary>
            <param name="skip">bytes to skip</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame2.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame2.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame2.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.ActionWith">
            <summary>
            bytecode instruction object
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionWith.BlockLength">
            <summary>
            block length of actions enclosed by 'with'
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWith.#ctor(System.UInt16)">
            <summary>
            constructor
            </summary>
            <param name="blockLen">block length of enclosed action</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionWith.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionWith.PopCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount"/>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.ActionWith.PushCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWith.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.ActionWith.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.BaseAction">
            <summary>
            BaseAction is an abstract class that serves as a base for  all Action 
            classes resembling swf bytecode instructions
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.Actions.BaseAction.Code">
            <summary>
            Action code of the class when compiled to swf
            Action codes are enumerated in <see cref="T:SwfDotNet.IO.ByteCode.ActionCode"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.#ctor(SwfDotNet.IO.ByteCode.ActionCode)">
            <summary>
            public constructor
            </summary>
            <param name="c">action code as occuring in swf. Codes are listed in this <see cref="T:SwfDotNet.IO.ByteCode.ActionCode">enumeration</see></param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount">
            <summary>
            byte count, calculated during compilation for <seealso cref="T:SwfDotNet.IO.ByteCode.Actions.MultiByteAction">multibyte actions</seealso>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PushCount">
            <summary>
            values pushed on stack by the operation associated with this action
            during swf runtime
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.PopCount">
            <summary>
            values popped from stack by the operation associated with this action
            during swf runtime
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)">
            <summary>
            compile action to byte code
            </summary>
            <param name="writer">
            Binary writer for writing byte code to stream
            </param>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.DummyAction">
            <summary>
            'null' instruction
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.DummyAction.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.DummyAction.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.IJump">
            <summary>
            interface for branch action
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.IJump.Offset">
            <summary>
            branch offset
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.IJump.LabelId">
            <summary>
            label id
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.InvalidPushTypeException">
            <summary>
            invalid push type exception
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.InvalidPushTypeException.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.MultiByteAction">
            <summary>base class for multibyte actions (>0x80)</summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.MultiByteAction.#ctor(SwfDotNet.IO.ByteCode.ActionCode)">
            <summary>
            constructor
            </summary>
            <param name="c">action code as occuring in swf. Codes are listed in this <see cref="T:SwfDotNet.IO.ByteCode.ActionCode">enumeration</see></param>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.MultiByteAction.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Actions.UnknownAction">
            <summary>
            object for storing unknown actions
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.UnknownAction.#ctor(System.Byte,System.Byte[])">
            <summary>
            constructor
            </summary>
            <param name="code">action code</param>
            <param name="bytes">additional bytecode</param>
        </member>
        <member name="P:SwfDotNet.IO.ByteCode.Actions.UnknownAction.ByteCount">
            <see cref="P:SwfDotNet.IO.ByteCode.Actions.BaseAction.ByteCount"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.UnknownAction.Compile(System.IO.BinaryWriter)">
            <see cref="M:SwfDotNet.IO.ByteCode.Actions.BaseAction.Compile(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Actions.UnknownAction.ToString">
            <summary>overriden ToString method</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.CodeTraverser">
            <summary>
            The CodeTraverser provides a simple functionality for traversing Action lists
            by stepping through action lists and following branches. In opposite to <see cref="T:SwfDotNet.IO.ByteCode.CodeWalker"/>
            each index is only visited once. Action objects are handled by the IActionExaminer
            that is passed to the Traverse method.
            CodeTraverser provides a unified base functionality for code-flow analysis.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.ByteCode.CodeTraverser.actionRec">
            <summary>
            ArrayList of action objects derived from <see cref="T:SwfDotNet.IO.ByteCode.Actions.BaseAction"/>.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.CodeTraverser.Traverse(SwfDotNet.IO.ByteCode.IActionExaminer)">
            <summary>
            Start traversing.
            </summary>
            <param name="examiner">IActionExaminer object</param>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.CodeTraverser.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="actions">ArrayList of action objects derived from BaseAction.</param>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.CodeWalker">
            <summary>
            The CodeWalker provides a simple functionality for traversing Action lists
            by stepping through code and following branches. In opposite to <see cref="T:SwfDotNet.IO.ByteCode.CodeTraverser"/>
            it doesn´t stop until a label is reached that has been visited before or a return
            statement is found. Action objects are handled by the IActionExaminerer that is passed to 
            the Traverse method.
            CodeWalker provide a base functionality for code analysis and simulation.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.CodeWalker.Walk(SwfDotNet.IO.ByteCode.IActionExaminer,System.Int32)">
            <summary>
            Start traversing at given index.
            </summary>
            <param name="examiner">IActionExaminer object</param>
            <param name="index">start index for code traversation.</param>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.CodeWalker.Walk(SwfDotNet.IO.ByteCode.IActionExaminer)">
            <summary>
            Start traversing code flow at index 0.
            </summary>
            <param name="examiner">IActionExaminer object</param>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.CodeWalker.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor.
            </summary>
            <param name="actions">ArrayList of BaseAction objects.</param>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Compiler">
            <summary>
             Compiler class, exposes one public method: <see cref="M:SwfDotNet.IO.ByteCode.Compiler.Compile(System.Collections.ArrayList)"/>.
             </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Compiler.CollapsPushActions(System.Collections.ArrayList)">
            <summary>
            Collaps sequence of single push actions into one multiple-push action
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Compiler.JumpPos">
            <summary>
             Inner struct for storing branch data.
             </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Compiler.CalcBranchOffsets(System.Collections.ArrayList)">
            <summary>
             Calculate branch offsets.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Compiler.CalcBlockOffsets(System.Collections.ArrayList)">
            <summary>
             Calculate size or offset for action blocks.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Compiler.Compile(System.Collections.ArrayList)">
            <summary>
             Compile list of Action objects to byte code.
            </summary>
             <param name="actionRecord">List of <see cref="T:SwfDotNet.IO.ByteCode.Actions.BaseAction">action objects</see></param>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Compiler.#ctor">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.Decompiler">
            <summary>
             Decompiler class. Compiles swf byte code to list 
             of <see cref="T:SwfDotNet.IO.ByteCode.Actions.BaseAction">action objects</see>.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionIf(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionIf">if</see> action from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionJump(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionJump">jump</see> action from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionConstantPool(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionConstantPool">constant pool</see> action from swf. the constant pool is not parsed.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionStoreRegister(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionStoreRegister">store register</see> action from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionPush(System.IO.BinaryReader)">
            <summary>
            Read multiply push action action as <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionPushList">ActionPushList</see> from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionDefineFunction(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionPushList">ActionDefineFunction</see> from swf. 
            including inner actions
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionDefineFunction2(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionPushList">ActionDefineFunction2</see> from swf.
            including inner actions
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionSetTarget(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionSetTarget">ActionSetTarget</see> from swf.
            </summary>		
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionGotoFrame(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame">ActionGotoFrame</see> from swf.
            </summary>		
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionGotoFrame2(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionGotoFrame2">ActionGotoFrame2</see> from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionGotoLabel(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionGotoLabel">ActionGotoLabel</see> from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionGetUrl(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl">ActionGetUrl</see> from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionGetUrl2(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionGetUrl2">ActionGetUrl2</see> from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionWaitForFrame(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame">ActionWaitForFrame</see> from swf.
            </summary>		
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionWaitForFrame2(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionWaitForFrame2">ActionWaitForFrame2</see> from swf.
            </summary>		
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionWith(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionWith">ActionWith</see> from swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActionTry(System.IO.BinaryReader)">
            <summary>
            Read try/catch block from swf and create corresponding
            <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionTry">ActionTry</see>,
            <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionCatch">ActionCatch</see>,
            <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionFinally">ActionFinally</see>,
            <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionEndTryBlock">ActionEndTryBlock</see>
            actions.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadUnknownAction(System.Byte,System.IO.BinaryReader)">
            <summary>
            Read unknown instruction as <see cref="T:SwfDotNet.IO.ByteCode.Actions.UnknownAction">UnknownAction</see> object
            </summary>		
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadAction(System.IO.BinaryReader)">
            <summary>
            Read actions according to action code in swf
            </summary>		
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ReadActions(System.Byte[])">
            <summary>
            Read bytecode actions from swf 
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.ExplodePushLists(System.Collections.ArrayList)">
            <summary>
            convert <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionPushList">push list</see> to sequence of single <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionPush" >push</see> actions
            </summary>		
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.CreateBranchLabels(System.Collections.ArrayList)">
            <summary>
            create <see cref="T:SwfDotNet.IO.ByteCode.Actions.ActionLabel">ActionLabel</see> pseudo actions for branch labels
            </summary>		
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.CreatePseudoActions(System.Collections.ArrayList)">
            <summary>
            create other pseudo actions
            </summary>	
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.Decompile(System.Byte[])">
            <summary>
            decompile byte code to action objects
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.Decompiler.#ctor(System.Int32)">
            <summary>
            constructor.
            </summary>
            <param name="version">swf Version</param>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.IActionExaminer">
            <summary>Interface for visitor-like objects passed to <see cref="T:SwfDotNet.IO.ByteCode.CodeTraverser"/>
            or <see cref="T:SwfDotNet.IO.ByteCode.CodeWalker"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.IActionExaminer.Examine(System.Int32,SwfDotNet.IO.ByteCode.Actions.BaseAction)">
            <summary>Invoked by traverser for each visited action.
            Examine action object found at given index.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.IActionExaminer.Clone">
            <summary>Clone IActionExaminer object. Necessary for handling branches.</summary>
        </member>
        <member name="T:SwfDotNet.IO.ByteCode.InvocationExaminer">
            <summary>
            The InvocationExaminer class analyses method/function calls and object
            initializations to find out how many values get pushed on or popped from stack.
            It is passed to an instance of CodeTraverser by the decompiler.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.InvocationExaminer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.InvocationExaminer.Clone">
            <summary>
            Clone method, necessary for handling branches.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.InvocationExaminer.#ctor(System.Collections.Stack)">
            <summary>
            Private constructor, used by Clone method.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ByteCode.InvocationExaminer.Examine(System.Int32,SwfDotNet.IO.ByteCode.Actions.BaseAction)">
            <summary>
            Examine byte code action at index in action record.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Component">
            <summary>
            Component.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Component.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Component"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Component.Swf">
            <summary>
            Gets or sets the SWF.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Component.SwfFileName">
            <summary>
            Gets or sets the name of the SWF file.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Component.Catalog">
            <summary>
            Gets or sets the catalog.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Component.CatalogFileName">
            <summary>
            Gets or sets the name of the catalog file.
            </summary>
            <value></value>
        </member>
        <member name="T:SwfDotNet.IO.ComponentCollection">
            <summary>
            ComponentCollection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.Clear">
            <summary>
            Clear collection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.Add(SwfDotNet.IO.Component)">
            <summary>
            Add a base tag
            </summary>
            <param name="value">base tag to add</param>
            <returns>base tag added</returns>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.AddRange(SwfDotNet.IO.Component[])">
            <summary>
            Add an array of component
            </summary>
            <param name="values">swf array</param>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.Remove(SwfDotNet.IO.Component)">
            <summary>
            Remove a component
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.Insert(System.Int32,SwfDotNet.IO.Component)">
            <summary>
            Insert a component at
            </summary>
            <param name="index">index</param>
            <param name="value">swf</param>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.Contains(SwfDotNet.IO.Component)">
            <summary>
            Test if list contain a component
            </summary>
            <param name="value">component</param>
            <returns>contain result</returns>
        </member>
        <member name="P:SwfDotNet.IO.ComponentCollection.Item(System.Int32)">
            <summary>
            Access component list by index
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.IndexOf(SwfDotNet.IO.Component)">
            <summary>
            Get index of a component
            </summary>
            <param name="value">component</param>
            <returns>swf index if is contain, -1 else.</returns>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.GetLastOne">
            <summary>
            Gets the last component of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.ComponentCollection.ToArray">
            <summary>
            Convert collection to array
            </summary>
            <returns>component array</returns>
        </member>
        <member name="T:SwfDotNet.IO.Dictionary">
            <summary>
            Dictionary class.
            The dictionary is a repository of tags 
            associated with unique character ID.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Dictionary.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Dictionary"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Dictionary.Add(SwfDotNet.IO.Tags.DefineTag)">
            <summary>
            Adds the specified define tag.
            </summary>
            <param name="defineTag">Define tag.</param>
        </member>
        <member name="M:SwfDotNet.IO.Dictionary.Add(System.UInt16,SwfDotNet.IO.Tags.DefineTag)">
            <summary>
            Adds the specified character id.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="defineTag">Define tag.</param>
        </member>
        <member name="M:SwfDotNet.IO.Dictionary.Remove(SwfDotNet.IO.Tags.DefineTag)">
            <summary>
            Removes the specified define tag.
            </summary>
            <param name="defineTag">Define tag.</param>
        </member>
        <member name="M:SwfDotNet.IO.Dictionary.Remove(System.UInt16)">
            <summary>
            Removes the specified character id.
            </summary>
            <param name="characterId">Character id.</param>
        </member>
        <member name="P:SwfDotNet.IO.Dictionary.Item(System.UInt16)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.DefineTag"/> with the specified character id.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Exceptions.DataWriteOverflowException">
            <summary>
            Data write overflow exception
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Exceptions.DataWriteOverflowException.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Exceptions.DataWriteOverflowException"/> instance.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Exceptions.InvalidImageFormatException">
            <summary>
            Invalid image format exception
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Exceptions.InvalidImageFormatException.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Exceptions.InvalidImageFormatException"/> instance.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Exceptions.InvalidPixelFormatException">
            <summary>
            Invalid pixel format exception
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Exceptions.InvalidPixelFormatException.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Exceptions.InvalidPixelFormatException"/> instance.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Exceptions.InvalidSwfVersionException">
            <summary>
            Invalid Swf version exception
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Exceptions.InvalidSwfVersionException.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Exceptions.InvalidSwfVersionException"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Exceptions.InvalidSwfVersionException.#ctor(System.Byte,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Exceptions.InvalidSwfVersionException"/> instance.
            </summary>
            <param name="version">Version.</param>
            <param name="maxSupported">Max supported.</param>
        </member>
        <member name="T:SwfDotNet.IO.Exceptions.InvalidTagLengthException">
            <summary>
            Invalid tag length exception
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Exceptions.InvalidTagLengthException.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Exceptions.InvalidTagLengthException"/> instance.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Exceptions.UnavailableFontException">
            <summary>
            Unavailable font exception
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Exceptions.UnavailableFontException.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Exceptions.UnavailableFontException"/> instance.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Flv">
            <summary>
            Flv.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Flv.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Flv"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Flv.#ctor(SwfDotNet.IO.FlvHeader)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Flv"/> instance.
            </summary>
            <param name="header">Header.</param>
        </member>
        <member name="M:SwfDotNet.IO.Flv.#ctor(SwfDotNet.IO.FlvHeader,SwfDotNet.IO.Tags.FlvBaseTagCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Flv"/> instance.
            </summary>
            <param name="header">Header.</param>
            <param name="flvTags">FLV tags.</param>
        </member>
        <member name="P:SwfDotNet.IO.Flv.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Flv.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value></value>
        </member>
        <member name="T:SwfDotNet.IO.FlvHeader">
            <summary>
            FlvHeader.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.FlvHeader.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.FlvHeader"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.FlvHeader.HasVideo">
            <summary>
            Gets or sets a value indicating whether this instance has video.
            </summary>
            <value>
            	<c>true</c> if this instance has video; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.FlvHeader.HasAudio">
            <summary>
            Gets or sets a value indicating whether this instance has audio.
            </summary>
            <value>
            	<c>true</c> if this instance has audio; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.FlvHeader.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.FlvHeader.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.FlvHeader.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="reader">Reader.</param>
        </member>
        <member name="T:SwfDotNet.IO.FlvReader">
            <summary>
            FlvReader.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.FlvReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.FlvReader"/> instance.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:SwfDotNet.IO.FlvReader.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.FlvReader"/> instance.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:SwfDotNet.IO.FlvReader.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.SwfReader"/> instance.
            If useBuffer is true, all the content of 
            the FLV file is readed first and is parsed from the memory
            after. If useBuffer is false, the FLV is parsed directly from
            the file stream. Use a buffer is faster to parse, but use
            more memory.
            </summary>
            <param name="path">String path of the local flv file</param>
            <param name="useBuffer">Use buffer.</param>
        </member>
        <member name="M:SwfDotNet.IO.FlvReader.Init(System.String,System.Boolean)">
            <summary>
            Inits the stream reading process.
            </summary>
            <param name="path">Path.</param>
            <param name="useBuffer">Use buffer.</param>
        </member>
        <member name="M:SwfDotNet.IO.FlvReader.ReadFlv">
            <summary>
            Reads the FLV.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.FlvReader.ReadTag">
            <summary>
            Reads the tag.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.FlvWriter">
            <summary>
            FlvWriter.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.FlvWriter.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.FlvWriter"/> instance.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SwfDotNet.IO.FlvWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.FlvWriter"/> instance.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="T:SwfDotNet.IO.Swc">
            <summary>
            Swc class.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Swc.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Swc"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Swc.Components">
            <summary>
            Gets or sets the components.
            </summary>
            <value></value>
        </member>
        <member name="T:SwfDotNet.IO.SwcReader">
            <summary>
            SwcReader
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwcReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.SwcReader"/> instance.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:SwfDotNet.IO.SwcReader.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.SwcReader"/> instance.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SwfDotNet.IO.SwcReader.ReadSwc">
            <summary>
            Reads the SWC.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.SwcWriter">
            <summary>
            SwcWriter.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwcWriter.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.SwcWriter"/> instance.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Swf">
            <summary>
            The Swf class is basically a data structure for swf data, 
            containing header informations and a collection of swf tags.
            </summary>
            <remarks>
            
            </remarks>
            <example>
            <p>
            Follow this example to create a new Swf objet :
            <code lang="C#">
            // Create a new swf
            Swf swf = new Swf();
            swf.Size = new Rect(0, 0, 400 * 20, 400 * 20); // Size in twips
            swf.Version = 7; // You can specify the swf version
            swf.Add(new ShowFrameTag());
            
            // Save it in a file
            SwfWriter swfWriter = new SwfWriter("myfile.swf");
            swfWriter.Write(swf);
            swfWriter.Close();
            </code>
            </p>
            </example>
        </member>
        <member name="F:SwfDotNet.IO.Swf.tagList">
            <summary>
            An array that contains BaseTag objects.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Swf._actionCount">
            <summary>
            The total number of bytecode blocks within all tags.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Swf.header">
            <summary>
            Swf header.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Swf.dictionnary">
            <summary>
            Swf define tags dictionnary
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Swf.MIME_TYPE">
            <summary>
            Flash movie mime-type
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Swf.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Swf"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Swf.#ctor(SwfDotNet.IO.SwfHeader)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Swf"/> instance.
            </summary>
            <param name="header">Header.</param>
        </member>
        <member name="M:SwfDotNet.IO.Swf.#ctor(SwfDotNet.IO.SwfHeader,SwfDotNet.IO.Tags.BaseTagCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Swf"/> instance.
            </summary>
            <param name="header">Swf Header.</param>
            <param name="tagList">Swf Tag list sequence.</param>
        </member>
        <member name="M:SwfDotNet.IO.Swf.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Swf.Tags">
            <summary>
            Gets the tags.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Swf.Size">
            <summary>
            Gets or sets the size.
            This property is the same as swf.Header.Size, 
            used only to simplify the writing process.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Swf.Version">
            <summary>
            Swf version property.
            This property is the same as swf.Header.Version, 
            used only to simplify the writing process.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Swf.Dictionary">
            <summary>
            Gets the dictionary.
            The dictionary contains all the
            <see cref="T:SwfDotNet.IO.Tags.DefineTag">DefineTag</see>
            extended tags.
            More over, all the define tags are placed into the
            main movie clip. 
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Swf.ByteCount">
            <summary>
            Uncompressed swf byte count.
            This value is good only if the method
            UpdateData has been called before.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Swf.ActionCount">
            <summary>
            Accessor for total count of swf bytecode blocks.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Swf.Header">
            <summary>
            Accessor for swf header.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Swf.InjectTags(SwfDotNet.IO.Tags.BaseTagCollection)">
            <summary>
            Injects a range of tags in the current Swf.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Swf.GetNewDefineId">
            <summary>
            Gets a new define character id.
            Each Define type tag must have an unique
            character Id. Use this method to get a new Id
            that is not used for the moment.  
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Swf.Add(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            Adds the specified tag to the Swf tag collection.
            This methods is the same as swf.Tags.Add method, used
            only to simplify the writing process.
            </summary>
            <param name="tag">Tag.</param>
        </member>
        <member name="M:SwfDotNet.IO.Swf.UpdateData">
            <summary>
            Re-calc swf binary data.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Swf.tagList_TagAdded(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            A new tag was added to the tag collection
            </summary>
            <param name="tagAdded">Tag added.</param>
        </member>
        <member name="M:SwfDotNet.IO.Swf.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the swf object in a
            XmlWriter.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.SwfCollection">
            <summary>
            SwfCollection is a typed collection of Swf objects.
            </summary>
            <remarks>
            This class is not used by other classes of the
            SwfDotNet.IO package, but be usefull.
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.Clear">
            <summary>
            Clear collection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.Add(SwfDotNet.IO.Swf)">
            <summary>
            Add a base tag
            </summary>
            <param name="value">base tag to add</param>
            <returns>base tag added</returns>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.AddRange(SwfDotNet.IO.Swf[])">
            <summary>
            Add an array of swf
            </summary>
            <param name="values">swf array</param>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.Remove(SwfDotNet.IO.Swf)">
            <summary>
            Remove a swf
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.Insert(System.Int32,SwfDotNet.IO.Swf)">
            <summary>
            Insert a swf at
            </summary>
            <param name="index">index</param>
            <param name="value">swf</param>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.Contains(SwfDotNet.IO.Swf)">
            <summary>
            Test if list contain a swf
            </summary>
            <param name="value">swf</param>
            <returns>contain result</returns>
        </member>
        <member name="P:SwfDotNet.IO.SwfCollection.Item(System.Int32)">
            <summary>
            Access swf list by index
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.IndexOf(SwfDotNet.IO.Swf)">
            <summary>
            Get index of a swf
            </summary>
            <param name="value">swf</param>
            <returns>swf index if is contain, -1 else.</returns>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.GetLastOne">
            <summary>
            Gets the last swf of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.SwfCollection.ToArray">
            <summary>
            Convert collection to array
            </summary>
            <returns>swf array</returns>
        </member>
        <member name="T:SwfDotNet.IO.SwfHeader">
            <summary>
            Swf file header object contains main informations
            about the animation. 
            </summary>
            <remarks>
            <p>
            The header contains those informations:
            <ul>
            <li>File signature, to indicate of the file is compressed or not</li>
            <li>Swf version (1 to 7)</li>
            <li>Lenght of entire file in bytes</li>
            <li>Frame size in twips</li>
            <li>Frame delay in 8.8 fixed number of frame per second</li>
            <li>Total number of frames in the movie</li>
            </ul>
            </p>
            </remarks>
        </member>
        <member name="F:SwfDotNet.IO.SwfHeader.MAX_VERSION">
            <summary>
            Maximum swf version supported
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.SwfHeader.signature">
            <summary>
            Signature property ('FWS' or 'CWS').
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.SwfHeader.version">
            <summary>
            Private Version.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.SwfHeader.fileSize">
            <summary>
            Private FileSize.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.SwfHeader.rect">
            <summary>
            Private rect containing swf dimensions.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.SwfHeader.fps">
            <summary>
            Private frames per second.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.SwfHeader.frames">
            <summary>
            Private total number of frames.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfHeader.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfHeader.#ctor(System.String,System.Byte,System.UInt32,SwfDotNet.IO.Tags.Types.Rect,System.Single,System.UInt16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.SwfHeader"/> instance.
            </summary>
            <param name="signature">Signature.</param>
            <param name="version">Version.</param>
            <param name="fileSize">Size of the file.</param>
            <param name="dimensions">Dimensions.</param>
            <param name="fps">FPS.</param>
            <param name="frames">Frames.</param>
        </member>
        <member name="P:SwfDotNet.IO.SwfHeader.Signature">
            <summary>
            Get signature as string.
            "FWS" for not compress files.
            "CWS" for compressed file.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.SwfHeader.Frames">
            <summary>
            Gets or sets the frames count.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.SwfHeader.Fps">
            <summary>
            Gets or sets the FPS (frames per second)
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.SwfHeader.Size">
            <summary>
            Gets or sets the swf dimensions bound.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.SwfHeader.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.SwfHeader.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.SwfHeader.FileSize">
            <summary>
            Gets or sets the size of the file.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.SwfHeader.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfHeader.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary file
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.SwfHeader.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.SwfReader">
            <summary>
            The SwfReader class reads and parses a swf file from a stream. 
            </summary>
            <remarks>
            <p>
            The SwfReader creates a <see cref="T:SwfDotNet.IO.Swf"/> object, that is a sequence
            of tags readed from a swf binary file. The tag sequences follows the
            Swf version 7 format specifications from Macromedia, and is compatible
            with Swf version 1 to 7.
            </p>
            <p>
            The working process of the tags sequence is explain in the Macromedia
            specifications. The tags sequence is composed of objects from the
            <see cref="N:SwfDotNet.IO.Tags"/> namespace.
            </p>
            <p>
            SwfReader gets all the content of a file and provides some functionnalities
            to decompile bitmap, sounds, video or scripting bytecode.
            </p>
            <p>
            The tag reading process doesnt decompile actionscript bytecode, though. This is 
            handled by <see cref="T:SwfDotNet.IO.ByteCode.Decompiler"/>. The action script 
            tags contain directly actionscript bytecodes as a byte array. The
            <see cref="T:SwfDotNet.IO.ByteCode.Decompiler"/> object provides the way to
            get actionscript command as objects of the <see cref="N:SwfDotNet.IO.ByteCode"/> namespace.
            </p>
            </remarks>
            <example>
            <p>
            <u>Read a swf file from a file, and display headers.</u>
            <code lang="C#">
            SwfReader swfReader = new SwfReader("myfile.swf");
            Swf swf = swfReader.ReadSwf();
            Console.WriteLine(swf.Version);
            swfReader.Close();
            </code>
            </p>
            </example>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.#ctor(System.IO.Stream)">
            <summary>
            Swf Reader class, takes an input stream as single argument.
            </summary>
            <param name="stream">Stream to read swf from, must allow random access</param>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.SwfReader"/> instance.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.SwfReader"/> instance.
            If useBuffer is true, all the content of 
            the SWF file is readed first and is parsed from the memory
            after. If useBuffer is false, the SWF is parsed directly from
            the file stream. Use a buffer is faster to parse, but use
            more memory.
            </summary>
            <param name="path">String path of the local swf file</param>
            <param name="useBuffer">Use buffer.</param>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.Init(System.String,System.Boolean)">
            <summary>
            Inits the stream reading process.
            </summary>
            <param name="path">Path.</param>
            <param name="useBuffer">Use buffer.</param>
        </member>
        <member name="P:SwfDotNet.IO.SwfReader.Version">
            <summary>
            Read only property; returns Flash version of the read swf.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.Close">
            <summary>
            Closes this stream reader.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.ReadSwf">
            <summary>
            Read swf (header and tags), this is the only 
            public method of <see cref="T:SwfDotNet.IO.SwfReader">SwfReader</see>
            with <see cref="M:SwfDotNet.IO.SwfReader.Close">Close</see> and
            <see cref="M:SwfDotNet.IO.SwfReader.ReadSwfHeader">ReadSwfHeader</see> methods.
            The returned <see cref="T:SwfDotNet.IO.Swf">Swf</see> object contains swf headers informations and the
            tags list.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.ReadSwfHeader">
            <summary>
            Reads the SWF header only.
            This method don't read the complete content of the 
            SWF file. Then, it provides the possibility to
            get faster header informations, and only it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.Inflate">
            <summary>
            Inflate compressed swf
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.ReadTag(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.BaseTagCollection)">
            <summary>
            Read next tag from swf input stream.
            </summary>
            <param name="version">Version.</param>
            <param name="binaryReader">Binary reader.</param>
            <param name="tagList">Tag list.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.SwfReader.ReadVideoFrameTag(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.BaseTagCollection)">
            <summary>
            Read and parse VideoFrameTag, into inner tags and raw byte-array header data
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.SwfWriter">
            <summary>
            SwfWriter provides the way to write a Swf to a file or
            a stream.
            </summary>
            <remarks>
            This class writes an swf to a stream using the Write method.
            Headers and the tags list of the swf are compiled as
            bytecode and writed in the stream.
            </remarks>
            <example>
            <p>
            <u>Create a Swf animation and write it in a file</u>
            <code lang="C#">
            Swf swf = new Swf();
            swf.Tags.Add(new SetBackgroundColorTag(255, 0, 0)); //Define background as blue
            swf.Tags.Add(new ShowFrameTag());
            
            SwfWriter writer = new SwfWriter("myfile.swf");
            writer.Write(swf);
            writer.Close();
            
            </code>
            </p>
            </example>
        </member>
        <member name="F:SwfDotNet.IO.SwfWriter.baseStream">
            <summary>
            BaseStream where swf gets written to using Write(..)
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.SwfWriter.fileName">
            <summary>
            Private file name member
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfWriter.#ctor(System.IO.Stream)">
            <summary>
            constructor.
            </summary>
            <param name ="stream">Stream, the swf shall be written to.</param>
        </member>
        <member name="M:SwfDotNet.IO.SwfWriter.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.SwfWriter"/> instance.
            </summary>
            <param name="fileName">Name of the file where the swf shall be written to</param>
        </member>
        <member name="M:SwfDotNet.IO.SwfWriter.Close">
            <summary>
            Closes the opened writted stream
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.SwfWriter.Write(SwfDotNet.IO.Swf)">
            <summary>
            Writes the (compressed or uncompressed) swf data to a stream.
            The stream gets flushed and closed afterwards.
            </summary>
            <param name="swf">Swf</param>
        </member>
        <member name="P:SwfDotNet.IO.SwfWriter.Stream">
            <summary>
            Gets or sets the stream where the swf 
            shall be written to.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.SwfWriter.FileName">
            <summary>
            Gets or sets the name of the file where the swf 
            shall be written to.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.BaseTag">
            <summary>
            Base class for swf tag objects
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.BaseTag._data">
            <summary>
            raw tag data
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.BaseTag._tagCode">
            <summary>
            swf tag code
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.#ctor(System.Byte[])">
            <summary>
            constructor
            </summary>
            <param name="data">raw tag data</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.TagCode">
            <summary>
            swf tag code property
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.Data">
            <summary>
            raw tag data property
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.ActionRecCount">
            <summary>
            count of action records / raw bytecode blocks in tag
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.Item(System.Int32)">
            <summary>
            indexer for accessing bytecode blocks
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.Bytecode">
            <summary>
            alias for the bytecode block indexer
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.GetTagCode">
            <summary>
            swf tag code property
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.Resolve(SwfDotNet.IO.Swf)">
            <summary>
            Resolves the specified SWF.
            </summary>
            <param name="swf">SWF.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.UpdateData(System.Byte)">
            <summary>
            Rebuild tag data for swf compilation
            </summary>
            <param name="version">Version.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data for the swf decompilation.
            </summary>
            <param name="version">Version.</param>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:SwfDotNet.IO.Tags.ISwfSerializer.Serialize(System.Xml.XmlWriter)"/>
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.Add(System.Object)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.GetEnumerator">
            <summary>
            get swf bytecode block enumerator for foreach-loops
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.BaseTag.BytecodeHolder">
            <summary>
            inner class for bytecode block collection
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.BytecodeHolder.Item(System.Int32)">
            <summary>
            bytecode block indexer
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.BytecodeHolder.Count">
            <summary>
            bytecode count
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.BytecodeHolder.#ctor(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            constructor. internal, since only used by BaseTag class
            </summary>
            <param name="t">the BaseTag, who´s bytecode is being held</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.BaseTag.BytecodeEnumerator">
            <summary>
            inner class, swf bytecode block enumerator for 'foreach' loops
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.BytecodeEnumerator.#ctor(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            constructor. internal, since only used by BaseTag class
            </summary>
            <param name="tag">the BaseTag, who´s bytecode is being held</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.BytecodeEnumerator.Reset">
            <summary>
            satisfy IEnumerator interface
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTag.BytecodeEnumerator.MoveNext">
            <summary>
            satisfy IEnumerator interface
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.BytecodeEnumerator.Current">
            <summary>
            typed access to current object
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTag.BytecodeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            satisfy IEnumerator interface
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.TagAddedEvent">
            <summary>
            Tag added in the collection EventHandler
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.BaseTagCollection">
            <summary>
            Base Tag collection
            </summary>
        </member>
        <member name="E:SwfDotNet.IO.Tags.BaseTagCollection.TagAdded">
            <summary>
            Tag added event
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.Clear">
            <summary>
            Clear collection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.Add(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            Add a base tag
            </summary>
            <param name="value">base tag to add</param>
            <returns>base tag added</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.AddRange(SwfDotNet.IO.Tags.BaseTagCollection)">
            <summary>
            Adds the range.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.AddRange(SwfDotNet.IO.Tags.BaseTag[])">
            <summary>
            Add an array of base tag
            </summary>
            <param name="values">base tag array</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.Remove(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            Remove a base tag
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.Insert(System.Int32,SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            Insert a base tag at
            </summary>
            <param name="index">index</param>
            <param name="value">base tag</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.Contains(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            Test if list contain a base tag
            </summary>
            <param name="value">base tag</param>
            <returns>contain result</returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.BaseTagCollection.Item(System.Int32)">
            <summary>
            Access base tag list by index
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.IndexOf(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            Get index of a base tag
            </summary>
            <param name="value">base tag</param>
            <returns>base tag index if is contain, -1 else.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.GetLastOne">
            <summary>
            Gets the last BaseTag of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.BaseTagCollection.ToArray">
            <summary>
            Convert collection to array
            </summary>
            <returns>Base tags array</returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineTargetTagContainer">
            <summary>
            DefineTargetTagContainer
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineTargetTagContainer.TargetTo(System.UInt16,System.Collections.Hashtable)">
            <summary>
            Targets to.
            </summary>
            <param name="characterId">The character id.</param>
            <param name="history">The history.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineTargetTagContainer.ChangedTarget(System.UInt16,System.UInt16,System.Collections.Hashtable)">
            <summary>
            Changeds the target.
            </summary>
            <param name="id">The id.</param>
            <param name="newId">The new id.</param>
            <param name="history">The history.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag">
            <summary>
            DefineBitsJpeg2Tag is used to define a JPEG encoded image 
            with an integrated encoding table.
            </summary>
            <remarks>
            <p>
            It extends the DefineBitsTag class by including a separate 
            encoding table, rather than using an JpegTable object 
            to store the encoding table. This allows multiple JPEG images 
            with different amounts of compression to be included within 
            a Flash file.
            </p>
            <p>
            This tag was introduced in Flash 2.
            </p>
            </remarks>
            <example>
            <p>
            <u>Transform jpeg to swf</u>
            <code lang="C#">
            
            </code>
            </p>
            </example>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.jpegData">
            <summary>
            The jpeg data bytes
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.characterId">
            <summary>
            The character Id
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.#ctor(System.UInt16,System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag"/> instance.
            </summary>
            <param name="id">Id.</param>
            <param name="image">Image.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.JpegData">
            <summary>
            Gets or sets the JPEG data.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.FromFile(System.UInt16,System.String)">
            <summary>
            Construct a new DefineBitsJpeg2Tag object 
            from a file.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.FromStream(System.UInt16,System.IO.Stream)">
            <summary>
            Construct a new DefineBitsJpeg2Tag object 
            from a stream.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="stream">Stream.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.FromImage(System.UInt16,System.Drawing.Image)">
            <summary>
            Construct a new DefineBitsJpeg2Tag object 
            from an image object.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="image">Image.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.DecompileToFile(System.String)">
            <summary>
            Decompiles to file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.DecompileToImage">
            <summary>
            Decompiles to image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg2Tag.DecompileToStream(System.IO.Stream)">
            <summary>
            Decompiles to stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag">
            <summary>
            DefineBitsJpeg3Tag is used to define a transparent 
            JPEG encoded image.
            </summary>
            <remarks>
            <p>
            It extends the DefineBitsJpeg2Tag class by including a 
            separate zlib compressed table of alpha channel values. 
            This allows the transparency of existing JPEG encoded 
            images to be changed without re-encoding the 
            original image.
            </p>
            <p>
            Although the encoding table defines how the image is 
            compressed it is not essential. If a DefineBitsJpeg3Tag 
            object is created with an empty encoding table then the 
            Flash Player will still display the JPEG image correctly. 
            The empty encoding table is not a null object. 
            It contains four bytes: 0xFF, 0xD9, 0xFF, 0xD8. 
            Note however that this is reversed from 
            StartOfImage (SOI, 0xFFD8) and EndOfImage (EOI, 0xFFD9) 
            tags defined in the JPEG file format specification. 
            This appears to be a bug in Flash. However the order is 
            preserved to ensure compatibility although code has been 
            tested with the normal order for the tags and the images 
            were displayed correctly.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.#ctor(System.UInt16,System.Byte[],System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag"/> instance.
            </summary>
            <param name="id">Id.</param>
            <param name="image">Image.</param>
            <param name="alpha">Alpha.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.AlphaData">
            <summary>
            alpha Data
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.FromFile(System.UInt16,System.String)">
            <summary>
            Construct a new DefineBitsJpeg3Tag object 
            from a file.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.FromStream(System.UInt16,System.IO.Stream)">
            <summary>
            Construct a new DefineBitsJpeg3Tag object 
            from a stream.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="stream">Stream.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.FromImage(System.UInt16,System.Drawing.Image)">
            <summary>
            Construct a new DefineBitsJpeg3Tag object 
            from an image object.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="image">Image.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.DecompileToFile(System.String)">
            <summary>
            Decompiles to file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.DecompileToImage">
            <summary>
            Decompiles to image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsJpeg3Tag.DecompileToStream(System.IO.Stream)">
            <summary>
            Decompiles to stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag">
            <summary>
            DefineBitsLossLess2Tag is used to define a transparent image compressed 
            using the lossless zlib compression algorithm.
            </summary>
            <remarks>
            <p>
            The class supports color-mapped images where the image data contains an 
            index into a color table or images where the image data specifies the color 
            directly. It extends FSDefineImage by including alpha channel information 
            for the color table and pixels in the image.
            </p>
            <p>
            For color-mapped images the color table contains up to 256, 32-bit colors. 
            The image contains one byte for each pixel which is an index into the table 
            to specify the color for that pixel. The color table and the image data are 
            compressed as a single block, with the color table placed before the image.
            </p>
            <p>
            For images where the color is specified directly, the image data contains 
            32 bit color values.
            </p>
            <p>
            The image data is stored in zlib compressed form within the object. For 
            color-mapped images the compressed data contains the color table followed 
            by the image data.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.#ctor(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag"/> instance.
            </summary>
            <param name="characterId">id for this character</param>
            <param name="bitmapFormat">Format of compressed data</param>
            <param name="bitmapWidth">Width of bitmap image</param>
            <param name="bitmapHeight">Height of bitmap image</param>
            <param name="bitmapColorTableSize">actual number of colors in the color table</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.#ctor(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.AlphaColorMapData)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag"/> instance.
            </summary>
            <param name="characterId">id for this character</param>
            <param name="bitmapFormat">Format of compressed data</param>
            <param name="bitmapWidth">Width of bitmap image</param>
            <param name="bitmapHeight">Height of bitmap image</param>
            <param name="bitmapColorTableSize">actual number of colors in the color table</param>
            <param name="zlibBitmapData">zlib compressed bitmap data</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.#ctor(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.AlphaBitmapData)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag"/> instance.
            </summary>
            <param name="characterId">id for this character</param>
            <param name="bitmapFormat">Format of compressed data</param>
            <param name="bitmapWidth">Width of bitmap image</param>
            <param name="bitmapHeight">Height of bitmap image</param>
            <param name="bitmapColorTableSize">actual number of colors in the color table</param>
            <param name="zlibBitmapData">zlib compressed bitmap data</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.BitmapFormat">
            <summary>
            Gets or sets the bitmap format.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.BitmapWidth">
            <summary>
            Gets or sets the width of the bitmap.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.BitmapHeight">
            <summary>
            Gets or sets the height of the bitmap.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.AlphaColorMapData">
            <summary>
            Gets or sets the alpha color map data.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.AlphaBitmapData">
            <summary>
            Gets or sets the alpha bitmap data.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.GetSizeOf(System.Int32)">
            <summary>
            Gets the size of.
            </summary>
            <param name="lengthOfCompressedData">Length of compressed data.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.FromFile(System.UInt16,System.String)">
            <summary>
            Construct a new DefineBitsLossLess2Tag object 
            from a file.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.FromStream(System.UInt16,System.IO.Stream)">
            <summary>
            Construct a new DefineBitsLossLess2Tag object 
            from a stream.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="stream">Stream.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.FromImage(System.UInt16,System.Drawing.Image)">
            <summary>
            Construct a new DefineBitsLossLess2Tag object 
            from an image object.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="image">Image.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.DecompileToFile(System.String)">
            <summary>
            Decompiles to file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.DecompileToImage">
            <summary>
            Decompiles to image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLess2Tag.DecompileToStream(System.IO.Stream)">
            <summary>
            Decompiles to stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineBitsLossLessTag">
            <summary>
            DefineBitsLossLessTag  is used to define an image compressed using the 
            lossless zlib compression algorithm. 
            </summary>
            <remarks>
            <p>
            The class supports color-mapped images where the image data contains
            an index into a color table or images where the image data specifies 
            the color directly.
            </p>
            <p>
            For color-mapped images the color table contains up to 256, 24-bit colors. 
            The image contains one byte for each pixel which is an index into the table 
            to specify the color for that pixel. The color table and the image data 
            are compressed as a single block, with the color table placed before the image.
            </p>
            <p>
            For images where the color is specified directly, the image data contains 
            either 16 or 24 bit color values. For 16-bit color values the most significant 
            bit is zero followed by three, 5-bit fields for the red, green and blue channels.
            </p>
            <p>
            Four bytes are used to represent 24-bit colors. The first byte is always set to 
            zero and the following bytes contain the color values for the red, green and 
            blue color channels.
            </p>
            <p>
            The number of bytes in each row of an image must be aligned to a 32-bit word 
            boundary. For example if an image if an icon is 25 pixels wide, then for an 8-bit 
            color mapped image an additional three bytes (0x00) must be used to pad each row; 
            for a 16-bit direct mapped color image an additional two bytes must be used as 
            padding.
            </p>
            <p>
            The image data is stored in zlib compressed form within the object. For 
            color-mapped images the compressed data contains the color table followed by the 
            image data. The color table is omitted for direct-mapped images.
            </p>
            <p>
            This tag was introduced in Flash 2.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsLossLessTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.#ctor(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte)">
            <summary>
            constructor.
            </summary>
            <param name="characterId">id for this character</param>
            <param name="bitmapFormat">Format of compressed data</param>
            <param name="bitmapWidth">Width of bitmap image</param>
            <param name="bitmapHeight">Height of bitmap image</param>
            <param name="bitmapColorTableSize">actual number of colors in the color table</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.#ctor(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte,SwfDotNet.IO.Tags.Types.ColorMapData)">
            <summary>
            constructor.
            </summary>
            <param name="characterId">id for this character</param>
            <param name="bitmapFormat">Format of compressed data</param>
            <param name="bitmapWidth">Width of bitmap image</param>
            <param name="bitmapHeight">Height of bitmap image</param>
            <param name="bitmapColorTableSize">actual number of colors in the color table</param>
            <param name="zlibBitmapData">zlib compressed bitmap data</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.#ctor(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte,SwfDotNet.IO.Tags.Types.BitmapColorData)">
            <summary>
            constructor.
            </summary>
            <param name="characterId">id for this character</param>
            <param name="bitmapFormat">Format of compressed data</param>
            <param name="bitmapWidth">Width of bitmap image</param>
            <param name="bitmapHeight">Height of bitmap image</param>
            <param name="bitmapColorTableSize">actual number of colors in the color table</param>
            <param name="zlibBitmapData">zlib compressed bitmap data</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLessTag.BitmapFormat">
            <summary>
            Gets or sets the bitmap format.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLessTag.ColorMapData">
            <summary>
            Gets or sets the color map data.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLessTag.BitmapData">
            <summary>
            Gets or sets the bitmap data.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLessTag.BitmapWidth">
            <summary>
            Gets or sets the width of the bitmap.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLessTag.BitmapHeight">
            <summary>
            Gets or sets the height of the bitmap.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsLossLessTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.GetSizeOf(System.Int32)">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.FromFile(System.UInt16,System.String)">
            <summary>
            Construct a new DefineBitsLossLessTag object 
            from a file.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.FromStream(System.UInt16,System.IO.Stream)">
            <summary>
            Construct a new DefineBitsLossLessTag object 
            from a stream.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="stream">Stream.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.FromImage(System.UInt16,System.Drawing.Image)">
            <summary>
            Construct a new DefineBitsLossLessTag object 
            from an image object.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="image">Image.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.DecompileToFile(System.String)">
            <summary>
            Decompiles to file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.DecompileToImage">
            <summary>
            Decompiles to image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsLossLessTag.DecompileToStream(System.IO.Stream)">
            <summary>
            Decompiles to stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineBitsTag">
            <summary>
            DefineBits tag for Jpeg images in swf
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsTag.#ctor(System.UInt16,System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineBitsTag"/> instance.
            </summary>
            <param name="id">Id.</param>
            <param name="image">Image.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsTag.JpegData">
            <summary>
            JPEG Data
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineBitsTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsTag.FromFile(System.UInt16,System.String)">
            <summary>
            Construct a new DefineBitsJpeg2Tag object 
            from a file.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsTag.FromStream(System.UInt16,System.IO.Stream)">
            <summary>
            Construct a new DefineBitsJpeg2Tag object 
            from a stream.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="stream">Stream.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineBitsTag.FromImage(System.UInt16,System.Drawing.Image)">
            <summary>
            Construct a new DefineBitsJpeg2Tag object 
            from an image object.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="image">Image.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineButton2Tag">
            <summary>
            DefineButton2Tag defines the appearance and actions 
            of push and menu buttons.
            </summary>
            <remarks>
            <p>
            It provides a more sophisticated model for creating buttons:
            <ul>
            <li>Two types of button are supported, <B>Push</B> and <B>Menu</B>.</li>
            <li>The number of events that a button can respond to is increased.</li>
            <li>Actions can be executed for any button event.</li>
            </ul>
            </p>
            <p>
            Push and Menu buttons behave slightly differently in tracking 
            mouse movements when the button is clicked. A Push button 'captures' 
            the mouse so if the cursor is dragged outside of the active 
            area of the button and the mouse click is released then the 
            Release Outside event is still sent to the button. A Menu button 
            does not 'capture' the mouse so if the cursor is dragged out of 
            the active area the button returns to its 'inactive' state.
            </p>
            <p>
            A DefineButton2Tag object must contain at least one ButtonRecord object. 
            If more than one button record is defined for a given button state then 
            each shape will be displayed by the button. The order in which the shapes 
            are displayed is determined by the layer assigned to each button record.
            </p>
            <p>
            Each ButtonRecord object can contain an CXFormWithAlphaData object which 
            can be used to change the color of the shape being displayed without 
            changing the original definition.
            </p>
            <p>
            Actions do not need to be specified for every button event. Indeed 
            actions do not need to be specified at all.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButton2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineButton2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButton2Tag.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButton2Tag.Characters">
            <summary>
            Gets the characters.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButton2Tag.TrackAsMenu">
            <summary>
            Gets or sets a value indicating whether [track as menu].
            </summary>
            <value>
            	<c>true</c> if [track as menu]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButton2Tag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButton2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButton2Tag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButton2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButton2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineButtonCxFormTag">
            <summary>
            DefineButtonCxFormTag defines the colour transform that is applied to 
            each shape that is used to draw a button.
            </summary>
            <remarks>
            <p>
            This class is only used in conjunction with DefineButtonTag. 
            DefineButton2Tag allows colour transforms to be specified in the ButtonRecord 
            object that identifies each shape that is displayed for a given button state.
            </p>
            <p>
            This tag was introduced in Flash 2.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonCxFormTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineButtonCxFormTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonCxFormTag.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.CXForm)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineButtonCxFormTag"/> instance.
            </summary>
            <param name="buttonId">Button id.</param>
            <param name="buttonColorTransform">Button color transform.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonCxFormTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonCxFormTag.ButtonColorTransform">
            <summary>
            Gets or sets the button color transform.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonCxFormTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonCxFormTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonCxFormTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonCxFormTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineButtonSoundTag">
            <summary>
            DefineButtonSoundTag defines the sounds that are played when an 
            event occurs in a button.
            </summary>
            <remarks>
            <p>
            A sound is played for only a subset of the events that a button 
            responds to:
            <ul>
            <li>RollOver: The cursor enters the active area of the button.</li>
            <li>RollOut: The cursor exits the active area of the button.</li>
            <li>Press: The mouse button is clicked and the cursor is inside the 
            active area of the button.</li>
            <li>Release: The mouse button is released while the cursor is inside 
            the active area of the button.</li>
            </ul>
            </p>
            <p>
            This tag was introduced in Flash 2.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonSoundTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineButtonSoundTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonSoundTag.#ctor(System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.SoundInfo,System.UInt16,SwfDotNet.IO.Tags.Types.SoundInfo,System.UInt16,SwfDotNet.IO.Tags.Types.SoundInfo,System.UInt16,SwfDotNet.IO.Tags.Types.SoundInfo)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineButtonSoundTag"/> instance.
            </summary>
            <param name="buttonId">Button id.</param>
            <param name="buttonSoundChar">Button sound char.</param>
            <param name="buttonSoundInfo">Button sound info.</param>
            <param name="buttonSoundChar1">Button sound char1.</param>
            <param name="buttonSoundInfo1">Button sound info1.</param>
            <param name="buttonSoundChar2">Button sound char2.</param>
            <param name="buttonSoundInfo2">Button sound info2.</param>
            <param name="buttonSoundChar3">Button sound char3.</param>
            <param name="buttonSoundInfo3">Button sound info3.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.ButtonSoundChar">
            <summary>
            Gets or sets the button sound char.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.ButtonSoundInfo">
            <summary>
            Gets or sets the button sound info.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.ButtonSoundChar1">
            <summary>
            Gets or sets the button sound char1.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.ButtonSoundInfo1">
            <summary>
            Gets or sets the button sound info1.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.ButtonSoundChar2">
            <summary>
            Gets or sets the button sound char2.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.ButtonSoundInfo2">
            <summary>
            Gets or sets the button sound info2.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.ButtonSoundChar3">
            <summary>
            Gets or sets the button sound char3.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonSoundTag.ButtonSoundInfo3">
            <summary>
            Gets or sets the button sound info3.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonSoundTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonSoundTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonSoundTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonSoundTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineButtonTag">
            <summary>
            DefineButtonTag defines the appearance of a button and 
            the actions performed when the button is clicked.
            </summary>
            <remarks>
            <p>
            A DefineButtonTag object must contain at least one ButtonRecord object. 
            If more than one button record is defined for a given button 
            state then each shape will be displayed by the button. 
            The order in which the shapes are displayed is determined by 
            the layer assigned to each ButtonRecord object.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineButtonTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonTag.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.ButtonRecordCollection,System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineButtonTag"/> instance.
            </summary>
            <param name="buttonId">Button id.</param>
            <param name="characters">Characters.</param>
            <param name="actions">Actions.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonTag.Characters">
            <summary>
            Gets or sets the characters.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineButtonTag.ActionsByteCode">
            <summary>
            Gets or sets the actions byte code.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineButtonTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineEditTextTag">
            <summary>
            DefineEditTextTag defines an editable text field.
            </summary>
            <remarks>
            <p>
            The value entered into the text field is assigned to a specified 
            variable allowing the creation of forms to accept values entered 
            by a person viewing the Flash file.
            </p>
            <p>
            The class contains a complex set of attributes which allows a high 
            degree of control over how a text field is displayed.
            </p>
            <p>
            Additional layout information for the spacing of the text relative 
            to the text field borders can also be specified.
            </p>
            <p>
            Setting the HTML flag to true allows text marked up with a limited 
            set of HTML tags to be displayed in the text field.
            </p>
            <p>
            This tag was introduced in Flash 4.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineEditTextTag.#ctor">
            <summary>
            constructor.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineEditTextTag.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.MaxLenght">
            <summary>
            Gets or sets the max lenght.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.Indent">
            <summary>
            Gets or sets the indent.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.Leading">
            <summary>
            Gets or sets the leading.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.Align">
            <summary>
            Gets or sets the align.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.FontHeight">
            <summary>
            Gets or sets the height of the font.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.FontId">
            <summary>
            Gets or sets the font id.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.TargetCharacterId">
            <summary>
            Target tag's character id
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.Rect">
            <summary>
            Gets or sets the rect.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.InitialText">
            <summary>
            Gets or sets the initial text.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.WordWrap">
            <summary>
            Gets or sets a value indicating whether [word wrap].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.Multiline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SwfDotNet.IO.Tags.DefineEditTextTag"/> is multiline.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.Password">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SwfDotNet.IO.Tags.DefineEditTextTag"/> is password.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.AutoSize">
            <summary>
            Gets or sets a value indicating whether [auto size].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.NoSelect">
            <summary>
            Gets or sets a value indicating whether [no select].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.Border">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SwfDotNet.IO.Tags.DefineEditTextTag"/> is border.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.Html">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SwfDotNet.IO.Tags.DefineEditTextTag"/> is HTML.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.UsedOutlines">
            <summary>
            Gets or sets a value indicating whether [used outlines].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.HasMaxLength">
            <summary>
            Gets a value indicating whether this instance has max length.
            </summary>
            <value>
            	<c>true</c> if this instance has max length; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.HasText">
            <summary>
            Gets a value indicating whether this instance has text.
            </summary>
            <value>
            	<c>true</c> if this instance has text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.HasFont">
            <summary>
            Gets a value indicating whether this instance has font.
            </summary>
            <value>
            	<c>true</c> if this instance has font; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.HasTextColor">
            <summary>
            Gets a value indicating whether this instance has text color.
            </summary>
            <value>
            	<c>true</c> if this instance has text color; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineEditTextTag.HasLayout">
            <summary>
            Gets a value indicating whether this instance has layout.
            </summary>
            <value>
            	<c>true</c> if this instance has layout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineEditTextTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineEditTextTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineEditTextTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineEditTextTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineFont2Tag">
            <summary>
            DefineFont2Tag defines the shapes and layout of the glyphs 
            used in a font. 
            </summary>
            <remarks>
            <p>
            It extends the functionality provided by the FSDefineFont class by:
            <ul>
            <li>Allowing more than 65535 glyphs in a particular font.</li>
            <li>Including the functionality provided by the DefineFontInfoTag class.</li>
            <li>Specifying ascent, descent and leading layout information for the font.</li>
            <li>Specifying advances for each glyph.</li>
            <li>Specifying bounding rectangles for each glyph.</li>
            <li>Specifying kerning pairs defining the distance between pairs of glyphs.</li>
            </ul>
            </p>
            <p>
            This tag was introduced in Flash 2. Support for spoken languages was added 
            in Flash 6. Support for small point size fonts was added in Flash 7.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineFont2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.LanguageCode">
            <summary>
            Gets or sets the language code.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.Leading">
            <summary>
            Gets or sets the font leading height.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.Descent">
            <summary>
            Gets or sets the font descender height.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.Ascent">
            <summary>
            Gets or sets the font ascender height.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.ANSI">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SwfDotNet.IO.Tags.DefineFont2Tag"/> is ANSI encoded.
            </summary>
            <value>
            	<c>true</c> if ANSI; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.SmallText">
            <summary>
            Gets or sets if text is small. Character
            glyphs are aligned on pixel boundaries for dynamic and
            input text.
            </summary>
            <value>
            	<c>true</c> if [small text]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.ShiftJIS">
            <summary>
            Gets or sets if Shift JIS encoding is on.
            </summary>
            <value>
            	<c>true</c> if [shift JIS]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.Italic">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SwfDotNet.IO.Tags.DefineFont2Tag"/> is italic.
            </summary>
            <value>
            	<c>true</c> if italic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.Bold">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SwfDotNet.IO.Tags.DefineFont2Tag"/> is bold.
            </summary>
            <value>
            	<c>true</c> if bold; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.GlyphShapesTable">
            <summary>
            Gets or sets the glyph shape table.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.BoundsTable">
            <summary>
            Gets the bounds table.
            Not used through the version 7, but must be present.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.KerningTable">
            <summary>
            Gets the kerning table.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFont2Tag.AdvanceTable">
            <summary>
            Gets the advance table to be used for each glyph
            in dynamic glyph text.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes with the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.GetNumGlyphs">
            <summary>
            Gets the num glyphs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.HasWideCodes(System.Byte)">
            <summary>
            Determines whether has wide codes.
            </summary>
            <param name="version">Version.</param>
            <returns>
            	<c>true</c> if has wide codes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.HasLayoutInfo">
            <summary>
            Determines whether [has layout info].
            </summary>
            <returns>
            	<c>true</c> if [has layout info]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFont2Tag.HasWideOffsets">
            <summary>
            Determines whether [has wide offsets].
            </summary>
            <returns>
            	<c>true</c> if [has wide offsets]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineFontInfo2Tag">
            <summary>
            DefineFontInfo2Tag describes the mapping of codes for a given character 
            set to the glyphs that are drawn to represent the character.
            </summary>
            <remarks>
            <p>
            It extends the functionality provided by DefineFontInfo2Tag by adding a language 
            attribute which is support to support line-breaking when displaying text in 
            different spoken languages. Support for small fonts was added in Flash 7.
            </p>
            <p>
            The class allows the font associated with a Flash file to be mapped to a font 
            installed on the device where the Flash Player displaying the file is hosted. 
            The use of a font from a device is not automatic but is determined by the HTML 
            tag option <i>deviceFont</i> which is passed to the Flash Player when it is 
            first started. If a device does not support a given font then the glyphs in 
            the DefineFontTag class are used to render the characters.
            </p>
            <p>
            An important distinction between the host device to specify the font and 
            using the glyphs in an DefineFontTag object is that the device is not anti-aliased 
            and the rendering is dependent on the host device. The glyphs in an DefineFontTag 
            object are anti-aliased and are guaranteed to look identical on every device the 
            text is displayed.
            </p>
            <p>
            This tag was introduced in Flash 6. Support for small fonts was added in Flash 7.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfo2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineFontInfo2Tag"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfo2Tag.FontFlagsBold">
            <summary>
            Gets or sets a value indicating whether [font flags bold].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfo2Tag.FontFlagsItalic">
            <summary>
            Gets or sets a value indicating whether [font flags italic].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfo2Tag.FontFlagsSmallText">
            <summary>
            Gets or sets a value indicating whether [font flags small text].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfo2Tag.CodeTable">
            <summary>
            Gets or sets the code table.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfo2Tag.LanguageCode">
            <summary>
            Gets or sets the language code.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfo2Tag.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfo2Tag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfo2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfo2Tag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfo2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfo2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineFontInfoTag">
            <summary>
            DefineFontInfoTag defines the name and face of a font and maps the codes 
            for a given character set to the glyphs that are drawn to represent 
            each character.
            </summary>
            <remarks>
            <p>
            The ANSI character set is used for Latin languages, SJIS is used for Japanese 
            language characters and Unicode is used for any character set. The encoding 
            attributes uses the constants ANSI, SJIS or Unicode 
            for each character set type.
            </p>
            <p>
            The index of each entry in the codes array matches the index in the corresponding 
            glyph in the shapes array of an DefineFontTag object, allowing a given character 
            code to be mapped to a given glyph.
            </p>
            <p>
            The class allows the font associated with a Flash file to be mapped to a font 
            installed on the device where the Flash Player displaying the file is hosted. 
            The use of a font from a device is not automatic but is determined by the HTML 
            tag option <i>deviceFont</i> which is passed to the Flash Player when it is first 
            started. If a device does not support a given font then the glyphs in the DefineFontTag 
            class are used to render the characters.
            </p>
            <p>
            An important distinction between the host device to specify the font and using 
            the glyphs in an DefineFontTag object is that the device is not anti-aliased and 
            the rendering is dependent on the host device. The glyphs in an DefineFontTag 
            object are anti-aliased and are guaranteed to look identical on every device the 
            text is displayed.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfoTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineFontInfoTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfoTag.#ctor(System.UInt16,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt32[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineFontInfoTag"/> instance.
            </summary>
            <param name="fontId">Font id.</param>
            <param name="fontName">Name of the font.</param>
            <param name="fontFlagsSmallText">Font flags small text.</param>
            <param name="fontFlagsShiftJIS">Font flags shift JIS.</param>
            <param name="fontFlagsAINSI">Font flags AINSI.</param>
            <param name="fontFlagsItalic">Font flags italic.</param>
            <param name="fontFlagsBold">Font flags bold.</param>
            <param name="codeTable">Code table.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfoTag.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfoTag.FontFlagsAINSI">
            <summary>
            Gets or sets a value indicating whether [font flags AINSI].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfoTag.FontFlagsShiftJIS">
            <summary>
            Gets or sets a value indicating whether [font flags shift JIS].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfoTag.FontFlagsBold">
            <summary>
            Gets or sets a value indicating whether [font flags bold].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfoTag.FontFlagsItalic">
            <summary>
            Gets or sets a value indicating whether [font flags italic].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfoTag.FontFlagsSmallText">
            <summary>
            Gets or sets a value indicating whether [font flags small text].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontInfoTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfoTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfoTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfoTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontInfoTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineFontTag">
            <summary>
            DefineFontTag defines the glyphs that are drawn when text 
            characters are rendered in a particular font.
            </summary>
            <remarks>
            <p>
            A complete definition of a font is created using the DefineFontTag 
            object for the glyphs along with an DefineFontInfoTag object which 
            contains the name of the font, whether the font face is bold 
            or italics and a table that maps character codes to the glyphs 
            that is drawn to represent the character.
            </p>
            <p>
            When defining a font only the glyphs used from a particular 
            font are included. Unused glyphs can be omitted greatly reducing 
            the amount of information that is encoded.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineFontTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontTag.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineFontTag.GlyphShapesTable">
            <summary>
            Gets or sets the glyph shape table.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineFontTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineMorphShapeTag">
            <summary>
            DefineMorphShapeTag defines a shape that will morph 
            from one form into another.
            </summary>
            <remarks>
            <p>
            Only the start and end shapes are defined. The Flash Player 
            will perform the interpolation that transforms the shape 
            at each staging in the morphing process.
            </p>
            <p>
            Morphing can be applied to any shape, however there are 
            a few restrictions:
            <ul>
            <li>The start and end shapes must have the same number of 
            edges (StraightEdgeRecord and CurvedEdgeRecord objects).</li>
            <li>The fill style (Solid, Bitmap or Gradient) must be the 
            same in the start and end shape.</li>
            <li>If a bitmap fill style is used then the same image must 
            be used in the start and end shapes.</li>
            <li>If a gradient fill style is used then the gradient must 
            contain the same number of points in the start and end 
            shape.</li>
            <li>The start and end shape must contain the same set of 
            ShapeStyle objects.</li>
            </ul>
            </p>
            <p>
            To perform the morphing of a shape the shape is placed in 
            the display list using a PlaceObject2Tag object. The ratio 
            attribute in the PlaceObject2Tag object defines the progress 
            of the morphing process. The ratio ranges between 0.0 and 
            1.0 where 0 represents the start of the morphing process 
            and 1.0, the end.
            </p>
            <p>
            The edges may change their type when a shape is morphed. 
            Straight edges can become curves and vice versa.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineMorphShapeTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineMorphShapeTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineMorphShapeTag.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.Rect,SwfDotNet.IO.Tags.Types.Rect,System.UInt32,SwfDotNet.IO.Tags.Types.MorphFillStyleCollection,SwfDotNet.IO.Tags.Types.MorphLineStyleCollection,SwfDotNet.IO.Tags.Types.ShapeRecordCollection,SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineMorphShapeTag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="startBounds">Start bounds.</param>
            <param name="endBounds">End bounds.</param>
            <param name="offset">Offset.</param>
            <param name="morphFillStyles">Morph fill styles.</param>
            <param name="morphLineStyles">Morph line styles.</param>
            <param name="startEdges">Start edges.</param>
            <param name="endEdges">End edges.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineMorphShapeTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineMorphShapeTag.StartBounds">
            <summary>
            Gets or sets the start bounds.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineMorphShapeTag.EndBounds">
            <summary>
            Gets or sets the end bounds.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineMorphShapeTag.MorphFillStyles">
            <summary>
            Gets or sets the morph fill styles.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineMorphShapeTag.MorphLineStyles">
            <summary>
            Gets or sets the morph line styles.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineMorphShapeTag.StartEdges">
            <summary>
            Gets or sets the start edges.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineMorphShapeTag.EndEdges">
            <summary>
            Gets or sets the end edges.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineMorphShapeTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineMorphShapeTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineMorphShapeTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineMorphShapeTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.ShapeType">
            <summary>
            ShapeType enum
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.ShapeType.Shape">
            <summary>
            Classical shape
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.ShapeType.Shape2">
            <summary>
            Shape 2
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.ShapeType.Shape3">
            <summary>
            Shape 3
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.ShapeType.None">
            <summary>
            No shape define
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineShape">
            <summary>
            <p>
            DefineShape is the abstract class for the DefineShape tags:
            <see cref="T:SwfDotNet.IO.Tags.DefineShapeTag"/>, 
            <see cref="T:SwfDotNet.IO.Tags.DefineShape2Tag"/>, 
            <see cref="T:SwfDotNet.IO.Tags.DefineShape3Tag"/> 
            This class provides the members, properties, read and write methods
            common to this 3 tags.
            </p>
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineShape.shapeId">
            <summary>
            Shape Id
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineShape.rect">
            <summary>
            Rect
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineShape.shape">
            <summary>
            Shape records
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineShape.shapeType">
            <summary>
            Shape type
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineShape.versionCompatibility">
            <summary>
            Swf version shape compatibility
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineShape"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.Rect,SwfDotNet.IO.Tags.Types.ShapeWithStyle)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineShape"/> instance.
            </summary>
            <param name="shapeId">Shape id.</param>
            <param name="rect">Rect.</param>
            <param name="shape">Shape.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineShape.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineShape.Rect">
            <summary>
            Gets or sets the rect.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineShape.ShapeWithStyle">
            <summary>
            Gets or sets the shape with style.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape.GetInstanceFromVersion(System.UInt32)">
            <summary>
            Gets the instance from version.
            </summary>
            <param name="version">Version.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineShape2Tag">
            <summary>
            DefineShape2Tag defines a shape to be displayed.
            </summary>
            <remarks>
            <p>
            It extends the functionality of the DefineShapeTag class by allowing 
            more than 255 fill or line styles to be specified.
            </p>
            <p>
            The shape defines a path containing a mix of straight and curved edges and pen 
            move actions. A path need not be contiguous. When the shape is drawn the ShapeStyle 
            object selects the line and fill styles, from the respective array, to be used. 
            ShapeStyle objects can be defined in the shape at any time to change the styles 
            being used. The fill style used can either be a solid color, a bitmap image or a 
            gradient. The line style specifies the color and thickness of the line drawn around 
            the shape outline. For both line and fill styles the selected style may be undefined, 
            allowing the shape to be drawn without an outline or left unfilled.
            </p>
            <p>
            This tag was introduced in Flash 2.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineShape2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape2Tag.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.Rect,SwfDotNet.IO.Tags.Types.ShapeWithStyle)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineShape2Tag"/> instance.
            </summary>
            <param name="shapeId">Shape id.</param>
            <param name="rect">Rect.</param>
            <param name="shape">Shape.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineShape3Tag">
            <summary>
            DefineShape3Tag defines a transparent shape to be displayed.
            </summary>
            <remarks>
            <p>
            It extends the functionality of the DefineShape2Tag class by 
            supporting transparent colors.
            </p>
            <p>
            The shape defines a path containing a mix of straight and curved 
            edges and pen move actions. A path need not be contiguous. 
            When the shape is drawn the ShapeStyle object selects the line 
            and fill styles, from the respective array, to be used. ShapeStyle 
            objects can be defined in the shape at any time to change the 
            styles being used. The fill style used can either be an area of 
            pure color, a bitmap image or a gradient. The line style specifies 
            the color and thickness of the line drawn around the shape outline. 
            For both line and fill styles the selected style may be undefined, 
            allowing the shape to be drawn without an outline or left unfilled.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape3Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineShape3Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape3Tag.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.Rect,SwfDotNet.IO.Tags.Types.ShapeWithStyle)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineShape3Tag"/> instance.
            </summary>
            <param name="shapeId">Shape id.</param>
            <param name="rect">Rect.</param>
            <param name="shape">Shape.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShape3Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineShapeTag">
            <summary>
            DefineShapeTag defines a shape to be displayed.
            </summary>
            <remarks>
            <p>
            The shape defines a path containing a mix of straight and curved 
            edges and pen move actions. A path need not be contiguous. 
            When the shape is drawn the ShapeStyle object selects the line 
            and fill styles, from the respective array, to be used. 
            ShapeStyle objects can be defined in the shape at any time to 
            change the styles being used. The fill style used can either be 
            a solid color, a bitmap image or a gradient. The line style 
            specifies the color and thickness of the line drawn around 
            the shape outline.
            </p>
            <p>
            For both line and fill styles the selected style may be undefined, 
            allowing the shape to be drawn without an outline or left unfilled.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShapeTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineShapeTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShapeTag.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.Rect,SwfDotNet.IO.Tags.Types.ShapeWithStyle)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineShapeTag"/> instance.
            </summary>
            <param name="shapeId">Shape id.</param>
            <param name="rect">Rect.</param>
            <param name="shape">Shape.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineShapeTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.SoundCodec">
            <summary>
            Available Sound Codecs enumeration
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.SoundCodec.Uncompressed">
            <summary>
            Uncompressed audio data
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.SoundCodec.ADPCM">
            <summary>
            ADPCM compression
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.SoundCodec.MP3">
            <summary>
            MP3 compression
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.SoundCodec.UncompressedLittleEndian">
            <summary>
            Uncompressed audio data with little-endian
            bits inversion
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.SoundCodec.NellyMoser">
            <summary>
            NellyMoser compression
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineSoundTag">
            <summary>
            DefineSoundTag is used to define a sound that will be played 
            when a given event occurs.
            </summary>
            <remarks>
            <p>
            Three different types of object are used to play an event sound:
            <ul>
            <li>The DefineSoundTag object that contains the sampled sound.</li>
            <li>A SoundInfo object that defines how the sound fades in and out, 
            whether it repeats and also defines an envelope for more sophisticated 
            control over how the sound is played</li>
            <li>A StartSoundTag object that signals the Flash Player to begin 
            playing the sound.</li>
            </ul>
            </p>
            <p>
            Five encoded formats for the sound data are supported:
            <ul>
            <li>NATIVE_PCM - uncompressed Pulse Code Modulated: samples are either 1 
            or 2 bytes. For two-byte samples the byte order is dependent on the 
            platform on which the Flash Player is hosted. Sounds created on a 
            platform which supports big-endian byte order will not be played 
            correctly when listened to on a platform which supports little-endian 
            byte order.</li>
            <li>PCM - uncompressed Pulse Code Modulated: samples are 
            either 1 or 2 bytes with the latter presented in Little-Endian byte order. 
            This ensures that sounds can be played across different platforms.</li>
            <li>ADPCM - compressed ADaptive Pulse Code Modulated: samples are 
            encoded and compressed by comparing the difference between successive 
            sound sample which dramatically reduces the size of the encoded sound 
            when compared to the uncompressed PCM formats. Use this format 
            whenever possible.</li>
            <li>MP3 - compressed MPEG Audio Layer-3.</li>
            <li>NELLYMOSER - compressed Nellymoser Asao format supporting low bit-rate 
            sound for improving synchronisation between the sound and frame 
            rate of movies.</li>
            </ul>
            </p>
            <p>
            <b>This tag was introduced in Flash 1. Flash 3 added support for MP3 
            and the Nellymoser Asao format was added in Flash 6.</b>
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineSoundTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.#ctor(System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineSoundTag"/> instance.
            </summary>
            <param name="soundId">Sound id.</param>
            <param name="soundFormat">Sound format.</param>
            <param name="soundRate">Sound rate.</param>
            <param name="soundSize">Size of the sound.</param>
            <param name="soundType">Sound type.</param>
            <param name="soundSampleCount">Sound sample count.</param>
            <param name="soundData">Sound data.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSoundTag.SoundSampleCount">
            <summary>
            Gets or sets the sound sample count.
            Average number of samples in each 
            StreamSoundBlock.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSoundTag.SoundType">
            <summary>
            Gets or sets the sound type.
            Mono or stéreo sound: 0 = mono, 1 = stereo
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSoundTag.SoundRate">
            <summary>
            Gets or sets the sound rate.
            The rate the sound will be played in KHertz: 0 = 5.512 KHz, 
            1 = 11.025 KHz, 2 = 22.050 KHz or 3 = 44.100 KHz
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSoundTag.SoundSize">
            <summary>
            Gets or sets the size of the sound.
            This is the size of each sample: 0 = snd8bits,
            1 = snd16bits
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSoundTag.SoundData">
            <summary>
            Gets or sets the sound data.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSoundTag.SoundFormat">
            <summary>
            Gets or sets the sound format.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSoundTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes with the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.FromFile(System.UInt16,System.String)">
            <summary>
            Construct a new DefineSoundTag object 
            from a file. This method assigns file stream
            data and character Id, but not get audio file
            properties (as format, bitrate, etc.). 
            </summary>
            <param name="characterId">Character id.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.FromStream(System.UInt16,System.IO.Stream)">
            <summary>
            Construct a new DefineSoundTag object 
            from a stream. This method assigns file stream
            data and character Id, but not get audio file
            properties (as format, bitrate, etc.). 
            </summary>
            <param name="characterId">Character id.</param>
            <param name="stream">Stream.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.DecompileToFile(System.String)">
            <summary>
            Decompiles to file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSoundTag.DecompileToStream(System.IO.Stream)">
            <summary>
            Decompiles to stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineSpriteTag">
            <summary>
            DefineSpriteTag defines a movie clip that animates 
            shapes within a movie.
            </summary>
            <remarks>
            <p>
            It contains an array of movie objects that define the 
            placement of shapes, buttons, text and images and the 
            order in which they are displayed through a time-line 
            that is separate from the parent movie.
            </p>
            <p>
            Although a movie clip contains the commands that instructs 
            the Flash Player on how to animate the clip it cannot 
            contain any new definitions of objects. All definitions 
            must be in the main movie. All objects referred to by 
            the movie clip must be also defined in the main movie 
            before they can be used.
            </p>
            <p>
            When using the DefineSpriteTag object can only contain 
            objects from the following classes: 
            <see cref="T:SwfDotNet.IO.Tags.ShowFrameTag">ShowFrameTag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.PlaceObjectTag">PlaceObjectTag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag">PlaceObject2Tag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.RemoveObjectTag">RemoveObjectTag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.RemoveObject2Tag">RemoveObject2Tag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.DoActionTag">DoActionTag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.StartSoundTag">StartSoundTag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.FrameLabelTag">FrameLabelTag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.SoundStreamHeadTag">SoundStreamHeadTag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.SoundStreamHead2Tag">SoundStreamHead2Tag</see>, 
            <see cref="T:SwfDotNet.IO.Tags.SoundStreamBlockTag">SoundStreamBlockTag</see>
            or <see cref="T:SwfDotNet.IO.Tags.VideoFrameTag">VideoFrameTag</see>. 
            Other objects are not allowed.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineSpriteTag.spriteId">
            <summary>
            Sprite ID
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineSpriteTag.frameCount">
            <summary>
            Frame count
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineSpriteTag.tagList">
            <summary>
            inner tags
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineSpriteTag._actionCount">
            <summary>
            action count including inner tags´ actions
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineSpriteTag.tagForAction">
            <summary>
            tag index for action block index
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DefineSpriteTag.tagOffset">
            <summary>
            contains action block counts for inner tags
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSpriteTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineSpriteTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSpriteTag.#ctor(System.UInt16,System.UInt16,SwfDotNet.IO.Tags.BaseTagCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineSpriteTag"/> instance.
            </summary>
            <param name="spriteId">Sprite id. That's a unique identifier, in the range 1..65535, for the movie clip.</param>
            <param name="frameCount">Frame count. </param>
            <param name="tags">Tags. That's an array of BaseTag objects that define the commands that are executed by the Flash Player to animate the movie clip.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSpriteTag.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSpriteTag.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSpriteTag.FrameCount">
            <summary>
            Gets or sets the frame count.
            That's the total frame count of this movie clip.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSpriteTag.Tags">
            <summary>
            Gets the tags.
            That's an array of BaseTag objects that define the 
            commands that are executed by the Flash Player to animate 
            the movie clip.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSpriteTag.ActionRecCount">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineSpriteTag.Item(System.Int32)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSpriteTag.Add(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            Adds the specified child tag.
            </summary>
            <param name="childTag">Child tag.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSpriteTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSpriteTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineSpriteTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineTag">
            <summary>
            <p>
            DefineTag is an interface.
            </p>
            <p>
            The define tags class provides the functionnality to
            declare a new object that will be add to the
            SWF dictionnary and identified by the CharacterId.
            </p>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineTag.CharacterId">
            <summary>
            Gets or sets the character id.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineTargetTag">
            <summary>
            DefineTargetTag interface.
            A tag will implement this interface if this tag is "mapped"
            with another define tag by tag's define id. 
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineTargetTag.TargetCharacterId">
            <summary>
            Target tag's character id
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineText">
            <summary>
            DefineText is the abstract class of the <see cref="T:SwfDotNet.IO.Tags.DefineTextTag"/> 
            and the <see cref="T:SwfDotNet.IO.Tags.DefineText2Tag"/> object.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineText.TextRecords">
            <summary>
            Gets the text records.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineText.CharacterId">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.DefineTag"/>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineText.Rect">
            <summary>
            Gets the rect.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineText.Matrix">
            <summary>
            Gets the matrix.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineText.TagName">
            <summary>
            Gets the name of the tag.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineText.VersionCompatibility">
            <summary>
            Gets the version compatibility.
            </summary>
            <value>The version compatibility.</value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText.GetGlyphBits">
            <summary>
            Gets the glyph bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText.GetAdvanceBits">
            <summary>
            Gets the advance bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes with the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText.Resolve(SwfDotNet.IO.Swf)">
            <summary>
            Resolves method.
            This method provides the way to update the textrecords glyph indexes
            from Font object contained by the Swf Dictionnary.
            </summary>
            <param name="swf">SWF.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineText2Tag">
            <summary>
            DefineTextTag defines one or more lines of transparent text.
            </summary>
            <remarks>
            <p>
            It extends the functionality provided by the DefineTextTag class by 
            supporting transparent colors. The characters, style and layout 
            information is defined using TextRecord objects. The DefineText2Tag 
            class acts as a container for the text, defining the bounding rectangle 
            that encloses the text along with a coordinate transform that can 
            be used to change the size and orientation of the text when it 
            is displayed.
            </p>
            <p>
            The bounding rectangle and matrix controls how the text is laid out. 
            Each TextRecord object in the TextRecordCollection specifies an offset from 
            the left and bottom edges of the bounding rectangle, allowing successive 
            lines of text to be arranged as a block or paragraph. The coordinate 
            transform matrix can be used to control the size and orientation of the text 
            when it is displayed.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineText2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineText2Tag"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineText2Tag.TagName">
            <summary>
            Gets the name of the tag.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineText2Tag.VersionCompatibility">
            <summary>
            Gets the version compatibility.
            </summary>
            <value>The version compatibility.</value>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineTextTag">
            <summary>
            DefineTextTag defines one or more lines of text.
            </summary>
            <remarks>
            <p>
            The characters, style and layout information is defined 
            using TextRecord objects. The DefineTextTag class acts as a 
            container for the text, defining the bounding rectangle 
            that encloses the text along with a coordinate transform 
            that can be used to change the size and orientation of the 
            text when it is displayed.
            </p>
            <p>
            The bounding rectangle and transform controls how the text is 
            laid out. Each TextRecord object in the TextRecordCollection 
            specifies an offset from the left and bottom edges of the bounding 
            rectangle, allowing successive lines of text to be arranged as a 
            block or paragraph. The coordinate transform can be used to control 
            the size and orientation of the text when it is displayed.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineTextTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineTextTag"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineTextTag.TagName">
            <summary>
            Gets the name of the tag.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineTextTag.VersionCompatibility">
            <summary>
            Gets the version compatibility.
            </summary>
            <value>The version compatibility.</value>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DefineVideoStreamTag">
            <summary>
            DefineVideoStreamTag class is used to display 
            video within a Flash file.
            </summary>
            <remarks>
            <p>
            Video objects contain a unique identifier and are treated 
            in the same way as shapes, buttons, images, etc. 
            The video data displayed is define using the VideoFrameTag 
            class. Each frame of video is displayed whenever display 
            list is updated using the ShowFrameTag object - 
            any timing information stored within the video data 
            is ignored.
            </p>
            <p>
            This tag was introduced in Flash 6. The ScreenVideo 
            format was introduced in Flash 7.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineVideoStreamTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineVideoStreamTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineVideoStreamTag.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt32,System.Boolean,System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DefineVideoStreamTag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="numFrames">Num frames.</param>
            <param name="width">Width of each frame in pixels.</param>
            <param name="height">Height of each frame in pixels.</param>
            <param name="videoFlagsDeblocking">Video flags deblocking.</param>
            <param name="videoFlagsSmoothing">Video flags smoothing.</param>
            <param name="codecId">Codec id.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineVideoStreamTag.NumFrames">
            <summary>
            Gets or sets the num frames.
            The number of frames that will be displayed in this stream.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineVideoStreamTag.Smoothing">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:SwfDotNet.IO.Tags.DefineVideoStreamTag"/> is smoothing.
            Controls whether the Plash Player performs smoothing 
            to increase the quality of the image displayed albeit 
            at the price of performance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineVideoStreamTag.Deblocking">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:SwfDotNet.IO.Tags.DefineVideoStreamTag"/> is deblocking.
            Whether a filter is used when assembling the blocks of video 
            data into a frame. This may be set to Off to turn off the 
            deblock filter in the Flash Player; On to whether the 
            deblocking filter is used.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineVideoStreamTag.CharacterId">
            <summary>
            Gets or sets the character id.
            That's a unique identifier, in the range 1..65535, that 
            is used to reference the video from other objects, e.g. 
            when adding or removing from the display list.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineVideoStreamTag.CodecId">
            <summary>
            Gets or sets the codec id.
            Identifies the format of the video data either 
            H263VideoPacket for data encoded using the Sorenson 
            modified H263 format or ScreenVideoPacket for data encoded 
            using Macromedia's Screen Video format.
            2 = Sorenson H263, 3 = ScreenVideo (SWF 7 or +)
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineVideoStreamTag.Width">
            <summary>
            Gets or sets the width of each frame in pixels.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DefineVideoStreamTag.Height">
            <summary>
            Gets or sets the height of each frame in pixels.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineVideoStreamTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineVideoStreamTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineVideoStreamTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DefineVideoStreamTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.DoActionTag">
            <summary>
            DoActionTag is used to specify a sequence of actions that are executed 
            when a frame is displayed.
            </summary>
            <remarks>
            <p>
            To define the actions for a given frame the DoActionTag object should be 
            added to a movie after the previous frame is displayed but before the 
            ShowFrameTag object that displays the 'current' frame and triggers the 
            actions to be executed.
            </p>
            <p>
            Only one DoActionTag object can be used to specify the actions for a 
            given frame. If more than one DoActionTag object is added in a single 
            frame only the actions contained in the last DoActionTag object 
            (before the ShowFrameTag object) will be executed when the frame is 
            displayed. The other DoActionTag objects will be ignored.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="F:SwfDotNet.IO.Tags.DoActionTag.actionRecord">
            <summary>
            bytecode block
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DoActionTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DoActionTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DoActionTag.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.DoActionTag"/> instance.
            </summary>
            <param name="actionRecord">Swf bytecode action block.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DoActionTag.ActionRecCount">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.DoActionTag.Item(System.Int32)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DoActionTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DoActionTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.DoActionTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.EnableDebugger2Tag">
            <summary>
            EnableDebugger2Tag enables a movie to be debugged when played 
            using the Flash authoring tool, allowing the variables defined 
            in the arrays of actions specified in object to be inspected.
            </summary>
            <remarks>
            <p>
            In order to use the debugger a password must be supplied. 
            When encrypted using the MD5 algorithm it must match the value 
            stored in the password property.
            </p>
            <p>
            To encode a string with the MD5 encryption algorithm, you can use
            the EncryptPasswordToMD5 method of the EnableDebugger2Tag class.
            </p>
            <p>
            This tag was introduced in Flash 6. It replaced EnableDebuggerTag 
            in Flash 5 with a different format to support internal
            changes in the Flash Player. The functionality was not changed.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebugger2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.EnableDebugger2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebugger2Tag.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.EnableDebugger2Tag"/> instance.
            </summary>
            <param name="password">md5 encrypted password</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.EnableDebugger2Tag.Password">
            <summary>
            Gets or sets the password as string.
            This password is MD-5 encrypted.
            To set a password non-encrypted, use
            the <see cref="M:SwfDotNet.IO.Tags.EnableDebugger2Tag.EncryptPasswordToMD5(System.String)">EncryptPasswordToMD5</see>
            method.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebugger2Tag.EncryptPasswordToMD5(System.String)">
            <summary>
            Encrypts the password with MD5 algorithm.
            </summary>
            <param name="originalPassword">Original password.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebugger2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebugger2Tag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebugger2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebugger2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.EnableDebuggerTag">
            <summary>
            EnableDebuggerTag enables a movie to be debugged when played using 
            the Flash authoring tool, allowing the variables defined in the arrays 
            of actions specified in object to be inspected.
            </summary>
            <remarks>
            <p>
            In order to use the debugger a password must be supplied. 
            When encrypted using the MD5 algorithm it must match the value 
            stored in the password attribute.
            </p>
            <p>
            To encode a string with the MD5 encryption algorithm, you can use
            the EncryptPasswordToMD5 method of the EnableDebuggerTag class.
            </p>
            <p>
            This tag was introduced in Flash 5.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebuggerTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.EnableDebuggerTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebuggerTag.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.EnableDebuggerTag"/> instance.
            </summary>
            <param name="password">Md5 encrypted password</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.EnableDebuggerTag.Password">
            <summary>
            Gets or sets the password as string.
            This password is MD-5 encrypted.
            To set a password non-encrypted, use
            the <see cref="M:SwfDotNet.IO.Tags.EnableDebuggerTag.EncryptPasswordToMD5(System.String)">EncryptPasswordToMD5</see>
            method.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebuggerTag.EncryptPasswordToMD5(System.String)">
            <summary>
            Encrypts the password with MD5 algorithm.
            </summary>
            <param name="originalPassword">Original password.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebuggerTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebuggerTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EnableDebuggerTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.EndTag">
            <summary>
            EndTag defines the end of the tag sequence.
            </summary>
            <remarks>
            <p>
            The swf tag list must be ended with this tag, as tag sequence
            contains in a movie clip represented by the DefineSpriteTag object. 
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EndTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.EndTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EndTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EndTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.EndTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.ExportAssetsTag">
            <summary>
            ExportAssetsTag  is used to export shapes and other objects 
            so they can be used in another Flash file.
            </summary>
            <remarks>
            <p>
            Since the identifier for an object is only unique within a given 
            Flash file, each object exported must be given a name so it can 
            referenced when it is imported.
            </p>
            <p>
            This tag was introduced in Flash 5.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ExportAssetsTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.ExportAssetsTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ExportAssetsTag.#ctor(SwfDotNet.IO.Tags.Types.Assert[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.ExportAssetsTag"/> instance.
            </summary>
            <param name="exportedCharacters">Exported characters.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.ExportAssetsTag.ExportedCharacters">
            <summary>
            Gets or sets the exported characters.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ExportAssetsTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="version">Version.</param>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ExportAssetsTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ExportAssetsTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ExportAssetsTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ExportAssetsTag.TargetTo(System.UInt16,System.Collections.Hashtable)">
            <summary>
            Targets to.
            </summary>
            <param name="characterId">The character id.</param>
            <param name="history">The history.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ExportAssetsTag.ChangedTarget(System.UInt16,System.UInt16,System.Collections.Hashtable)">
            <summary>
            Changeds the target.
            </summary>
            <param name="id">The id.</param>
            <param name="newId">The new id.</param>
            <param name="history">The history.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FlvSoundFormat">
            <summary>
            Flv Sound Format
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvSoundFormat.Uncompressed">
            <summary>
            Uncompressed
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvSoundFormat.ADPCM">
            <summary>
            ADPCM
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvSoundFormat.Mp3">
            <summary>
            Mp3
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvSoundFormat.NellyMoser8KhzMono">
            <summary>
            NellyMoser8KhzMono
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvSoundFormat.NellyMoser">
            <summary>
            NellyMoser
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FlvAudioTag">
            <summary>
            FlvAudioTag.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvAudioTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.FlvAudioTag"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvAudioTag.SoundFormat">
            <summary>
            Gets or sets the sound format.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvAudioTag.SoundRate">
            <summary>
            Gets or sets the sound rate.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvAudioTag.IsSnd16Bits">
            <summary>
            Gets or sets a value indicating whether this instance is SND16 bits.
            </summary>
            <value>
            	<c>true</c> if this instance is SND16 bits; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvAudioTag.IsStereo">
            <summary>
            Gets or sets a value indicating whether this instance is stereo.
            </summary>
            <value>
            	<c>true</c> if this instance is stereo; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvAudioTag.SoundData">
            <summary>
            Gets or sets the sound data.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvAudioTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="version">Version.</param>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvAudioTag.UpdateData(System.Byte)">
            <summary>
            Updates the data.
            </summary>
            <param name="version">Version.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FlvBaseTag">
            <summary>
            FlvBaseTag.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvBaseTag.tagType">
            <summary>
            Tag type
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvBaseTag.dataSize">
            <summary>
            Size of the tag
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvBaseTag.timeStamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.FlvBaseTag"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvBaseTag.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvBaseTag.TagType">
            <summary>
            Gets or sets the tag type.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="version">Version.</param>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTag.UpdateData(System.Byte)">
            <summary>
            Updates the data.
            </summary>
            <param name="version">Version.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FlvBaseTagCollection">
            <summary>
            Flv Base Tag collection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.FlvBaseTagCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.Clear">
            <summary>
            Clear collection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.Add(SwfDotNet.IO.Tags.FlvBaseTag)">
            <summary>
            Add a base tag
            </summary>
            <param name="value">base tag to add</param>
            <returns>base tag added</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.AddRange(SwfDotNet.IO.Tags.FlvBaseTag[])">
            <summary>
            Add an array of base tag
            </summary>
            <param name="values">base tag array</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.Remove(SwfDotNet.IO.Tags.FlvBaseTag)">
            <summary>
            Remove a base tag
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.Insert(System.Int32,SwfDotNet.IO.Tags.FlvBaseTag)">
            <summary>
            Insert a base tag at
            </summary>
            <param name="index">index</param>
            <param name="value">base tag</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.Contains(SwfDotNet.IO.Tags.FlvBaseTag)">
            <summary>
            Test if list contain a base tag
            </summary>
            <param name="value">base tag</param>
            <returns>contain result</returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvBaseTagCollection.Item(System.Int32)">
            <summary>
            Access base tag list by index
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.IndexOf(SwfDotNet.IO.Tags.FlvBaseTag)">
            <summary>
            Get index of a base tag
            </summary>
            <param name="value">base tag</param>
            <returns>base tag index if is contain, -1 else.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.GetLastOne">
            <summary>
            Gets the last BaseTag of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvBaseTagCollection.ToArray">
            <summary>
            Convert collection to array
            </summary>
            <returns>Base tags array</returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FlvTagCodeEnum">
            <summary>
            FlvTagCodeEnum.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvTagCodeEnum.Audio">
            <summary>
            Audio tag type
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvTagCodeEnum.Video">
            <summary>
            Video tag type
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FlvCodec">
            <summary>
            FlvCodec
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvCodec.SorensonH263">
            <summary>
            SorensonH263
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvCodec.ScreenVideo">
            <summary>
            ScreenVideo
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FlvFrameType">
            <summary>
            Frame Type
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvFrameType.KeyFrame">
            <summary>
            KeyFrame
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvFrameType.InterFrame">
            <summary>
            InterFrame
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.FlvFrameType.DisposableInterFrame">
            <summary>
            DisposableInterFrame
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FlvVideoTag">
            <summary>
            FlvVideoTag.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvVideoTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.FlvVideoTag"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvVideoTag.Codec">
            <summary>
            Gets or sets the codec.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvVideoTag.FrameType">
            <summary>
            Gets or sets the frame type.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FlvVideoTag.VideoData">
            <summary>
            Gets or sets the video data.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvVideoTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="version">Version.</param>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FlvVideoTag.UpdateData(System.Byte)">
            <summary>
            Updates the data.
            </summary>
            <param name="version">Version.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.FrameLabelTag">
            <summary>
            FrameLabelTag defines a name for the current frame in a 
            movie or movie clip.
            </summary>
            <remarks>
            <p>
            The name can be referenced from other objects such as ActionGotoFrame2 
            to simplify the creation of scripts to control movies by using 
            a predefined name rather than the frame number. The label assigned 
            to a particular frame should be unique. Frames may also be 
            reference externally when specifying the movie to play using a 
            URL - similar to the way names links are used in HTML. 
            When the Flash Player loaded a movie it will begin playing at 
            the frame specified in the URL.
            </p>
            <p>
            The name is assigned to a particular frame when the FrameLabelTag 
            object is defined prior to the ShowFrameTag object that displays 
            all the objects on the display list. The frame can then be 
            referenced by its name once it has been defined. A frame cannot 
            be referenced before the Player has loaded and displayed the frame 
            that contains the corresponding FrameLabelTag object.
            </p>
            <p>
            To start playing the movie at the frame labeled "StartHere" specify 
            the label using the same format a HTML anchors:<br/>
            <pre>http://www.mysite.com/flash/movie.swf#StartHere</pre>
            </p>
            <p>
            This may be used either in a browser window to load a file or form 
            within a movie using the ActionGetUrl or ActionGetUrl2 actions.
            </p>
            <p>
            This tag was introduced in Flash 3. In Flash 6 the label can support 
            named anchors which allows a frame to be specified as the starting 
            point when displaying a Flash movie in a web browser.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FrameLabelTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.FrameLabelTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FrameLabelTag.#ctor(System.String)">
            <summary>
            constructor.
            </summary>
            <param name="name">label for frame</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.FrameLabelTag.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FrameLabelTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FrameLabelTag.GetSizeOf(System.Byte)">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FrameLabelTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.FrameLabelTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.IBaseTagContainer">
            <summary>
            IBaseTagContainer is an interface to describe
            that an object is a container of base tags. 
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.IBaseTagContainer.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.IBaseTagContainer.Add(SwfDotNet.IO.Tags.BaseTag)">
            <summary>
            Adds the specified tag.
            </summary>
            <param name="tag">Tag.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.IDefineFont">
            <summary>
            IDefineFont interface describes an objet
            that contains a GlyphShapeTable.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.IDefineFont.CharacterId">
            <summary>
            Gets or sets the character id.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.ImportAssetsTag">
            <summary>
            ImportAssetsTag is used to import shapes and other objects from 
            another SWF file.
            </summary>
            <remarks>
            <p>
            Since the identifier for an object is only unique within a given 
            Flash file, imported objects are referenced by a name assigned when 
            the object is exported.
            </p>
            <p>
            To provide a degree of security the Flash Player will only import files 
            that originate from the same domain as the file that it is currently 
            playing. For example if the Flash file being shown was loaded from 
            www.mydomain.com/flash.swf then the file contains the exported objects 
            must reside somewhere at www.mydomain.com. This prevents a malicious 
            Flash file from loading files from an unknown third party.
            </p>
            <p>
            This tag was introduced in Flash 5.
            </p>
            </remarks>
            <example>
            <p>
            <code lang="C#">
            // To export an object from a Flash file:
            DefineShapeTag shape = new DefineShapeTag(...);
            swf.Add(shape);
            swf.Add(new ExportAssetsTag(shape.getIdentifier(), "Shape"));
            ...
            // The object can then be imported in another movie:
            swf.Add(new ImportAssetsTag("exportFile.swf", "Shape"));
            </code>
            </p>
            </example>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ImportAssetsTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.ImportAssetsTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ImportAssetsTag.#ctor(System.String,SwfDotNet.IO.Tags.Types.Assert[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.ImportAssetsTag"/> instance.
            </summary>
            <param name="url">URL.</param>
            <param name="exportedCharacters">Exported characters.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.ImportAssetsTag.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.ImportAssetsTag.ExportedCharacters">
            <summary>
            Gets or sets the exported characters.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ImportAssetsTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="version">Version.</param>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ImportAssetsTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ImportAssetsTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.InitActionTag">
            <summary>
            InitActionTag is used to specify a sequence of actions that are 
            executed to initialise a movie clip before it is displayed.
            </summary>
            <remarks>
            <p>
            It implements the #initclip pragma in the ActionScript language.
            </p>
            <p>
            Unlike the DoActionTag class which specifies the actions that are 
            executed when a particular frame is displayed the actions contained in an 
            InitActionTag object are executed only once, regardless of where the 
            object is included in a movie. If a frame containing the InitActionTag 
            object is played again the actions are skipped. Also there can only be 
            one InitActionTag object for each movie clip defined in the movie.
            </p>
            <p>
            This tag was introduced in Flash 6.
            </p>
            </remarks>
        </member>
        <member name="F:SwfDotNet.IO.Tags.InitActionTag.spriteId">
            <summary>sprite id</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.InitActionTag.actionRecord">
            <summary>bytecode block</summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.InitActionTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.InitActionTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.InitActionTag.#ctor(System.UInt16,System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.InitActionTag"/> instance.
            </summary>
            <param name="spriteId">Sprite id.</param>
            <param name="actionRecord">Action record.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.InitActionTag.TargetCharacterId">
            <summary>
            Target tag's character id
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.InitActionTag.ActionRecCount">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.InitActionTag.Item(System.Int32)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.InitActionTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.InitActionTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.InitActionTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SymbolClass.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SymbolClass"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SymbolClass.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ISizeStruct">
            <summary>
            ISizeStruct
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ISizeStruct.BinarySize">
            <summary>
            Gets the size of the binary.
            </summary>
            <value>The size of the binary.</value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ISizeStruct.SetStartPoint(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Sets the start point.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ISizeStruct.SetEndPoint(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Sets the end point.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ISizeStruct.SerializeBinarySize(System.Xml.XmlWriter)">
            <summary>
            Serializes the size of the binary.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.SizeStruct">
            <summary>
            SizeStruct
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SizeStruct.BinarySize">
            <summary>
            Gets the size of the binary.
            </summary>
            <value>The size of the binary.</value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SizeStruct.SetStartPoint(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Sets the start point.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SizeStruct.SetEndPoint(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Sets the end point.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SizeStruct.SerializeBinarySize(System.Xml.XmlWriter)">
            <summary>
            Serializes the size of the binary.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.Assert">
            <summary>
            Assert
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.Assert.tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.Assert.name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Assert.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Assert"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Assert.#ctor(System.UInt16,System.String)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Assert"/> instance.
            </summary>
            <param name="tag">Tag.</param>
            <param name="name">Name.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Assert.TargetCharacterId">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Assert.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Assert.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary stream reader.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Assert.GetSizeOf(SwfDotNet.IO.Tags.Types.AssertCollection)">
            <summary>
            Gets the size of.
            </summary>
            <param name="asserts">Asserts.</param>
            <returns>size of the list</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Assert.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Assert.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.AssertCollection">
            <summary>
            Assert collection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.Clear">
            <summary>
            Clear collection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.Add(SwfDotNet.IO.Tags.Types.Assert)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.AddRange(SwfDotNet.IO.Tags.Types.AssertCollection)">
            <summary>
            Adds the range.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.AddRange(SwfDotNet.IO.Tags.Types.Assert[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.Remove(SwfDotNet.IO.Tags.Types.Assert)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.Assert)">
            <summary>
            Inserts at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.Contains(SwfDotNet.IO.Tags.Types.Assert)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.AssertCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Assert"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AssertCollection.IndexOf(SwfDotNet.IO.Tags.Types.Assert)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.BitmapFormat">
            <summary>
            BitmapFormat
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.BitmapFormat.Pix15">
            <summary>
            Pix 15 bits stockage format
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.BitmapFormat.Pix24">
            <summary>
            Pix 24 bits stockage format
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.BitmapColorData">
            <summary>
            BitmapColorData
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.BitmapColorData.bitmapPixelDataPix15">
            <summary>
            Bitmap pixel data, stored with Pix15 format
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.BitmapColorData.bitmapPixelDataPix24">
            <summary>
            Bitmap pixel data, stored with Pix24 format
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapColorData.#ctor(SwfDotNet.IO.Tags.Types.Pix15[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.BitmapColorData"/> instance.
            </summary>
            <param name="bitmapPixelData">Bitmap pixel data.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapColorData.#ctor(SwfDotNet.IO.Tags.Types.Pix24[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.BitmapColorData"/> instance.
            </summary>
            <param name="bitmapPixelData">Bitmap pixel data.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapColorData.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this structure</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapColorData.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ButtonCondaction">
            <summary>
            ButtonCondaction
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondaction.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ButtonCondaction"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondaction.#ctor(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ButtonCondaction"/> instance.
            </summary>
            <param name="condO">Cond O.</param>
            <param name="condKey">Cond key.</param>
            <param name="actions">Actions.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondaction.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.UInt16)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="condActionSize">Size of the cond action.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondaction.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondaction.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection">
            <summary>
            ButtonCondactionCollection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection.Add(SwfDotNet.IO.Tags.Types.ButtonCondaction)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection.AddRange(SwfDotNet.IO.Tags.Types.ButtonCondaction[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection.Remove(SwfDotNet.IO.Tags.Types.ButtonCondaction)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.ButtonCondaction)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection.Contains(SwfDotNet.IO.Tags.Types.ButtonCondaction)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.ButtonCondaction"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonCondactionCollection.IndexOf(SwfDotNet.IO.Tags.Types.ButtonCondaction)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ButtonRecord">
            <summary>
            ButtonRecord class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ButtonRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecord.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.CXFormWithAlphaData)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ButtonRecord"/> instance.
            </summary>
            <param name="buttonStateHitTest">Button state hit test.</param>
            <param name="buttonStateDown">Button state down.</param>
            <param name="buttonStateOver">Button state over.</param>
            <param name="buttonStateUp">Button state up.</param>
            <param name="characterId">Character id.</param>
            <param name="placeDepth">Place depth.</param>
            <param name="placeMatrix">Place matrix.</param>
            <param name="colorTransform">Color transform.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecord.ButtonStateHitTest">
            <summary>
            Gets or sets a value indicating whether [button state hit test].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecord.ButtonStateDown">
            <summary>
            Gets or sets a value indicating whether [button state down].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecord.ButtonStateOver">
            <summary>
            Gets or sets a value indicating whether [button state over].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecord.ButtonStateUp">
            <summary>
            Gets or sets a value indicating whether [button state up].
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecord.TargetCharacterId">
            <summary>
            Gets or sets the character id.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecord.PlaceDepth">
            <summary>
            Gets or sets the place depth.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecord.PlaceMatrix">
            <summary>
            Gets or sets the place matrix.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecord.ColorTransform">
            <summary>
            Gets or sets the color transform.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecord.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.Byte,SwfDotNet.IO.Tags.TagCodeEnum)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="firstByte">First byte.</param>
            <param name="buttonType">Button type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecord.GetSizeOf">
            <summary>
            Gets the size.
            </summary>
            <returns>Size</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecord.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter,SwfDotNet.IO.Tags.TagCodeEnum)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
            <param name="buttonType">Button type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ButtonRecordCollection">
            <summary>
            ButtonRecordCollection class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ButtonRecordCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.Add(SwfDotNet.IO.Tags.Types.ButtonRecord)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.AddRange(SwfDotNet.IO.Tags.Types.ButtonRecord[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.Remove(SwfDotNet.IO.Tags.Types.ButtonRecord)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.ButtonRecord)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.Contains(SwfDotNet.IO.Tags.Types.ButtonRecord)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ButtonRecordCollection.IndexOf(SwfDotNet.IO.Tags.Types.ButtonRecord)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ClipActionRec">
            <summary>
            The ClipActionRecord class. 
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ClipActionRec.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ClipActionRec"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ClipActionRec.#ctor(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ClipActionRec"/> instance.
            </summary>
            <param name="header">Data preceding bytecode block that doesn´t need to get parsed.</param>
            <param name="key">Key code.</param>
            <param name="actionRec">Raw bytecode.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ClipActionRec.ActionRecord">
            <summary>
            Property for accessing raw bytecode block.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ClipActionRec.ReadData(System.IO.BinaryReader,System.Byte)">
            <summary>
            Reads the data.
            </summary>
            <param name="br">Br.</param>
            <param name="version">Version.</param>
            <returns>true if ok, false otherwise</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ClipActionRec.GetData(System.Byte)">
            <summary>
            Get binary data of ClipAction Record for swf compilation.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ColorMapData">
            <summary>
            ColorMapData
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ColorMapData.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ColorMapData"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ColorMapData.#ctor(SwfDotNet.IO.Tags.Types.RGB[],System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ColorMapData"/> instance.
            </summary>
            <param name="colorTableRGB">Color table RGB.</param>
            <param name="colorMapPixelData">Color map pixel data.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ColorMapData.ColorMapPixelData">
            <summary>
            Gets or sets the color map pixel data.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ColorMapData.ColorTableRGB">
            <summary>
            Gets or sets the color table RGB.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ColorMapData.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.Byte,System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Reads the data.
            </summary>
            <param name="reader">Reader.</param>
            <param name="bitmapColorTableSize">Size of the bitmap color table.</param>
            <param name="bitmapWidth">Width of the bitmap.</param>
            <param name="bitmapHeight">Height of the bitmap.</param>
            <param name="toRead">To read.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ColorMapData.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this type</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ColorMapData.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ColorMapData.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.AlphaColorMapData">
            <summary>
            AlphaColorMapData
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaColorMapData.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.AlphaColorMapData"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaColorMapData.#ctor(SwfDotNet.IO.Tags.Types.RGBA[],System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.AlphaColorMapData"/> instance.
            </summary>
            <param name="colorTableRgb">Color table RGB.</param>
            <param name="colorMapPixelData">Color map pixel data.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.AlphaColorMapData.ColorTableRgb">
            <summary>
            Gets or sets the color table RGBA.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.AlphaColorMapData.ColorMapPixelData">
            <summary>
            Gets or sets the color map pixel data.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaColorMapData.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this type</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaColorMapData.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaColorMapData.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.AlphaBitmapData">
            <summary>
            AlphaBitmapData
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaBitmapData.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.AlphaBitmapData"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaBitmapData.#ctor(SwfDotNet.IO.Tags.Types.RGBA[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.AlphaBitmapData"/> instance.
            </summary>
            <param name="bitmapPixelData">Bitmap pixel data.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.AlphaBitmapData.BitmapPixelData">
            <summary>
            Gets or sets the bitmap pixel data.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaBitmapData.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this type</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaBitmapData.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.AlphaBitmapData.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.CXForm">
            <summary>
            The CXForm is used to change the colour of a shape or button without 
            changing the values in the original definition of the object.
            </summary>
            <remarks>
            <p>
            Two types of transformation are supported: <b>Add</b> and <b>Multiply</b>
            </p>
            <p>
            In Add transformations a value is added to each colour channel:
            <code lang="C#">
            newRed = red + addRedTerm
            newGreen = green + addGreenTerm
            newBlue = blue + addBlueTerm
            newAlpha = alpha + addAlphaTerm
            </code>
            </p>
            <p>
            In Multiply transformations each colour channel is multiplied by 
            a given value:
            <code lang="C#">
            newRed = red * multiplyRedTerm
            newGreen = green * multiplyGreenTerm
            newBlue = blue * multiplyBlueTerm
            newAlpha = alpha * multiplyAlphaTerm
            </code>
            </p>
            <p>
            The CXForm was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXForm.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.CXForm"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXForm.RedMultTerms">
            <summary>
            Gets or sets the red mult terms.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXForm.GreenMultTerms">
            <summary>
            Gets or sets the green mult terms.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXForm.BlueMultTerms">
            <summary>
            Gets or sets the blue mult terms.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXForm.RedAddTerms">
            <summary>
            Gets or sets the red add terms.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXForm.GreenAddTerms">
            <summary>
            Gets or sets the green add terms.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXForm.BlueAddTerms">
            <summary>
            Gets or sets the blue add terms.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXForm.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXForm.GetNumBits">
            <summary>
            Gets the num bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXForm.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXForm.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXForm.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData">
            <summary>
            CXFormWithAlphaData.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData"/> instance.
            </summary>
            <param name="redMultTerms">Red mult terms.</param>
            <param name="greenMultTerms">Green mult terms.</param>
            <param name="blueMultTerms">Blue mult terms.</param>
            <param name="alphaMultTerms">Alpha mult terms.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.RedAddTerms">
            <summary>
            Gets or sets the red add terms.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.GreenAddTerms">
            <summary>
            Gets or sets the green add terms.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.BlueAddTerms">
            <summary>
            Gets or sets the blue add terms.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.AlphaAddTerms">
            <summary>
            Gets or sets the alpha add terms.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.RedMultTerms">
            <summary>
            Gets or sets the red mult terms.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.GreenMultTerms">
            <summary>
            Gets or sets the green mult terms.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.BlueMultTerms">
            <summary>
            Gets or sets the blue mult terms.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.AlphaMultTerms">
            <summary>
            Gets or sets the alpha mult terms.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.HasAddTerms">
            <summary>
            Gets a value indicating whether this instance has add terms.
            </summary>
            <value>
            	<c>true</c> if this instance has add terms; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.HasMultTerms">
            <summary>
            Gets a value indicating whether this instance has mult terms.
            </summary>
            <value>
            	<c>true</c> if this instance has mult terms; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.GetNumBits">
            <summary>
            Gets the num bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CXFormWithAlphaData.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.FillStyleType">
            <summary>
            FillStyleType
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyleType.SolidFill">
            <summary>
            Solid Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyleType.LinearGradientFill">
            <summary>
            Linear Gradient Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyleType.RadialGradientFill">
            <summary>
            Radial Gradient Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyleType.RepeatingBitmapFill">
            <summary>
            Repeating Bitmap Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyleType.ClippedBitmapFill">
            <summary>
            Clipped Bitmap Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyleType.NonSmoothedRepeatingBitmap">
            <summary>
            Non-Smoothed Repeating Bitmap
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyleType.NonSmoothedClippedBitmap">
            <summary>
            Non-Smoothed Clipped Bitmap
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.FillStyle">
            <summary>
            FillStyle is the abstract class for the following classes:
            <see cref="T:SwfDotNet.IO.Tags.Types.SolidFill"/>, <see cref="T:SwfDotNet.IO.Tags.Types.GradientFill"/> and
            <see cref="T:SwfDotNet.IO.Tags.Types.BitmapFill"/>
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyle.fillStyleType">
            <summary>
            Fill Style type
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyle.rgbColor">
            <summary>
            Solid fill color
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyle.gradientMatrix">
            <summary>
            Gradient fill matrix
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyle.gradient">
            <summary>
            Gradients
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyle.bitmapId">
            <summary>
            Bitmap fill bitmap Id
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.FillStyle.bitmapMatrix">
            <summary>
            Bitmap fill transform matrix
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyle.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyle.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of the structure</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyle.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyle.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.GradientFill">
            <summary>
            GradientFill defines how a color changes across an area to 
            be filled with color.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientFill.#ctor(SwfDotNet.IO.Tags.Types.FillStyleType)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GradientFill"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientFill.#ctor(SwfDotNet.IO.Tags.Types.FillStyleType,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.GradientRecordCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GradientFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <param name="gradientTransform">Gradient transform.</param>
            <param name="gradients">Gradients.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientFill.#ctor(System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GradientFill"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientFill.#ctor(System.Byte,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.GradientRecordCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GradientFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <param name="gradientTransform">Gradient transform.</param>
            <param name="gradients">Gradients.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientFill.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GradientFill.GradientTransform">
            <summary>
            Gets or sets the gradient transform.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GradientFill.Gradients">
            <summary>
            Gets or sets the gradients.
            </summary>
            <value></value>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.SolidFill">
            <summary>
            SolidFill  defines a solid color that is used to fill an 
            enclosed area in a shape.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SolidFill.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.SolidFill"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SolidFill.#ctor(SwfDotNet.IO.Tags.Types.RGB)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.SolidFill"/> instance.
            </summary>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SolidFill.#ctor(SwfDotNet.IO.Tags.Types.RGBA)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.SolidFill"/> instance.
            </summary>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SolidFill.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SolidFill.FillColor">
            <summary>
            Gets or sets the color of the fill.
            </summary>
            <value></value>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.BitmapFill">
            <summary>
            BitmapFill is used to fill a shape with an image. 
            </summary>
            <remarks>
            <p>
            Two type of bitmap fill are supported:
            <ul>
            <li>
            <b>Clipped:</b> If the area to be filled is larger than the image 
            then the colour at the edge of the image is used to fill the 
            remainder of the shape.
            </li>
            <li>
            <b>Tiled:</b> If the area to be filled is larger than the image 
            then the image is tiled across the area to be filled.
            </li>
            </ul>
            </p>
            <p>
            When an image is loaded its width and height default to twips 
            rather than pixels. An image 300 x 200 pixels will be displayed as
            300 x 200 twips (15 x 10 pixels). Scaling the image by 20 
            (20 twips = 1 pixel) using the <see cref="T:SwfDotNet.IO.Tags.Types.Matrix"/> object will restore 
            it to its original size.
            </p>
            <p>
            The image is drawn with the top left corner placed at the origin 
            (0, 0) of the shape being filled. Depending on how the shape is drawn 
            the coordinate transform may also need to specify a translation to 
            place the image at the desired location.
            </p>
            <p>
            <b>When To Use ?</b>
            </p>
            <p>
            In addition to filling shapes with images that represent textures 
            or complex fill patterns the BitmapFill class is required to 
            display any image in a Flash file - image can only be displayed 
            in Flash inside a shape definition. The classes that define images 
            only contain the image data, not how it is displayed. To simply 
            display an image, the selected line style of a shape may be set 
            to zero so that the image is displayed without a border.
            </p>
            </remarks>
            <example>
            <p>
            The following code fragment centres the image in the centre of 
            the shape - assuming  the shape is drawn with the origin at the 
            centre. The Matrix constructor allows the translation and 
            scaling transform to be specified in a single step rather than 
            compositing the transforms.
            <code lang="C#">
            Matrix composite = new Matrix(-imageWidth/2, -imageHeight/2, 20.0, 20.0);
            fillStyles.Add(new BitmapFill(FillStyleType.ClippedBitmapFill, imageId, composite));
            </code>
            </p>
            </example>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapFill.#ctor(SwfDotNet.IO.Tags.Types.FillStyleType)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.BitmapFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapFill.#ctor(SwfDotNet.IO.Tags.Types.FillStyleType,System.UInt16,SwfDotNet.IO.Tags.Types.Matrix)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.BitmapFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <param name="bitmapId">Bitmap id.</param>
            <param name="bitmapTransform">Bitmap transform.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapFill.#ctor(System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.BitmapFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapFill.#ctor(System.Byte,System.UInt16,SwfDotNet.IO.Tags.Types.Matrix)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.BitmapFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <param name="bitmapId">Bitmap id.</param>
            <param name="bitmapTransform">Bitmap transform.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.BitmapFill.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.BitmapFill.BitmapId">
            <summary>
            Gets or sets the bitmap id.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.BitmapFill.BitmapTransform">
            <summary>
            Gets or sets the bitmap transform.
            </summary>
            <value></value>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.FillStyleCollection">
            <summary>
            FillStyleCollection is the typed collection
            for the FillStyle extended objects:
            <see cref="T:SwfDotNet.IO.Tags.Types.SolidFill"/>, <see cref="T:SwfDotNet.IO.Tags.Types.GradientFill"/> and
            <see cref="T:SwfDotNet.IO.Tags.Types.BitmapFill"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.FillStyleCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.#ctor(SwfDotNet.IO.Tags.Types.FillStyle[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.FillStyleCollection"/> instance.
            </summary>
            <param name="fillStyles">Fill styles.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.GetFillStyleFromType(System.Byte)">
            <summary>
            Gets the fill style from type.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.Add(SwfDotNet.IO.Tags.Types.FillStyle)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.AddRange(SwfDotNet.IO.Tags.Types.FillStyle[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.Remove(SwfDotNet.IO.Tags.Types.FillStyle)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.FillStyle)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.Contains(SwfDotNet.IO.Tags.Types.FillStyle)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.FillStyleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.FillStyleCollection.IndexOf(SwfDotNet.IO.Tags.Types.FillStyle)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.GlyphShapesCollection">
            <summary>
            GlyphShapesCollection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GlyphShapesCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.#ctor(SwfDotNet.IO.Tags.Types.ShapeRecordCollection[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ShapeRecordCollection"/> instance.
            </summary>
            <param name="shapes">Shapes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.UInt16)">
            <summary>
            Reads the data.
            </summary>
            <param name="reader">Reader.</param>
            <param name="numGlyphs">Num glyphs.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.GetLastOne">
            <summary>
            Gets the last ShapeRecordCollection of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.Add(SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.AddRange(SwfDotNet.IO.Tags.Types.ShapeRecordCollection[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.Remove(SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.Contains(SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesCollection.IndexOf(SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.GlyphShapesTable">
            <summary>
            GlyphShapesTable.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GlyphShapesTable"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GlyphShapesTable.Item(System.Char)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.ShapeRecordCollection"/> with the specified character.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GlyphShapesTable.IsWideCodes">
            <summary>
            Gets or sets a value indicating whether this instance is wide codes.
            </summary>
            <value>
            	<c>true</c> if this instance is wide codes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.Add(System.Char,SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Adds the specified character.
            </summary>
            <param name="character">Character.</param>
            <param name="glyphShapes">Glyph shapes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.Remove(System.Char)">
            <summary>
            Removes the specified character.
            </summary>
            <param name="character">Character.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.Contains(System.Char)">
            <summary>
            Test if containses the specified character.
            </summary>
            <param name="character">Character.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.GetCodesSizeOf">
            <summary>
            Gets the codes size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.GetGlyphsSizeOf">
            <summary>
            Gets the glyphs size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.UInt16)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="numGlyphs">Num glyphs.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.GetOrderedGlyphs(System.Char[])">
            <summary>
            Gets the ordered glyphs.
            </summary>
            <param name="orderedCodes">Ordered codes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.GetOrderedCodes">
            <summary>
            Gets the ordered codes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.GetCharIndex(System.Char)">
            <summary>
            Gets the char index.
            </summary>
            <param name="character">Character.</param>
            <returns>char index if found, -1 else</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphShapesTable.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.GradientRecordCollection">
            <summary>
            GradientRecordCollection class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GradientRecordCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.#ctor(SwfDotNet.IO.Tags.Types.GradientRecord[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GradientRecordCollection"/> instance.
            </summary>
            <param name="gradientRecords">Gradient records.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary file.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.Add(SwfDotNet.IO.Tags.Types.GradientRecord)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.AddRange(SwfDotNet.IO.Tags.Types.GradientRecord[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.Remove(SwfDotNet.IO.Tags.Types.GradientRecord)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.GradientRecord)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.Contains(SwfDotNet.IO.Tags.Types.GradientRecord)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GradientRecordCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecordCollection.IndexOf(SwfDotNet.IO.Tags.Types.GradientRecord)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.GradientRecord">
            <summary>
            Gradient Record
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GradientRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecord.#ctor(System.Byte,SwfDotNet.IO.Tags.Types.RGBColor)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GradientRecord"/> instance.
            </summary>
            <param name="ratio">Ratio.</param>
            <param name="color">Color.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GradientRecord.Ratio">
            <summary>
            Gets or sets the ratio.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GradientRecord.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecord.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecord.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object type</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecord.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GradientRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.KerningRecord">
            <summary>
            KerningRecord
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.KerningRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecord.#ctor(System.Boolean,System.UInt16,System.UInt16,System.Int16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.KerningRecord"/> instance.
            </summary>
            <param name="fontFlagsWideCodes">Font flags wide codes.</param>
            <param name="fontFlagsWideCode1">Font flags wide code1.</param>
            <param name="fontFlagsWideCode2">Font flags wide code2.</param>
            <param name="fontKerningAdjustement">Font kerning adjustement.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.KerningRecord.FontFlagsWideCodes">
            <summary>
            Gets or sets a value indicating whether [font flags wide codes].
            </summary>
            <value>
            	<c>true</c> if [font flags wide codes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.KerningRecord.FontFlagsWideCode1">
            <summary>
            Gets or sets the font flags wide code1.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.KerningRecord.FontFlagsWideCode2">
            <summary>
            Gets or sets the font flags wide code2.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.KerningRecord.FontKerningAdjustement">
            <summary>
            Gets or sets the font kerning adjustement.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecord.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.Boolean)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="fontFlagsWideCodes">Font flags wide codes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecord.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecord.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.KerningRecordCollection">
            <summary>
            KerningRecordCollection class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.KerningRecordCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.Boolean)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="fontFlagsWideCodes">Font flags wide codes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.Add(SwfDotNet.IO.Tags.Types.KerningRecord)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.AddRange(SwfDotNet.IO.Tags.Types.KerningRecord[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.Remove(SwfDotNet.IO.Tags.Types.KerningRecord)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.KerningRecord)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.Contains(SwfDotNet.IO.Tags.Types.KerningRecord)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.KerningRecordCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.KerningRecord"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.KerningRecordCollection.IndexOf(SwfDotNet.IO.Tags.Types.KerningRecord)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.LanguageCode">
            <summary>
            Language codes enum
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.LanguageCode.Latin">
            <summary>
            Latin 
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.LanguageCode.Japanese">
            <summary>
            Japanese
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.LanguageCode.Korean">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.LanguageCode.SimplifiedChinese">
            <summary>
            Simplified Chinese
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.LanguageCode.TraditionalChinese">
            <summary>
            Traditional Chinese
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.LineStyleCollection">
            <summary>
            LineStyleCollection class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.LineStyleCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.#ctor(SwfDotNet.IO.Tags.Types.LineStyle[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.LineStyleCollection"/> instance.
            </summary>
            <param name="lineStyles">Line styles.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of the structure</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.Add(SwfDotNet.IO.Tags.Types.LineStyle)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.AddRange(SwfDotNet.IO.Tags.Types.LineStyle[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.Remove(SwfDotNet.IO.Tags.Types.LineStyle)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.LineStyle)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.Contains(SwfDotNet.IO.Tags.Types.LineStyle)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.LineStyleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyleCollection.IndexOf(SwfDotNet.IO.Tags.Types.LineStyle)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.LineStyle">
            <summary>
            LineStyle class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyle.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyle.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.RGBColor)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> instance.
            </summary>
            <param name="width">Width.</param>
            <param name="rgb">Rgb.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyle.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyle.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyle.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.LineStyle.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.LineStyle.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.LineStyle.Rgb">
            <summary>
            Gets or sets the RGB.
            </summary>
            <value></value>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.Matrix">
            <summary>
            Matrix is used to specify two-dimensional coordinate transforms, 
            allowing an object to be scaled, rotated or moved without changing 
            the original definition of how the object is drawn.
            </summary>
            <remarks>
            <p>
            A two-dimensional transform is defined using a 3x3 matrix and the 
            new values for a pair of coordinates (x, y) are calculated using a 
            matrix multiplication (see Macromedia specifications).
            </p>
            <p>
            Different transformations such as scaling, rotation, shearing and 
            translation can be performed using the above matrix multiplication. 
            More complex transformations can be defined by performing successive 
            matrix multiplications in a process known as compositing. This allows 
            a complex transformations to performed on an object.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
            <example>
            <p>
            The Matrix provides a set of methods for generating the 
            matrices that will perform specific transformations. Methods are 
            provided that represent matrices for performing translation, scaling, 
            rotation and shearing transformations.
            <code lang="C#">
            Matrix transform = new Matrix();
            transform.Scale(2.0, 2.0); // scale(x,y)
            transform.Rotate(30.0);  // rotate(degrees)
            transform.Shear(1.2, 0.9);  // shear(x, y)
            </code>
            </p>
            <p>
            The composite method can be used to multiply two matrices together to 
            create complex transformations though successive compositing steps. 
            For example to place a new object on the screen first rotating it by 
            30 degrees and scaling it to twice its original size the required transform 
            can be constructed using the following steps:
            <code lang="C#">
            Matrix transform = new Matrix();
            transform.Scale(2.0, 2.0);
            transform.Rotate(30.0);
            int layer = 1;
            ushort identifier = swf.GetNewDefineId();
            DefineShapeTag shape = new DefineShapeTag(identifier, ...);
            PlaceObject2Tag placeShape = new PlaceObject2Tag(identifier, layer, transform);
            </code>
            </p>
            <p>
            Compositing transforms are not commutative, the order in which 
            transformations are applied will affect the final result. 
            For example consider the following pair if transforms:
            <code lang="C#">
            Matrix transform = new Matrix();
            transform.Scale(2.0, 2.0);
            transform.Translate(100, 100);
            </code>
            The composite transform places an object at the coordinates (100,100) then 
            scales it to twice its original size. If the transform was composited in 
            the opposite order, then the coordinates for the object's location would 
            also be scaled, placing the object at (200,200).
            </p>
            </example>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Matrix"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Matrix"/> instance.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Matrix"/> instance.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="scaleX">Scale X.</param>
            <param name="scaleY">Scale Y.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.#ctor(System.Single[0:,0:])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Matrix"/> instance.
            </summary>
            <param name="matrix">Matrix.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Matrix.MatrixData">
            <summary>
            Gets the matrix data.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.Translate(System.Int32,System.Int32)">
            <summary>
            Sets the translation points of the transform.
            </summary>
            <param name="x">The x-coordinate where the object will be displayed.</param>
            <param name="y">The y-coordinate where the object will be displayed.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.Scale(System.Double,System.Double)">
            <summary>
            Sets the scaling factor for the transform.
            </summary>
            <param name="x">Value to scale the object in the x direction.</param>
            <param name="y">Value to scale the object in the y direction.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.ConvertToRadians(System.Double)">
            <summary>
            Converts to radians.
            </summary>
            <param name="angle">Angle.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.Rotate(System.Double)">
            <summary>
            Sets the angle which the transform will rotate an object.
            </summary>
            <param name="angle">Angle value, in degrees, to rotate the object clockwise.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.Shear(System.Double,System.Double)">
            <summary>
            Sets the shearing factor for the transform.
            </summary>
            <param name="x">Value to shear the object in the x direction.</param>
            <param name="y">Value to shear the object in the y direction.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.TransformPoint(System.Int32,System.Int32)">
            <summary>
            Applies the transformation to the coordinates of a point.
            </summary>
            <param name="x">X-coordinate of a point.</param>
            <param name="y">Y-coordinate of a point.</param>
            <returns>An array containing the transformed point.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.IsUnityTransform">
            <summary>
            Get if the matrix transformation will not change the 
            physical appearance or location of a shape.
            </summary>
            <returns>
            	<c>true</c> if [is unity transform]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.HasScale">
            <summary>
            Determines whether this instance has scale.
            </summary>
            <returns>
            	<c>true</c> if this instance has scale; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.HasRotate">
            <summary>
            Determines whether this instance has rotate.
            </summary>
            <returns>
            	<c>true</c> if this instance has rotate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.HasTranslate">
            <summary>
            Determines whether this instance has translate.
            </summary>
            <returns>
            	<c>true</c> if this instance has translate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.Composite(System.Single[0:,0:])">
            <summary>
            Composites the specified m.
            </summary>
            <param name="m">Matrix.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.GetScaleBitsNum">
            <summary>
            Gets the scale bits num.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.GetRotateBitsNum">
            <summary>
            Gets the rotate bits num.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.GetTranslateBitsNum">
            <summary>
            Gets the translate bits num.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="binaryWriter">Binary writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Matrix.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphFillStyleType">
            <summary>
            MorphFillStyleType enumeration
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyleType.SolidFill">
            <summary>
            Solid Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyleType.LinearGradientFill">
            <summary>
            Liear Gradient Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyleType.RadialGradientFill">
            <summary>
            Radial Gradient Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyleType.RepeatingBitmap">
            <summary>
            Repeating Bitmap
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyleType.ClippedBitmapFill">
            <summary>
            Clipped Bitmap Fill
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyleType.NonSmoothedRepeatingBitmap">
            <summary>
            Non-Smoothed Repeating Bitmap
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyleType.NonSmoothedClippedBitmap">
            <summary>
            Non-Smoothed Clipped Bitmap
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphFillStyle">
            <summary>
            MorphFillStyle
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.fillStyleType">
            <summary>
            Fill Style Type
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.startColor">
            <summary>
            Start Color
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.endColor">
            <summary>
            End Color
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.startGradientMatrix">
            <summary>
            Start Gradient Matrix
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.endGradientMatrix">
            <summary>
            End Gradient Matrix
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.gradient">
            <summary>
            Morph Gradients collection
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.bitmapId">
            <summary>
            Bitmap Id
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.startBitmapMatrix">
            <summary>
            Start Bitmap Matrix
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.MorphFillStyle.endBitmapMatrix">
            <summary>
            End Bitmap Matrix
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphFillStyle.FillStyleType">
            <summary>
            Gets or sets the fill style type.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyle.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyle.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyle.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyle.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphSolidFill">
            <summary>
            MorphSolidFill
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphSolidFill.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphSolidFill"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphSolidFill.#ctor(SwfDotNet.IO.Tags.Types.RGBA,SwfDotNet.IO.Tags.Types.RGBA)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphSolidFill"/> instance.
            </summary>
            <param name="startColor">Color of the start.</param>
            <param name="endColor">Color of the end.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphSolidFill.StartColor">
            <summary>
            Gets or sets the color of the start.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphSolidFill.EndColor">
            <summary>
            Gets or sets the color of the end.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphSolidFill.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphGradientFill">
            <summary>
            MorphGradientFill
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientFill.#ctor(SwfDotNet.IO.Tags.Types.MorphFillStyleType)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphGradientFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientFill.#ctor(System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphGradientFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientFill.#ctor(SwfDotNet.IO.Tags.Types.MorphFillStyleType,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.MorphGradientCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphGradientFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <param name="startGradientMatrix">Start gradient matrix.</param>
            <param name="endGradientMatrix">End gradient matrix.</param>
            <param name="gradients">Gradients.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientFill.#ctor(System.Byte,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.MorphGradientCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphGradientFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <param name="startGradientMatrix">Start gradient matrix.</param>
            <param name="endGradientMatrix">End gradient matrix.</param>
            <param name="gradients">Gradients.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphGradientFill.StartGradientMatrix">
            <summary>
            Gets or sets the start gradient matrix.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphGradientFill.EndGradientMatrix">
            <summary>
            Gets or sets the end gradient matrix.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphGradientFill.Gradients">
            <summary>
            Gets or sets the gradient.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientFill.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphBitmapFill">
            <summary>
            MorphBitmapFill
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphBitmapFill.#ctor(SwfDotNet.IO.Tags.Types.MorphFillStyleType)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphBitmapFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphBitmapFill.#ctor(System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphBitmapFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphBitmapFill.#ctor(SwfDotNet.IO.Tags.Types.MorphFillStyleType,System.UInt16,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.Matrix)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphBitmapFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <param name="bitmapId">Bitmap id.</param>
            <param name="startBitmapMatrix">Start bitmap matrix.</param>
            <param name="endBitmapMatrix">End bitmap matrix.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphBitmapFill.#ctor(System.Byte,System.UInt16,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.Matrix)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphBitmapFill"/> instance.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <param name="bitmapId">Bitmap id.</param>
            <param name="startBitmapMatrix">Start bitmap matrix.</param>
            <param name="endBitmapMatrix">End bitmap matrix.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphBitmapFill.BitmapId">
            <summary>
            Gets or sets the bitmap id.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphBitmapFill.StartBitmapMatrix">
            <summary>
            Gets or sets the start bitmap matrix.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphBitmapFill.EndBitmapMatrix">
            <summary>
            Gets or sets the end bitmap matrix.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphBitmapFill.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection">
            <summary>
            MorphFillStyleCollection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.#ctor(SwfDotNet.IO.Tags.Types.MorphFillStyle[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection"/> instance.
            </summary>
            <param name="fillStyles">Fill styles.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.GetMorphFillStyleFromType(System.Byte)">
            <summary>
            Gets the moprh fill style object from type.
            </summary>
            <param name="fillStyleType">Fill style type.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.Add(SwfDotNet.IO.Tags.Types.MorphFillStyle)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.AddRange(SwfDotNet.IO.Tags.Types.MorphFillStyle[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.Remove(SwfDotNet.IO.Tags.Types.MorphFillStyle)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.MorphFillStyle)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.Contains(SwfDotNet.IO.Tags.Types.MorphFillStyle)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphFillStyleCollection.IndexOf(SwfDotNet.IO.Tags.Types.MorphFillStyle)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphGradRecord">
            <summary>
            MorphGradRecord
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphGradRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradRecord.#ctor(System.Byte,SwfDotNet.IO.Tags.Types.RGBA,System.Byte,SwfDotNet.IO.Tags.Types.RGBA)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphGradRecord"/> instance.
            </summary>
            <param name="startRatio">Start ratio.</param>
            <param name="startColor">Color of the start.</param>
            <param name="endRatio">End ratio.</param>
            <param name="endColor">Color of the end.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphGradRecord.StartRatio">
            <summary>
            Gets or sets the start ratio.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphGradRecord.StartColor">
            <summary>
            Gets or sets the color of the start.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphGradRecord.EndRatio">
            <summary>
            Gets or sets the end ratio.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphGradRecord.EndColor">
            <summary>
            Gets or sets the color of the end.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradRecord.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradRecord.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this structure</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradRecord.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphGradientCollection">
            <summary>
            MorphGradientCollection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphGradientCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.#ctor(SwfDotNet.IO.Tags.Types.MorphGradRecord[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphGradientCollection"/> instance.
            </summary>
            <param name="graphRecords">Graph records.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.Add(SwfDotNet.IO.Tags.Types.MorphGradRecord)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.AddRange(SwfDotNet.IO.Tags.Types.MorphGradRecord[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.Remove(SwfDotNet.IO.Tags.Types.MorphGradRecord)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.MorphGradRecord)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.Contains(SwfDotNet.IO.Tags.Types.MorphGradRecord)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphGradientCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphGradientCollection.IndexOf(SwfDotNet.IO.Tags.Types.MorphGradRecord)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphLineStyle">
            <summary>
            MorphLineStyle
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyle.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphLineStyle"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyle.#ctor(System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.RGBA,SwfDotNet.IO.Tags.Types.RGBA)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphLineStyle"/> instance.
            </summary>
            <param name="startWith">Start with.</param>
            <param name="endWith">End with.</param>
            <param name="startColor">Color of the start.</param>
            <param name="endColor">Color of the end.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyle.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyle.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyle.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyle.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection">
            <summary>
            MorphLineStyleCollection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.#ctor(SwfDotNet.IO.Tags.Types.MorphLineStyle[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection"/> instance.
            </summary>
            <param name="morphLineStyles">Morph line styles.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.Add(SwfDotNet.IO.Tags.Types.MorphLineStyle)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.AddRange(SwfDotNet.IO.Tags.Types.MorphLineStyle[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.Remove(SwfDotNet.IO.Tags.Types.MorphLineStyle)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.MorphLineStyle)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.Contains(SwfDotNet.IO.Tags.Types.MorphLineStyle)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.MorphLineStyleCollection.IndexOf(SwfDotNet.IO.Tags.Types.MorphLineStyle)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.Pix">
            <summary>
            Abstract Pix class.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Pix.PixelColor">
            <summary>
            Gets the color of the pixel.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.Pix15">
            <summary>
            Pix15
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix15.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Pix15"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix15.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Pix15"/> instance.
            </summary>
            <param name="red">Red.</param>
            <param name="green">Green.</param>
            <param name="blue">Blue.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix15.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Pix15"/> instance.
            </summary>
            <param name="bytes">Bytes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix15.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this structure</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix15.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix15.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary reader.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix15.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Pix15.PixelColor">
            <summary>
            Gets the color of the pixel.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.Pix24">
            <summary>
            Pix24
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix24.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Pix24"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Pix24"/> instance.
            </summary>
            <param name="pix24Red">Pix24 red.</param>
            <param name="pix24Green">Pix24 green.</param>
            <param name="pix24Blue">Pix24 blue.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix24.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this structure</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix24.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix24.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary reader.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Pix24.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Pix24.PixelColor">
            <summary>
            Gets the color of the pixel.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.Rect">
            <summary>
            Rect
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Rect.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Rect"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Rect"/> instance.
            </summary>
            <param name="xMin">X min (in twips unit: 1 px = 20 twips).</param>
            <param name="yMin">Y min (in twips unit: 1 px = 20 twips).</param>
            <param name="xMax">X max (in twips unit: 1 px = 20 twips).</param>
            <param name="yMax">Y max (in twips unit: 1 px = 20 twips).</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Rect.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.Rect"/> instance.
            </summary>
            <param name="xMax">X max (in twips unit: 1 px = 20 twips).</param>
            <param name="yMax">Y max (in twips unit: 1 px = 20 twips).</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Rect.Rectangle">
            <summary>
            Gets or sets the pixel rectangle.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Rect.XMin">
            <summary>
            Gets or sets the X min in twips unit.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Rect.XMax">
            <summary>
            Gets or sets the X max in twips unit.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Rect.YMin">
            <summary>
            Gets or sets the Y min in twips unit.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.Rect.YMax">
            <summary>
            Gets or sets the Y max in twips unit.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Rect.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary file
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Rect.GetNumBits">
            <summary>
            Gets the num bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Rect.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Rect.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.Rect.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.RectCollection">
            <summary>
            RectCollection class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.RectCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.UInt16)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="numGlyphs">Num glyphs.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.Add(SwfDotNet.IO.Tags.Types.Rect)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.AddRange(SwfDotNet.IO.Tags.Types.Rect[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.Remove(SwfDotNet.IO.Tags.Types.Rect)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.Rect)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.Contains(SwfDotNet.IO.Tags.Types.Rect)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.RectCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.Rect"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RectCollection.IndexOf(SwfDotNet.IO.Tags.Types.Rect)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.RGBColor">
            <summary>
            RGBColor class
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.RGBColor.red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.RGBColor.green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.RGBColor.blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.RGBColor"/> instance.
            </summary>
            <param name="red">Red.</param>
            <param name="green">Green.</param>
            <param name="blue">Blue.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBColor.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.RGBColor"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBColor.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBColor.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBColor.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from the binary reader.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBColor.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBColor.FromWinColor(System.Drawing.Color)">
            <summary>
            Gets a RGB or RGBA object from a windows color.
            </summary>
            <param name="color">Color.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.RGB">
            <summary>
            RGB
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGB.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.RGB"/> instance.
            </summary>
            <param name="red">Red.</param>
            <param name="green">Green.</param>
            <param name="blue">Blue.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGB.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.RGB"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGB.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGB.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGB.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary reader.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGB.FromWinColor(System.Drawing.Color)">
            <summary>
            Gets a RGB object from a windows color.
            </summary>
            <param name="color">Color.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGB.ToWinColor">
            <summary>
            Transform a RGB object to a win color object
            </summary>
            <returns>GDI Color formated</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGB.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.RGBA">
            <summary>
            RGBA
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.RGBA.alpha">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBA.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.RGBA"/> instance.
            </summary>
            <param name="red">Red.</param>
            <param name="green">Green.</param>
            <param name="blue">Blue.</param>
            <param name="alpha">Alpha.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBA.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.RGBA"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBA.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBA.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBA.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary reader.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBA.ToWinColor">
            <summary>
            Transform a RGBA color to a win color
            </summary>
            <returns>GDI Color formated</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBA.FromWinColor(System.Drawing.Color)">
            <summary>
            Gets a RGB object from a windows color.
            </summary>
            <param name="color">Color.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.RGBA.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ShapeRecord">
            <summary>
            ShapeRecord class
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.ShapeRecord.typeFlag">
            <summary>
            Type of shape record, stored as a flag
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ShapeRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecord.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ShapeRecord"/> instance.
            </summary>
            <param name="typeFlag">Type flag.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecord.GetBitSizeOf(System.Int32)">
            <summary>
            Gets the bit size of.
            </summary>
            <param name="currentLength">Length of the current.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecord.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.NonEdgeRecord">
            <summary>
            NonEdgeRecord class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.NonEdgeRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.NonEdgeRecord"/> instance.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.EndShapeRecord">
            <summary>
            EndShapeRecord defines the end of a shape sequence.
            </summary>
            <remarks>
            <p>
            When this object is readed by the Flash Player, it stop to 
            draw the current shape records.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.EndShapeRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.EndShapeRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.EndShapeRecord.GetBitSizeOf(System.Int32)">
            <summary>
            Gets the bit size of.
            </summary>
            <param name="currentLength">Length of the current.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.EndShapeRecord.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.EndShapeRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.StyleChangeRecord">
            <summary>
            StyleChangeRecord is used to change the drawing environment 
            when a shape is drawn. 
            </summary>
            <remarks>
            <p>
            Three operations can be performed:
            <ul>
            <li>Select a line style or fill style.</li>
            <li>Move the current drawing point.</li>
            <li>Define a new set of line and fill styles.</li>
            </ul>
            </p>
            <p>
            An StyleChangeRecord object can specify one or more of the operations 
            rather than specifying them in separate StyleChangeRecord objects - compacting 
            the size of the binary data when the object is encoded. Conversely if 
            an operation is not defined then the values may be omitted.
            </p>
            <p>
            A new drawing point is specified using the absolute x and y coordinates. 
            If an StyleChangeRecord object is the first in a shape then the current 
            drawing point is the origin of the shape (0,0).
            </p>
            <p>
            New fill and line styles can be added to the StyleChangeRecord object 
            to change the way shapes are drawn.
            </p>
            <p>
            This was introduced in Flash 1.
            </p>
            </remarks>
            <example>
            
            </example>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.StyleChangeRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.StyleChangeRecord"/> instance.
            </summary>
            <param name="moveX">Move X.</param>
            <param name="moveY">Move Y.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.#ctor(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.StyleChangeRecord"/> instance.
            </summary>
            <param name="moveX">Move X.</param>
            <param name="moveY">Move Y.</param>
            <param name="fillStyle1">Fill style1.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.StyleChangeRecord"/> instance.
            </summary>
            <param name="lineStyle">Line style.</param>
            <param name="fillStyle0">Fill style0.</param>
            <param name="fillStyle1">Fill style1.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.#ctor(SwfDotNet.IO.Tags.Types.FillStyleCollection,SwfDotNet.IO.Tags.Types.LineStyleCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.StyleChangeRecord"/> instance.
            </summary>
            <param name="fillStyles">Fill styles.</param>
            <param name="lineStyles">Line styles.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.StyleChangeRecord"/> instance.
            </summary>
            <param name="lineStyle">Line style.</param>
            <param name="fillStyle0">Fill style0.</param>
            <param name="fillStyle1">Fill style1.</param>
            <param name="moveX">Move X.</param>
            <param name="moveY">Move Y.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StyleChangeRecord.FillStyles">
            <summary>
            Gets or sets the fill styles.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StyleChangeRecord.LineStyles">
            <summary>
            Gets or sets the line styles.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StyleChangeRecord.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StyleChangeRecord.FillStyle1">
            <summary>
            Gets or sets the fill style1.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StyleChangeRecord.FillStyle0">
            <summary>
            Gets or sets the fill style0.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StyleChangeRecord.MoveDeltaX">
            <summary>
            Gets or sets the move delta X.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StyleChangeRecord.MoveDeltaY">
            <summary>
            Gets or sets the move delta Y.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.Byte,System.Byte@,System.Byte@,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="flags">Flags.</param>
            <param name="numFillBits">Num fill bits.</param>
            <param name="numLineBits">Num line bits.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.GetBitSizeOf(System.Int32)">
            <summary>
            see <see cref="M:SwfDotNet.IO.Tags.Types.ShapeRecord.GetBitSizeOf(System.Int32)"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.HasNewStyle">
            <summary>
            Determines whether [has new style].
            </summary>
            <returns>
            	<c>true</c> if [has new style]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.HasLineStyle">
            <summary>
            Determines whether [has line style].
            </summary>
            <returns>
            	<c>true</c> if [has line style]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.HasFillStyle1">
            <summary>
            Determines whether [has fill style1].
            </summary>
            <returns>
            	<c>true</c> if [has fill style1]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.HasFillStyle0">
            <summary>
            Determines whether [has fill style0].
            </summary>
            <returns>
            	<c>true</c> if [has fill style0]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.HasMoveTo">
            <summary>
            Determines whether [has move to].
            </summary>
            <returns>
            	<c>true</c> if [has move to]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StyleChangeRecord.GetMoveNumBits">
            <summary>
            Gets the move num bits.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.EdgeRecord">
            <summary>
            EdgeRecord
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.EdgeRecord.straightFlag">
            <summary>
            Flag to know if the edge record is a straight record
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.EdgeRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.EdgeRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.EdgeRecord.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.EdgeRecord"/> instance.
            </summary>
            <param name="straightFlag">Straight flag.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.EdgeRecord.GetBitSizeOf(System.Int32)">
            <summary>
            see <see cref="M:SwfDotNet.IO.Tags.Types.ShapeRecord.GetBitSizeOf(System.Int32)"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.EdgeRecord.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.StraightEdgeRecord">
            <summary>
            StraightEdgeRecord defines a straight line.
            </summary>
            <remarks>
            <p>
            The line is drawn from the current drawing point to the end 
            point specified in the StraightEdgeRecord object which is specified 
            relative to the current drawing point. Once the line is drawn, 
            the end of the line is now the current drawing point.
            </p>
            <p>
            The relative coordinates are specified in twips 
            (where 20 twips = 1 pixel) and must be in the range -65536..65535.
            </p>
            <p>
            Lines are drawn with rounded corners and line ends. Different 
            join and line end styles can be created by drawing line segments 
            as a sequence of filled shapes. With 1 twip equal to 1/20th 
            of a pixel this technique can easily be used to draw the 
            narrowest of visible lines.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.StraightEdgeRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.StraightEdgeRecord"/> instance.
            </summary>
            <param name="deltaX">Delta X.</param>
            <param name="deltaY">Delta Y.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.DeltaY">
            <summary>
            Gets or sets the delta Y.
            That's y-coordinate of the end point of the line, relative 
            to the current drawing point.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.DeltaX">
            <summary>
            Gets or sets the delta X.
            That's x-coordinate of the end point of the line, relative 
            to the current drawing point.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.Byte)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="flags">Flags.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.GetNumBits">
            <summary>
            Gets the num bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.HasGeneralLine">
            <summary>
            Determines whether [has general line].
            </summary>
            <returns>
            	<c>true</c> if [has general line]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.HasVerticalLine">
            <summary>
            Determines whether [has vertical line].
            </summary>
            <returns>
            	<c>true</c> if [has vertical line]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.GetBitSizeOf(System.Int32)">
            <summary>
            see <see cref="M:SwfDotNet.IO.Tags.Types.ShapeRecord.GetBitSizeOf(System.Int32)"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.StraightEdgeRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord">
            <summary>
            CurvedEdgeRecord is used to define a curve. 
            Curved lines are constructed using a Quadratic Bezier curve.
            </summary>
            <remarks>
            <p>
            The curve is specified using two points relative to the current 
            drawing position, an off-curve control point and an on-curve anchor 
            point which defines the end-point of the curve.
            </p>
            <p>
            To define a curve the points are defined as pairs of relative coordinates. 
            The control point is specified relative to the current drawing point 
            and the anchor point is specified relative to the control point. 
            Once the line is drawn, the anchor point becomes the current drawing 
            point.
            </p>
            <p>
            The relative coordinates are specified in twips (where 20 twips = 1 pixel) 
            and must be in the range -65536..65535.
            </p>
            <p>
            The CurvedEdge record was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord"/> instance.
            </summary>
            <param name="controlDeltaX">The x-coordinate of the control point relative to the current drawing point.</param>
            <param name="controlDeltaY">The y-coordinate of the control point relative to the current drawing point.</param>
            <param name="anchorDeltaX">The x-coordinate of the anchor point relative to the control point.</param>
            <param name="anchorDeltaY">The y-coordinate of the anchor point relative to the control point.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.AnchorDeltaY">
            <summary>
            Gets or sets the anchor delta Y.
            This is the y-coordinate of the anchor point relative 
            to the control point.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.AnchorDeltaX">
            <summary>
            Gets or sets the anchor delta X.
            This is the x-coordinate of the anchor point relative 
            to the control point.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.ControlDeltaX">
            <summary>
            Gets or sets the control delta X.
            This is the x-coordinate of the control point relative 
            to the current drawing point.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.ControlDeltaY">
            <summary>
            Gets or sets the control delta Y.
            This is the y-coordinate of the control point relative 
            to the current drawing point.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.Byte)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="flags">Flags.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.GetNumBits">
            <summary>
            Gets the num bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.GetBitSizeOf(System.Int32)">
            <summary>
            see <see cref="M:SwfDotNet.IO.Tags.Types.ShapeRecord.GetBitSizeOf(System.Int32)"/>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.CurvedEdgeRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ShapeRecordCollection">
            <summary>
            ShapeRecordCollection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ShapeRecordCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.#ctor(SwfDotNet.IO.Tags.Types.ShapeRecord[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ShapeRecordCollection"/> instance.
            </summary>
            <param name="shapes">Shapes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.GetLastOne">
            <summary>
            Gets the last ShapeRecord of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.Add(SwfDotNet.IO.Tags.Types.ShapeRecord)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.AddRange(SwfDotNet.IO.Tags.Types.ShapeRecord[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.AddRange(SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.Remove(SwfDotNet.IO.Tags.Types.ShapeRecord)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.ShapeRecord)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.Contains(SwfDotNet.IO.Tags.Types.ShapeRecord)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeRecordCollection.IndexOf(SwfDotNet.IO.Tags.Types.ShapeRecord)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ShapeWithStyle">
            <summary>
            ShapeWithStyle class
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.ShapeWithStyle.NumFillBits">
            <summary>
            Current number of fill bits
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.ShapeWithStyle.NumLineBits">
            <summary>
            Current number of line bits
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeWithStyle.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ShapeWithStyle"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeWithStyle.#ctor(SwfDotNet.IO.Tags.Types.FillStyleCollection,SwfDotNet.IO.Tags.Types.LineStyleCollection,SwfDotNet.IO.Tags.Types.ShapeRecordCollection)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ShapeWithStyle"/> instance.
            </summary>
            <param name="fillStyleArray">Fill style array.</param>
            <param name="lineStyleArray">Line style array.</param>
            <param name="shapes">Shapes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeWithStyle.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ShapeWithStyle.FillStyleArray">
            <summary>
            Gets the fill style array.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ShapeWithStyle.LineStyleArray">
            <summary>
            Gets the line style array.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ShapeWithStyle.Shapes">
            <summary>
            Gets the shapes.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeWithStyle.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,SwfDotNet.IO.Tags.ShapeType)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="shapeType">Shape type.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeWithStyle.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeWithStyle.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShapeWithStyle.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ShortCollection">
            <summary>
            ShortCollection class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ShortCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.UInt16)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="numGlyphs">Num glyphs.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.Add(System.Int16)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.AddRange(System.Int16[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.Remove(System.Int16)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.Insert(System.Int32,System.Int16)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.Contains(System.Int16)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ShortCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.TextRecord"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ShortCollection.IndexOf(System.Int16)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.SoundInfo">
            <summary>
            SoundInfo
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundInfo.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.SoundInfo"/> instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.HasOutPoint">
            <summary>
            Gets a value indicating whether this instance has out point.
            </summary>
            <value>
            	<c>true</c> if this instance has out point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.HasInPoint">
            <summary>
            Gets a value indicating whether this instance has in point.
            </summary>
            <value>
            	<c>true</c> if this instance has in point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.HasLoops">
            <summary>
            Gets a value indicating whether this instance has loops.
            </summary>
            <value>
            	<c>true</c> if this instance has loops; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.HasEnvelope">
            <summary>
            Gets a value indicating whether this instance has envelope.
            </summary>
            <value>
            	<c>true</c> if this instance has envelope; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.EnvelopeRecord">
            <summary>
            Gets the envelope record.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.OutPoint">
            <summary>
            Gets or sets the out point.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.InPoint">
            <summary>
            Gets or sets the in point.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.LoopCount">
            <summary>
            Gets or sets the loop count.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.SyncNoMultiple">
            <summary>
            Gets or sets a value indicating whether [sync no multiple].
            </summary>
            <value>
            	<c>true</c> if [sync no multiple]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundInfo.SyncStop">
            <summary>
            Gets or sets a value indicating whether [sync stop].
            </summary>
            <value>
            	<c>true</c> if [sync stop]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundInfo.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundInfo.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundInfo.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundInfo.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.SoundEnvelope">
            <summary>
            SoundEnvelope
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelope.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.SoundEnvelope"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelope.#ctor(System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.SoundEnvelope"/> instance.
            </summary>
            <param name="pos44">Pos44.</param>
            <param name="leftLevel">Left level.</param>
            <param name="rightLevel">Right level.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundEnvelope.RightLevel">
            <summary>
            Gets or sets the right level.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundEnvelope.LeftLevel">
            <summary>
            Gets or sets the left level.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundEnvelope.Pos44">
            <summary>
            Gets or sets the pos44.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelope.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelope.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelope.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelope.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection">
            <summary>
            SoundEnvelopeCollection class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.Add(SwfDotNet.IO.Tags.Types.SoundEnvelope)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.AddRange(SwfDotNet.IO.Tags.Types.SoundEnvelope[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.Remove(SwfDotNet.IO.Tags.Types.SoundEnvelope)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.SoundEnvelope)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.Contains(SwfDotNet.IO.Tags.Types.SoundEnvelope)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.SoundEnvelope"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.SoundEnvelopeCollection.IndexOf(SwfDotNet.IO.Tags.Types.SoundEnvelope)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.GlyphEntry">
            <summary>
            GlyphEntry
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntry.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GlyphEntry"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntry.#ctor(System.UInt32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GlyphEntry"/> instance.
            </summary>
            <param name="glyphIndex">Glyph index.</param>
            <param name="glyphAdvance">Glyph advance.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntry.#ctor(System.Char)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GlyphEntry"/> instance.
            </summary>
            <param name="character">Character.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GlyphEntry.GlyphCharacter">
            <summary>
            Gets or sets the glyph character.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GlyphEntry.GlyphIndex">
            <summary>
            Gets or sets the glyph index.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GlyphEntry.GlyphAdvance">
            <summary>
            Gets or sets the glyph advance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntry.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntry.GetBitsSizeOf">
            <summary>
            Gets the size of in bits number
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntry.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntry.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.GlyphEntryCollection">
            <summary>
            GlyphEntryCollection
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.GlyphEntryCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.Add(SwfDotNet.IO.Tags.Types.GlyphEntry)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.AddRange(SwfDotNet.IO.Tags.Types.GlyphEntry[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.Remove(SwfDotNet.IO.Tags.Types.GlyphEntry)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.GlyphEntry)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.Contains(SwfDotNet.IO.Tags.Types.GlyphEntry)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.LineStyle"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.GlyphEntryCollection.IndexOf(SwfDotNet.IO.Tags.Types.GlyphEntry)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.TextRecord">
            <summary>
            Text Record class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.TextRecord"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.TextRecord.FontId">
            <summary>
            Gets or sets the font id.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.TextRecord.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.TextRecord.XOffset">
            <summary>
            Gets or sets the X offset.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.TextRecord.YOffset">
            <summary>
            Gets or sets the Y offset.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.TextRecord.TextHeight">
            <summary>
            Gets or sets the height of the text.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.TextRecord.GlyphEntries">
            <summary>
            Gets the glyph entries.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader,System.Boolean@,SwfDotNet.IO.Tags.TagCodeEnum)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
            <param name="endOfRecordsFlag">End of records flag.</param>
            <param name="tagCodeEnum">Tag code enum.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>SIze of this object</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes with the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.HasColor">
            <summary>
            Determines whether this instance has color.
            </summary>
            <returns>
            	<c>true</c> if this instance has color; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.HasFont">
            <summary>
            Determines whether this instance has font.
            </summary>
            <returns>
            	<c>true</c> if this instance has font; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.HasXOffset">
            <summary>
            Determines whether [has X offset].
            </summary>
            <returns>
            	<c>true</c> if [has X offset]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.HasYOffset">
            <summary>
            Determines whether [has Y offset].
            </summary>
            <returns>
            	<c>true</c> if [has Y offset]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.HasStyle">
            <summary>
            Determines whether this instance has style.
            </summary>
            <returns>
            	<c>true</c> if this instance has style; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.GetGlyphBits">
            <summary>
            Gets the glyph bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecord.GetAdvanceBits">
            <summary>
            Gets the advance bits.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.TextRecordCollection">
            <summary>
            TextRecordCollection class
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.TextRecordCollection.GLYPH_BITS">
            <summary>
            Glyph bits number
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.Types.TextRecordCollection.ADVANCE_BITS">
            <summary>
            Advance bits number
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecordCollection.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.TextRecordCollection"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecordCollection.Add(SwfDotNet.IO.Tags.Types.TextRecord)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecordCollection.AddRange(SwfDotNet.IO.Tags.Types.TextRecord[])">
            <summary>
            Adds the range.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecordCollection.Remove(SwfDotNet.IO.Tags.Types.TextRecord)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecordCollection.Insert(System.Int32,SwfDotNet.IO.Tags.Types.TextRecord)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecordCollection.Contains(SwfDotNet.IO.Tags.Types.TextRecord)">
            <summary>
            Containses the specified value.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.TextRecordCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SwfDotNet.IO.Tags.Types.TextRecord"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.TextRecordCollection.IndexOf(SwfDotNet.IO.Tags.Types.TextRecord)">
            <summary>
            Get the index of.
            </summary>
            <param name="value">Value.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.VideoPacket">
            <summary>
            Abstract Video Packet class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.VideoPacket.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>The size</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.VideoPacket.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.VideoPacket.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.VideoPacket.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.H263VideoPacket">
            <summary>
            H263VideoPacket class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.H263VideoPacket.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.H263VideoPacket"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.H263VideoPacket.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.H263VideoPacket.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.H263VideoPacket.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.H263VideoPacket.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ScreenVideoPacket">
            <summary>
            ScreenVideoPacket class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ScreenVideoPacket"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SwfDotNet.IO.Tags.Types.ImageBlock[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ScreenVideoPacket"/> instance.
            </summary>
            <param name="blockWidth">Width of the block.</param>
            <param name="imageWidth">Width of the image.</param>
            <param name="blockHeight">Height of the block.</param>
            <param name="imageHeight">Height of the image.</param>
            <param name="blocks">Blocks.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.Blocks">
            <summary>
            Gets or sets the blocks.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.ImageHeight">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.ImageWidth">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.BlockHeight">
            <summary>
            Gets or sets the height of the block.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.BlockWidth">
            <summary>
            Gets or sets the width of the block.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from the binary reader.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ScreenVideoPacket.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.Types.ImageBlock">
            <summary>
            Video ImageBlock class
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ImageBlock.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ImageBlock"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ImageBlock.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.Types.ImageBlock"/> instance.
            </summary>
            <param name="data">Data.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.Types.ImageBlock.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ImageBlock.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>size of the structure</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ImageBlock.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Writes to a binary writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.Types.ImageBlock.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary reader.
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.JpegTableTag">
            <summary>
            JPEGTableTag defines an encoding table for JPEG images. 
            </summary>
            <remarks>
            <p>
            The encoding table is shared between all images defined 
            using the DefineBitsTag class so there should only 
            be one JpegTableTag object defined in a movie.
            </p>
            <p>
            The JpegTableTag class is not essential to define 
            JPEG encoded images in a movie using the DefineBitsJepg2Tag class. 
            If an JpegTableTag object is created with an empty encoding 
            table then the Flash Player will still display JPEG images 
            defined using DefineBitsTag objects correctly. When an 
            JpegTableTag with an empty encoding table is encoded to a 
            Flash file, the "end of stream" marker 0xFFD9 is encoded 
            allowing the empty table to be decoded correctly.
            </p>
            <p>
            The simplest way to use the JpegTableTag and DefineBitsTag 
            classes to define JPEG encoded images is to create an empty 
            encoding table then construct the DefineBitsTag object(s) 
            with the image data from a file:
            <code lang="C#">
            
            </code>
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.JpegTableTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.JpegTableTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.JpegTableTag.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.JpegTableTag"/> instance.
            </summary>
            <param name="jpeg">JPEG data. An array of bytes containing the encoding table data.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.JpegTableTag.JpegData">
            <summary>
            JPEG Data is an array of bytes containing the 
            encoding table data.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.JpegTableTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.JpegTableTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns>Size of this object.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.JpegTableTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.JpegTableTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.PlaceObject2Tag">
            <summary>
            PlaceObject2Tag is used to add and manipulate objects (shape, button, etc.) 
            on the Flash Player's display list.
            </summary>
            <remarks>
            <p>
            PlaceObject2Tag supersedes the PlaceObjectTag class providing more functionality 
            and easier manipulation of  objects in the display list through the 
            following operations:
            <ul>
            <li>Place a new shape on the display list.</li>
            <li>Change an existing shape by moving it to new location or changing its 
            appearance.</li>
            <li>Replace an existing shape with a another.</li>
            <li>Define clipping layers to mask objects displayed in front of a shape.</li>
            <li>Control the morphing process that changes one shape into another.</li>
            <li>Assign names to objects rather than using their identifiers.</li>
            <li>Define the sequence of actions that are executed when an event occurs 
            in movie clip.</li>
            </ul>
            </p>
            <p>
            Since only one object can be placed on a given layer an existing object 
            on the display list can be identified by the layer it is displayed on rather 
            than its identifier. Therefore Layer is the only required attribute. 
            The remaining attributes are optional according to the different operation 
            being performed:
            <ul>
            <li>If an existing object on the display list is being modified then only the 
            layer number is required. Previously in the PlaceObjectTag class both the 
            identifier and the layer number were required.</li>
            <li>If no coordinate transform is applied to the shape (the default is a 
            unity transform that does not change the shape) then it is not encoded.</li>
            <li>Similarly if no colour transform is applied to the shape (the default 
            is a unity transform that does not change the shape's colour) then it is 
            not encoded.</li>
            <li>If a shape is not being morphed then the ratio attribute may be left at 
            its default value (-1.0).</li>
            <li>If a shape is not used to define a clipping area then the depth attribute 
            may be left at its default value (0).</li>
            <li>If a name is net assigned to an object the name attribute may be left its 
            default value (an empty string).</li>
            <li>If no events are being defined for a movie clip then the array of ClipEvent 
            object may be left empty.</li>
            </ul>
            </p>
            <p>
            The class provides a range of constructors which define different subsets of the 
            attributes according to the type of operation that will be performed on an object 
            in the Flash Player's display list. If an attribute is not specified in a 
            constructor then it will be assigned a default value and will be omitted when the 
            object is encoded.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.#ctor(System.UInt16,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.#ctor(System.UInt16,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
            <param name="xLocation">X location.</param>
            <param name="yLocation">Y location.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.#ctor(System.UInt16,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
            <param name="xLocation">X location.</param>
            <param name="yLocation">Y location.</param>
            <param name="placeFlagMove">Place flag move.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.#ctor(System.UInt16,System.Int32,SwfDotNet.IO.Tags.Types.Matrix)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
            <param name="transformMatrix">Transform matrix.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.#ctor(System.UInt16,System.Int32,SwfDotNet.IO.Tags.Types.CXFormWithAlphaData)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
            <param name="colorTransform">Color transform.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.#ctor(System.Int32,SwfDotNet.IO.Tags.Types.CXFormWithAlphaData)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> instance.
            </summary>
            <param name="depth">Depth.</param>
            <param name="colorTransform">Color transform.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.#ctor(System.UInt16,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
            <param name="ratio">Ratio.</param>
            <param name="xLocation">X location.</param>
            <param name="yLocation">Y location.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObject2Tag.Move">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SwfDotNet.IO.Tags.PlaceObject2Tag"/> is move.
            </summary>
            <value>
            	<c>true</c> if move; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObject2Tag.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObject2Tag.ColorTransform">
            <summary>
            Gets or sets the color transform.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObject2Tag.TargetCharacterId">
            <summary>
            Gets or sets the character id.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObject2Tag.Ratio">
            <summary>
            Gets or sets the ratio.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObject2Tag.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObject2Tag.ActionRecCount">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObject2Tag.Item(System.Int32)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.GetSizeOf(System.Byte)">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.HasMatrix">
            <summary>
            Determines whether this instance has matrix.
            </summary>
            <returns>
            	<c>true</c> if this instance has matrix; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.HasColorTransform">
            <summary>
            Determines whether [has color transform].
            </summary>
            <returns>
            	<c>true</c> if [has color transform]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.HasClipActions">
            <summary>
            Determines whether [has clip actions].
            </summary>
            <returns>
            	<c>true</c> if [has clip actions]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.HasCharacter">
            <summary>
            Determines whether this instance has character.
            </summary>
            <returns>
            	<c>true</c> if this instance has character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.HasClipDepth">
            <summary>
            Determines whether [has clip depth].
            </summary>
            <returns>
            	<c>true</c> if [has clip depth]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.HasName">
            <summary>
            Determines whether this instance has name.
            </summary>
            <returns>
            	<c>true</c> if this instance has name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObject2Tag.HasRatio">
            <summary>
            Determines whether this instance has ratio.
            </summary>
            <returns>
            	<c>true</c> if this instance has ratio; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SwfDotNet.IO.Tags.PlaceObjectTag">
            <summary>
            PlaceObjectTag is used to add an object (shape, button, etc.) 
            to the Flash Player's display list.
            </summary>
            <remarks>
            <p>
            Every class that defines a shape, button etc. is assigned a unique 
            identifier. This is an integer in the range 1..65535 and is used to 
            refer to objects when performing actions such as adding or removing 
            them from the display list.
            </p>
            <p>
            The display list contains all the objects that are currently visible 
            on the Flash Player's screen. The display list is ordered in layers, 
            with one (and only one) object displayed on each layer. The Layer 
            defines the order in which objects are displayed. Objects with a 
            higher layer number are displayed in front of objects on a lower layer.
            </p>
            <p>
            The coordinate transform is principally used to specify the location 
            of the object when it is drawn on the screen however more complex 
            coordinate transforms can also be specified such as rotating or scaling 
            the object without changing the original definition.
            </p>
            <p>
            Similarly the color transform allows the color of the object to be 
            changed when it is displayed without changing the original definition. 
            The PlaceObjectTag class only supports opaque colors so although the 
            CXForm supports transparent colors this information is ignored 
            by the Flash Player. The color transform is optional and may be set 
            to the null object.
            </p>
            <p>
            This tag was introduced in Flash 1 and is superceded by the PlaceObject2 
            tag which was added in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObjectTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObjectTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObjectTag.#ctor(System.UInt16,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObjectTag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
            <param name="xLocation">X location.</param>
            <param name="yLocation">Y location.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObjectTag.#ctor(System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.Matrix)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObjectTag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
            <param name="matrix">Matrix.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObjectTag.#ctor(System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.Matrix,SwfDotNet.IO.Tags.Types.CXForm)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.PlaceObjectTag"/> instance.
            </summary>
            <param name="characterId">Character id.</param>
            <param name="depth">Depth.</param>
            <param name="matrix">Matrix.</param>
            <param name="colorTransform">Color transform.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObjectTag.TargetCharacterId">
            <summary>
            Gets or sets the character id.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObjectTag.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObjectTag.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.PlaceObjectTag.ColorTransform">
            <summary>
            Gets or sets the color transform.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObjectTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObjectTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObjectTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.PlaceObjectTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.ProtectTag">
            <summary>
            ProtectTag marks a file as not-readable, preventing the file 
            from being loaded into an editor.
            </summary>
            <remarks>
            <p>
            In order to use the debugger a password must be supplied. 
            When encrypted using the MD5 algorithm it must match the value stored 
            in the password attribute.
            </p>
            <p>
            IMPORTANT: this form of protection only works with Macromedia's Flash 
            Authoring tool. Any application that parses Flash files can choose 
            to ignore or delete this data structure therefore it is not safe to 
            use this to protect the contents of a Flash file.
            </p>
            <p>
            Transform will parse all Flash files containing the Protect data 
            structure. Since the encoded data is can be removed by trivial scripts 
            the level of copy-protection offered is minimal. Indeed the use of the 
            Protect mechanism in Flash movies may lead to a false sense of security, 
            putting proprietary information at risk. Sensitive information should not 
            be included in Flash movies.
            </p>
            <p>
            This tag was introduced in Flash 5.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ProtectTag.#ctor">
            <summary>
            constructor.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ProtectTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ProtectTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ProtectTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.RecordHeader">
            <summary>
            RecordHeader object represents swf tag headers.
            </summary>
            <remarks>
            <p>
            The Swf format is composed of a series of tagged data blocks.
            All tag begins with record header informations.
            </p>
            <p>
            A record header object contains the current tag code and 
            the size of the tag in bytes.
            </p>
            <p>
            You don't need to instance this object, to construct a tag.
            Record header management is automatically done on the reading
            or the writing process of a tag.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RecordHeader.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RecordHeader"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RecordHeader.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RecordHeader"/> instance.
            </summary>
            <param name="tag">Tag code.</param>
            <param name="length">Length.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RecordHeader.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RecordHeader"/> instance.
            </summary>
            <param name="longTag">Long tag.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RecordHeader.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RecordHeader"/> instance.
            </summary>
            <param name="tag">Tag code.</param>
            <param name="length">Length.</param>
            <param name="longTag">Long tag encoding.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RecordHeader.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RecordHeader"/> instance.
            </summary>
            <param name="tag">Tag code.</param>
            <param name="length">Length.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.RecordHeader.TagCode">
            <summary>
            Tag code property.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.RecordHeader.TagLength">
            <summary>
            Tag length property.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RecordHeader.WriteTo(SwfDotNet.IO.Utils.BufferedBinaryWriter)">
            <summary>
            Writes binary data to given BinaryWriter.
            </summary>
            <param name="w">binary writer</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RecordHeader.ReadData(SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            Reads the data from a binary file
            </summary>
            <param name="binaryReader">Binary reader.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.RemoveObject2Tag">
            <summary>
            RemoveObject2Tag removes an object from the display list.
            </summary>
            <remarks>
            <p>
            The RemoveObject2Tag class only requires the layer number to identify 
            a particular object, unlike the RemoveObjectTag class which also 
            requires the object's identifier although only one object can be placed 
            on a given layer.
            </p>
            <p>
            This tag was introduced in Flash 3.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObject2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RemoveObject2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObject2Tag.#ctor(System.UInt16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RemoveObject2Tag"/> instance.
            </summary>
            <param name="depth">depth of character</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.RemoveObject2Tag.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObject2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObject2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObject2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.RemoveObjectTag">
            <summary>
            RemoveObject Tag removes an object from the Flash Player's 
            Display List.
            </summary>
            <remarks>
            <p>
            An object placed on the display list is displayed in every frame 
            of a movie until it is explicitly removed. Objects must also 
            be removed if its location or appearance is changed using either 
            the RemoveObjectTag or RemoveObject2Tag classes.
            </p>
            <p>
            Although only one object can be placed on any layer in the display 
            list both the object's unique identifier and the layer number 
            must be specified. The RemoveObjectTag class is superceded in 
            Flash 3 by the RemoveObject2Tag class which lifts this requirement 
            allowing an object to be referenced by the layer number it occupies 
            in the display list.
            </p>
            <p>
            <b>It was introduced in Flash 1 and is superceded by the 
            RemoveObject2 tag which was added in Flash 3.</b>
            </p>
            </remarks>
            <example>
            <p>
            <u>Sample 1: Remove an object.</u><br/>
            To remove an object from the display list the object's identifier 
            and the layer number using when the object was placed is used.
            <code lang="C#">
            // Place a shape to the display list for one frame.
            swf.Add(new PlaceObjectTag(shape.CharacterId, 1, 400, 400));
            swf.Add(new ShowFrameTag());
            // now remove it.
            swf.Add(new RemoveObjectTag(shape.CharacterId, 1));
            swf.Add(new ShowFrameTag());
            </code>
            </p>
            <p>
            <u>Sample 2: Move an object.</u><br/>
            To move an object it first must be removed from the display list 
            and repositioned at its new location. Adding the object, with a new 
            location, on the same layer, although only one object can be 
            displayed on a given layer, will not work. The object will be 
            displayed twice.
            <code lang="C#">
            // Add the shape to the display list.
            swf.Add(new PlaceObjectTag(shape.CharacterId, 1, 400, 400));
            swf.Add(new ShowFrameTag());
            // Move shape to a new location, removing the original so it does not get displayed twice.
            swf.Add(new RemoveObjectTag(shape.CharacterId, 1));
            swf.Add(new PlaceObjectTag(shape.CharacterId, 1, 250, 300));
            swf.Add(new ShowFrameTag());
            </code>
            </p>
            </example>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObjectTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RemoveObjectTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObjectTag.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.RemoveObjectTag"/> instance.
            </summary>
            <param name="characterId">ID of character to remove. It's the unique identifier, in the range 1..65535, of the object.</param>
            <param name="depth">depth of character. It's the layer at which the object is placed in the Display List.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.RemoveObjectTag.CharacterId">
            <summary>
            Gets or sets the character id.
            That's the unique identifier, in the range 1..65535, 
            of the object to remove.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.RemoveObjectTag.Depth">
            <summary>
            Gets or sets the depth.
            That's the layer at which the object to remove
            is placed in the Display List.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObjectTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObjectTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.RemoveObjectTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.ScriptLimitTag">
            <summary>
            ScriptLimit tag is used to define the execution environment 
            of the Flash Player, limiting the resources available when 
            executing actions.
            </summary>
            <remarks>
            <p>
            It can be used to limit the maximum recursion depth and limit 
            the time a sequence of actions can execute for. This provides a 
            rudimentary mechanism for people viewing a movie to regain control 
            of the Flash Player should a script fail.
            </p>
            <p>
            This tag was introduced in Flash 7.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ScriptLimitTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.ScriptLimitTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ScriptLimitTag.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.ScriptLimitTag"/> instance.
            </summary>
            <param name="recursion">Recursion depth. That's the maximum depth, in the range 1..65535, that a sequence of actions can recurse to.</param>
            <param name="timeout">Specified timeout. That's the maximum time, in seconds, that a sequence of actions will execute before the Flash Player present a dialog box asking whether the script should be terminated.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.ScriptLimitTag.Recursion">
            <summary>
            Gets or sets the recursion.
            That's the maximum depth, in the range 1..65535, that 
            a sequence of actions can recurse to.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.ScriptLimitTag.TimeOut">
            <summary>
            Gets or sets the time out.
            That's the maximum time, in seconds, that a sequence 
            of actions will execute before the Flash Player present 
            a dialog box asking whether the script should be terminated.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ScriptLimitTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ScriptLimitTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ScriptLimitTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.SetBackgroundColorTag">
            <summary>
            SetBackgroundColorTag object defines a background color 
            of the swf file. It sets the background color displayed 
            in every frame in the movie.
            </summary>
            <remarks>
            <p>
            Although the color is specified using an RGB object the 
            colour displayed is completely opaque.
            </p>
            <p>
            The background color must be set before the first frame is
            displayed otherwise the background color defaults to white.
            This is typically the first object in a coder. 
            If more than one SetBackgroundColorTag object is added to a 
            swf then only first one sets the background color. 
            Subsequent objects are ignored.
            </p>
            </remarks>
            <example>
            <code lang="C#">
            Swf swf = new Swf();
            swf.FrameSize = new Rect(0, 0, 8000, 8000)); // in twips = 400 x 400 in pixels
            swf.FrameRate = 1.0; 1 frame per second.
            swf.Add(new SetBackgroundColorTag(new RGB(0, 0, 255))); // Blue
            </code>
            </example>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetBackgroundColorTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SetBackgroundColorTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetBackgroundColorTag.#ctor(SwfDotNet.IO.Tags.Types.RGB)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SetBackgroundColorTag"/> instance.
            </summary>
            <param name="rgbColor">Color of the RGB.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetBackgroundColorTag.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SetBackgroundColorTag"/> instance.
            </summary>
            <param name="red">Red.</param>
            <param name="green">Green.</param>
            <param name="blue">Blue.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SetBackgroundColorTag.RGB">
            <summary>
            Gets or sets the RGB color.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetBackgroundColorTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetBackgroundColorTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetBackgroundColorTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.SetTabIndexTag">
            <summary>
            SetTabIndexTag class is used to set the tabbing order of text fields, 
            movie clips and buttons visible on the display list.
            </summary>
            <remarks>
            <p>
            This tag was introduced in Flash 7.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetTabIndexTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SetTabIndexTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetTabIndexTag.#ctor(System.UInt16,System.UInt16)">
            <summary>
            constructor
            </summary>
            <param name="depth">depth of character</param>
            <param name="tabIndex">tab order value</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SetTabIndexTag.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SetTabIndexTag.TabIndex">
            <summary>
            Gets or sets the tab index.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetTabIndexTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetTabIndexTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SetTabIndexTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.ShowFrameTag">
            <summary>
            ShowFrameTag tag is used to instruct the Flash Player to 
            display a single frame in a movie or movie clip.
            </summary>
            <remarks>
            <p>
            When a frame is displayed the Flash Player performs the following:
            <ul>
            <li>The contents of the Flash Player's display list are drawn on the screen.</li>
            <li>Any actions defined using a DoActionTag object are executed.</li>
            </ul>
            </p>
            <p>
            Objects are placed in the display list using the PlaceObjectTag and 
            PlaceObject2Tag classes and removed using the RemoveObjectTag and 
            RemoveObject2Tag classes. An object which has been added to the 
            display list will be displayed in each frame until it is explicitly 
            removed. There is no need to repeatedly add it to the display list.
            </p>
            <p>
            The scope of a frame is delineated by successive ShowFrameTag objects. 
            All the commands that affect change the state of the display list or 
            define actions to be executed take effect when the Flash Player displays 
            the frame. All the objects displayed in a frame must be defined before 
            they can be displayed. The movie is displayed as it is downloaded so 
            displaying objects that are defined later in a movie is not allowed.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
            <example>
            <p>
            <code lang="C#">
            Swf swf = new Swf();
            // Frame 1 - starts from the beginning of the file....
            swf.Add(new ShowFrameTag());
            // Frame 2 - starts when the previous frame is displayed.
            // All displayable objects are referenced using unique identifier.
            int identifer = swf.newIdentifier();
            // Define a shape to be displayed.
            swf.Add(new DefineShapeTag(identifer, ......));
            // Add the shape to the display list - on layer 1 at coordinates (400, 400)
            swf.Add(new PlaceObjectTag(identifier, 1, 400, 400));
            // Add some actions
            DoActionTag frameActions = new DoActionTag(); 
            frameActions.add(anAction);
            frameActions.add(anotherAction);
            swf.Add(frameActions);
            // The shape is displayed and the actions executed when the FSShowFrame command is executed.
            swf.Add(new ShowFrameTag());
            </code>
            </p>
            </example>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ShowFrameTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.ShowFrameTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ShowFrameTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ShowFrameTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ShowFrameTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.SoundStreamBlockTag">
            <summary>
            SoundStreamBlock tag contains the sound data being streamed 
            to the Flash Player.
            </summary>
            <remarks>
            <p>
            Streaming sounds are played in tight synchronisation with one 
            SoundStreamBlockTag object defining the sound for each frame 
            displayed in a movie.
            </p>
            <p>
            When a streaming sound is played if the Flash Player cannot render 
            the frames fast enough to maintain synchronisation with the sound 
            being played then frames will be skipped. Normally the player will 
            reduce the frame rate so every frame of a movie is played.
            </p>
            <p>
            This tag was introduced in Flash 1 with support for Uncompressed 
            PCM encoded sounds (both Little-Endian and Big-Endian formats) and 
            the compressed ADPCM format. Support for MP3 was added in 
            Flash 3. The Nellymoser Asao format was added in Flash 6.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamBlockTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SoundStreamBlockTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamBlockTag.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SoundStreamBlockTag"/> instance.
            </summary>
            <param name="soundData">Sound data. 
            This is the encoded sound data for a single frame in a movie. 
            The format for the sound is defined by an SoundStreamHeadTag object. 
            Sounds may be encoded using the uncompressed PCM (big or 
            little endian byte order), compressed ADPCM,
            compressed MP3 or NELLYMOSER</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamBlockTag.SoundData">
            <summary>
            Gets or sets the sound data.
            This is the encoded sound data for a single frame in a movie. 
            The format for the sound is defined by an SoundStreamHeadTag object. 
            Sounds may be encoded using the uncompressed PCM (big or 
            little endian byte order), compressed ADPCM,
            compressed MP3 or NELLYMOSER.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamBlockTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamBlockTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamBlockTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.SoundStreamHead2Tag">
            <summary>
            SoundStreamHead2Tag defines an sound compressed using different 
            compression formats that is streamed in tight synchronisation 
            with the movie being played.
            </summary>
            <remarks>
            <p>
            
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHead2Tag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SoundStreamHead2Tag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHead2Tag.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.Int16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SoundStreamHead2Tag"/> instance.
            </summary>
            <param name="playbackSoundRate">Playback sound rate.</param>
            <param name="playbackSoundSize">Size of the playback sound.</param>
            <param name="playbackSoundType">Playback sound type.</param>
            <param name="streamSoundCompression">Stream sound compression.</param>
            <param name="streamSoundRate">Stream sound rate.</param>
            <param name="streamSoundSize">Size of the stream sound.</param>
            <param name="streamSoundType">Stream sound type.</param>
            <param name="streamSoundSampleCount">Stream sound sample count.</param>
            <param name="latencySeek">Latency seek.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.PlaybackSoundRate">
            <summary>
            Gets or sets the playback sound rate.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.PlaybackSoundSize">
            <summary>
            Gets or sets the size of the playback sound.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.PlaybackSoundType">
            <summary>
            Gets or sets the playback sound type.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.StreamSoundCompression">
            <summary>
            Gets or sets the stream sound compression.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.StreamSoundRate">
            <summary>
            Gets or sets the stream sound rate.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.StreamSoundSize">
            <summary>
            Gets or sets the size of the stream sound.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.StreamSoundType">
            <summary>
            Gets or sets the stream sound type.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.StreamSoundSampleCount">
            <summary>
            Gets or sets the stream sound sample count.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHead2Tag.LatencySeek">
            <summary>
            Gets or sets the latency seek.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHead2Tag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHead2Tag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHead2Tag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHead2Tag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.SoundStreamHeadTag">
            <summary>
            SoundStreamHead tag defines the format of a streaming 
            sound, identifying the encoding scheme, the rate at which the 
            sound will be played and the size of the decoded samples.
            </summary>
            <remarks>
            <p>
            The actual sound is streamed used the SoundStreamBlockTag 
            class which contains the data for each frame in a movie.
            </p>
            <p>
            Three encoded formats for the sound data are supported:
            <ul>
            <li>
            NATIVE_PCM - uncompressed Pulse Code Modulated: samples 
            are either 1 or 2 bytes. For two-byte samples the byte order 
            is dependent on the platform on which the Flash Player is hosted. 
            Sounds created on a platform which supports big-endian byte 
            order will not be played correctly when listened to on a platform 
            which supports little-endian byte order.
            </li>
            <li>
            PCM - uncompressed Pulse Code Modulated: samples are 
            either 1 or 2 bytes with the latter presented in Little-Endian 
            byte order. This ensures that sounds can be played across 
            different platforms.
            </li>
            <li>
            ADPCM - compressed ADaptive Pulse Code Modulated: samples 
            are encoded and compressed by comparing the difference between 
            successive sound sample which dramatically reduces the size of 
            the encoded sound when compared to the uncompressed PCM formats. 
            Use this format whenever possible.
            </li>
            </ul>
            </p>
            <p>
            When a stream sound is played if the Flash Player cannot render 
            the frames fast enough to maintain synchronisation with the sound 
            being played then frames will be skipped. Normally the player will 
            reduce the frame rate so every frame of a movie is played. 
            The different sets of attributes that identify how the sound will 
            be played compared to the way it was encoded allows the Player 
            more control over how the animation is rendered. Reducing the 
            resolution or playback rate can improve synchronization with 
            the frames displayed.
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHeadTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SoundStreamHeadTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHeadTag.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.Int16)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.SoundStreamHeadTag"/> instance.
            </summary>
            <param name="playbackSoundRate">Playback sound rate.</param>
            <param name="playbackSoundSize">Size of the playback sound.</param>
            <param name="playbackSoundType">Playback sound type.</param>
            <param name="streamSoundCompression">Stream sound compression.</param>
            <param name="streamSoundRate">Stream sound rate.</param>
            <param name="streamSoundSize">Size of the stream sound.</param>
            <param name="streamSoundType">Stream sound type.</param>
            <param name="streamSoundSampleCount">Stream sound sample count.</param>
            <param name="latencySeek">Latency seek.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.PlaybackSoundRate">
            <summary>
            Gets or sets the playback sound rate.
            The recommended playback rate in Hertz :
            0 = 5512, 1 = 11025, 2 = 22050 or 3 = 44100.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.PlaybackSoundSize">
            <summary>
            Gets or sets the size of the playback sound.
            The number of bytes in an uncompressed sample 
            when the sound is played, 1 = 16 bits.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.PlaybackSoundType">
            <summary>
            Gets or sets the playback sound type.
            The recommended number of playback 
            channels: 0 = mono or 1 = stereo.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.StreamSoundCompression">
            <summary>
            Gets or sets the stream sound compression.
            Format of streaming sound data: 1 = ADPCM
            or 2 = MP3 (for SWF 4 or +)
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.StreamSoundRate">
            <summary>
            Gets or sets the stream sound rate.
            The rate at which the streaming sound was 
            samples - 0 = 5512, 1 = 11025, 2 = 22050 
            or 3 = 44100 Hz
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.StreamSoundSize">
            <summary>
            Gets or sets the size of the stream sound.
            The size of an uncompressed sample in the 
            streaming sound in bytes, 1 = 16 bits.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.StreamSoundType">
            <summary>
            Gets or sets the stream sound type.
            The number of channels: 0 = mono or 1 = stereo, 
            in the streaming sound.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.StreamSoundSampleCount">
            <summary>
            Gets or sets the stream sound sample count.
            The average number of samples in each 
            SoundStreamBlockTag object.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.SoundStreamHeadTag.LatencySeek">
            <summary>
            Gets or sets the latency seek.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHeadTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHeadTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHeadTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.SoundStreamHeadTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.StartSoundTag">
            <summary>
            StartSound tag instructs the player to start or stop 
            playing a sound defined using the DefineSoundTag class.
            </summary>
            <remarks>
            <p>
            
            </p>
            <p>
            This tag was introduced in Flash 1.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.StartSoundTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.StartSoundTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.StartSoundTag.#ctor(System.UInt16,SwfDotNet.IO.Tags.Types.SoundInfo)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.StartSoundTag"/> instance.
            </summary>
            <param name="soundId">Sound id.</param>
            <param name="soundInfo">Sound info.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.StartSoundTag.SoundId">
            <summary>
            Gets or sets the sound id.
            </summary>
            <value></value>
        </member>
        <member name="P:SwfDotNet.IO.Tags.StartSoundTag.SoundInfo">
            <summary>
            Gets or sets the sound info.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.StartSoundTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.StartSoundTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.StartSoundTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.StartSoundTag.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.ISwfSerializer">
            <summary>
            ISwfSerializer interface
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.ISwfSerializer.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes to a xml writer
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:SwfDotNet.IO.Tags.TagCodeEnum">
            <summary>
            enumeration of tag codes of tags containing bytecode.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.Unknown">
            <summary>Unknown tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.End">
            <summary>End tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.ShowFrame">
            <summary>ShowFrame tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineShape">
            <summary>DefineShape tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.PlaceObject">
            <summary>PlaceObject tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.RemoveObject">
            <summary>RemoveObject tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineBits">
            <summary>DefineBits tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineButton">
            <summary>DefineButton tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.JpegTable">
            <summary>JPEGTable tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.SetBackgroundColor">
            <summary>SetBackgroundColor tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineFont">
            <summary>DefineFont tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineText">
            <summary>DefineText tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DoAction">
            <summary>DoAction tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineFontInfo">
            <summary>DefineFontInfo tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineSound">
            <summary>DefineSound tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.StartSound">
            <summary>StartSound tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineButtonSound">
            <summary>DefineButtonSound tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.SoundStreamHead">
            <summary>SoundStreamHead tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.SoundStreamBlock">
            <summary>SoundStreamBlock tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineBitsLossLess">
            <summary>DefineBitsLossLess tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineBitsJpeg2">
            <summary>DefineBitsJPEG2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineShape2">
            <summary>DefineShape2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineButtonCxForm">
            <summary>DefineButtonCxForm tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.Protect">
            <summary>Protect tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.PlaceObject2">
            <summary>PlaceObject2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.RemoveObject2">
            <summary>RemoveObject2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineShape3">
            <summary>DefineShape3 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineText2">
            <summary>DefineText2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineButton2">
            <summary>DefineButton2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineBitsJpeg3">
            <summary>DefineBitsJPEG3 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineBitsLossLess2">
            <summary>DefineBitsLossLess2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineEditText">
            <summary>DefineEditText tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineSprite">
            <summary>DefineSprite tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.FrameLabel">
            <summary>FrameLabel tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.SoundStreamHead2">
            <summary>SoundStreamHead2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineMorphShape">
            <summary>DefineMorphShape tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineFont2">
            <summary>DefineFont2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.ExportAssets">
            <summary>ExportAssets tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.ImportAssets">
            <summary>ImportAssets tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.EnableDebugger">
            <summary>EnableDebugger tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.InitAction">
            <summary>InitAction tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineVideoStream">
            <summary>DefineVideoStream tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.VideoFrame">
            <summary>VideoFrame tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.DefineFontInfo2">
            <summary>DefineFontInfo2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.EnableDebugger2">
            <summary>EnableDebugger2 tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.ScriptLimit">
            <summary>ScriptLimit tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.SetTabIndex">
            <summary>SetTabIndex tag</summary>
        </member>
        <member name="F:SwfDotNet.IO.Tags.TagCodeEnum.SymbolClass">
            <summary>SymbolClass tag</summary>
        </member>
        <member name="T:SwfDotNet.IO.Tags.VideoFrameTag">
            <summary>
            VideoFrameTag contains the video data displayed in a 
            single frame of a Flash movie.
            </summary>
            <remarks>
            <p>
            Each frame of video is displayed whenever display list is 
            updated using the ShowFrameTag object - any timing 
            information stored within the video data is ignored. 
            Since the video is updated at the same time as the display 
            list the frame rate of the video may be the same or less 
            than the frame rate of the Flash movie but not higher.
            </p>
            <p>
            This tag was added in Flash 6 with support for the Sorenson 
            modified H263 format. Support for Macromedia's Screen Video 
            format was added in Flash 7.
            </p>
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Tags.VideoFrameTag.#ctor">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.VideoFrameTag"/> instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.VideoFrameTag.#ctor(System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.H263VideoPacket)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.VideoFrameTag"/> instance.
            </summary>
            <param name="streamId">Stream id.</param>
            <param name="frameNum">Frame num.</param>
            <param name="video">Video.</param>
        </member>
        <member name="M:SwfDotNet.IO.Tags.VideoFrameTag.#ctor(System.UInt16,System.UInt16,SwfDotNet.IO.Tags.Types.ScreenVideoPacket)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Tags.VideoFrameTag"/> instance.
            </summary>
            <param name="streamId">Stream id.</param>
            <param name="frameNum">Frame num.</param>
            <param name="video">Video.</param>
        </member>
        <member name="P:SwfDotNet.IO.Tags.VideoFrameTag.StreamId">
            <summary>
            Gets or sets the stream id.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.VideoFrameTag.FrameNum">
            <summary>
            Gets or sets the frame num.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.VideoFrameTag.VideoPacket">
            <summary>
            Gets or sets the H263 video packet.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Tags.VideoFrameTag.CodecId">
            <summary>
            Gets or sets the codec id.
            </summary>
            <value></value>
        </member>
        <member name="M:SwfDotNet.IO.Tags.VideoFrameTag.ReadData(System.Byte,SwfDotNet.IO.Utils.BufferedBinaryReader)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Tags.VideoFrameTag.GetSizeOf">
            <summary>
            Gets the size of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Tags.VideoFrameTag.UpdateData(System.Byte)">
            <summary>
            see <see cref="T:SwfDotNet.IO.Tags.BaseTag">base class</see>
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Utils.BigEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from big-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:SwfDotNet.IO.Utils.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:SwfDotNet.IO.Utils.BinaryStringRW">
            <summary>
            A helper class for reading/writing zero-byte terminated strings
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BinaryStringRW.ReadString(System.IO.BinaryReader)">
            <summary>	
            Read zero-byte terminated string with a <see cref="T:System.IO.BinaryReader">BinaryReader</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BinaryStringRW.WriteString(System.IO.BinaryWriter,System.String)">
            <summary>	
            Write zero-byte terminated string with a <see cref="T:System.IO.BinaryWriter">BinaryWriter</see>
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BinaryStringRW.#ctor">
            <remarks>
            Hidden constructor, class is only used in static context.
            </remarks>
        </member>
        <member name="T:SwfDotNet.IO.Utils.BitParser">
            <summary>
            A helper class with static methods for bit-parsing swf data
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BitParser.bitValueList">
            <remarks>
            List of int values for each bit; for fast access to <see cref="T:System.Collections.Specialized.BitVector32">BitVector32</see> sections
            </remarks>		
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.#cctor">
            <remarks>
            Static constructor: initialize bitValueList
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.BytewiseReverse(System.Collections.BitArray)">
            <summary>
            Reverse bit order in each byte (8 bits) of a BitArray
            (change endian bit order)
            </summary> 		
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.GetBitValues(System.Byte[])">
            <summary>
            Prepare read bytes for bit parsing 
            </summary> 
            <param name="byteSequence">
            Byte sequence read from swf by a<see cref="M:System.IO.BinaryReader.ReadBytes(System.Int32)">BinaryReader</see>
            </param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.ReadInt32(System.Collections.BitArray,System.Int32,System.Int32)">
            <summary>
            Overloaded static method<para/>
            Converts part of a <see cref="T:System.Collections.BitArray">BitArray</see> to a signed int32
            </summary>
            <param name="bitArr">source BitArray</param>
            <param name="index">start index</param>
            <param name="length">bit count</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.ReadInt32(System.Collections.BitArray,System.Int32)">
            <summary>
            starts at index 0
            </summary>
            <param name="bitArr">source BitArray</param>
            <param name="length">bit count</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.ReadInt32(System.Collections.BitArray)">
            <summary>
            convert total BitArray
            </summary>
            <param name="bitArr">source BitArray</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.ReadUInt32(System.Collections.BitArray,System.Int32,System.Int32)">
            <summary>
            convert part of a <see cref="T:System.Collections.BitArray">BitArray</see> to a unsigned integer (uint32)
            </summary>
            <param name="bitArr">source BitArray</param>
            <param name="index">start index</param>
            <param name="length">bit count</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.ReadUInt32(System.Collections.BitArray,System.Int32)">
            <summary>
            start at index 0
            </summary>
            <param name="bitArr">source BitArray</param>
            <param name="length">bit count</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.ReadUInt32(System.Collections.BitArray)">
            <summary>
            convert total BitArray
            </summary>
            <param name="bitArr">source BitArray</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.Int32ToByteArray(System.Int32)">
            <summary>
            convert a signed int 32 to a four bytes array
            </summary>
            <param name="int32">int32 number to convert</param>
            <returns>byte array</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BitParser.#ctor">
            <remarks>
            no public constructor, class is only used in static context
            </remarks>
        </member>
        <member name="T:SwfDotNet.IO.Utils.BufferedBinaryReader">
            <summary>
            BufferedBinaryReader.
            This class extends a binaryReader to provide
            the way to read bit per bit a binary stream.
            This class use a buffer to do it.
            ATTENTION: By default, this class works
            with the LittleEndian mode (for x86).
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BufferedBinaryReader.bitPos">
            <summary>
            Bit buffer current position 
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BufferedBinaryReader.bitBuf">
            <summary>
            Bit buffer
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BufferedBinaryReader.buffer">
            <summary>
            Buffer used for temporary storage before 
            conversion into primitives
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BufferedBinaryReader.bitConverter">
            <summary>
            Bit converter for reading with little or big endian
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Utils.BufferedBinaryReader"/> instance.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Utils.BufferedBinaryReader"/> instance.
            </summary>
            <param name="stream">Stream.</param>
            <param name="useLittleEndian">Use little endian.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.SynchBits">
            <summary>
            Synchronizes the bits.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadByte">
            <summary>
            Reads the byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadUInt16">
            <summary>
            Reads an Unsigned int16.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadUInt32">
            <summary>
            Reads an Unsigned int32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadUInt64">
            <summary>
            Reads an Unsigned int64.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadChar">
            <summary>
            Reads the char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadInt16">
            <summary>
            Reads the int16.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadInt32">
            <summary>
            Reads the int32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadInt64">
            <summary>
            Reads the int64.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadFloat">
            <summary>
            Reads the float.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadFloat(System.UInt32)">
            <summary>
            Reads the float.
            </summary>
            <param name="numBits">Bits number.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadFloat(System.UInt32,System.Int32)">
            <summary>
            Reads the float.
            </summary>
            <param name="numBits">Num bits.</param>
            <param name="fractionSize">Size of the fraction.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadFloatWord(System.UInt32,System.UInt32)">
            <summary>
            Reads the float word.
            </summary>
            <param name="mantissaSize">Size of the mantissa.</param>
            <param name="fractionSize">Size of the fraction.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadUBits(System.UInt32)">
            <summary>
            Reads Unsigned bits.
            </summary>
            <param name="bits">Bits.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadSBits(System.UInt32)">
            <summary>
            Reads Signed bits.
            </summary>
            <param name="bits">Bits.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadString">
            <summary>
            Reads the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadString(System.UInt32)">
            <summary>
            Reads the string.
            </summary>
            <param name="numChars">Num chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadString(System.Text.Encoding)">
            <summary>
            Reads the string.
            </summary>
            <param name="encoding">Encoding When Read</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadBoolean">
            <summary>
            Reads the bool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.Skip(System.UInt32)">
            <summary>
            Skips the specified bytes.
            </summary>
            <param name="bytes">Bytes.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.Seek(System.UInt32)">
            <summary>
            Seeks the specified position.
            </summary>
            <param name="position">Position.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.PeekByte">
            <summary>
            Peeks the byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.PeekBytes(System.UInt32)">
            <summary>
            Peeks the bytes.
            </summary>
            <param name="numToPeek">Num to peek.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.PeekUInt16">
            <summary>
            Peeks an Unsigned int16.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.PeekUInt32">
            <summary>
            Peeks an Unsigned int32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryReader.ReadInternal(System.Byte[],System.Int32)">
            <summary>
            Reads the given number of bytes from the stream, throwing an 
            exception if they can't all be read.
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="size">Number of bytes to read</param>
        </member>
        <member name="T:SwfDotNet.IO.Utils.BufferedBinaryWriter">
            <summary>
            BufferedBinaryWriter class.
            This class extends a binaryWriter to provide
            the way to read bit per bit a binary stream.
            This class use a buffer to do it.
            ATTENTION: By default, this writer works with 
            LittleEndian mode (for x86).
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BufferedBinaryWriter.bitPos">
            <summary>
            Bit buffer current position 
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BufferedBinaryWriter.bitBuf">
            <summary>
            Bit buffer
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BufferedBinaryWriter.bitConverter">
            <summary>
            Bit converter to convert big or little endian
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.BufferedBinaryWriter.buffer">
            <summary>
            Buffer used for temporary storage during conversion from primitives
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Utils.BufferedBinaryWriter"/> instance.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Utils.BufferedBinaryWriter"/> instance.
            </summary>
            <param name="stream">Stream.</param>
            <param name="useLittleEndian">Use little endian.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Utils.BufferedBinaryWriter"/> instance.
            </summary>
            <param name="stream">Stream.</param>
            <param name="encodingMode">Encoding mode.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SwfDotNet.IO.Utils.BufferedBinaryWriter"/> instance.
            </summary>
            <param name="stream">Stream.</param>
            <param name="encodingMode">Encoding mode.</param>
            <param name="useLittleEndian">Use little endian.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.SynchBits">
            <summary>
            Synchronizes the bits.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.GetNumBits(System.Single)">
            <summary>
            Gets the num bits.
            </summary>
            <param name="floatValue">Value.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.GetNumBits(System.UInt16)">
            <summary>
            Gets the num bits.
            </summary>
            <param name="number">Number.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.GetNumBits(System.Int16)">
            <summary>
            Gets the num bits.
            </summary>
            <param name="number">Number.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.GetNumBits(System.UInt32)">
            <summary>
            Gets the num bits.
            </summary>
            <param name="number">Number.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.GetNumBits(System.Int32)">
            <summary>
            Gets the num bits.
            </summary>
            <param name="number">Number.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.GetNumBits(System.Int64)">
            <summary>
            Gets the num bits.
            </summary>
            <param name="number">Number.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.GetNumBits(System.Int64,System.Boolean)">
            <summary>
            Gets the num bits.
            </summary>
            <param name="number">Number.</param>
            <param name="signed">Signed.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteString(System.String,System.UInt32)">
            <summary>
            Writes the string.
            </summary>
            <param name="value">Value.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteString(System.String)">
            <summary>
            Writes the string.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes the boolean.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteUBits(System.UInt32,System.UInt32)">
            <summary>
            Writes unsigned bits.
            </summary>
            <param name="value">Value.</param>
            <param name="numberOfBits">Number of bits.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteUBits(System.UInt16,System.UInt32)">
            <summary>
            Writes unsigned bits.
            </summary>
            <param name="value">Value.</param>
            <param name="numberOfBits">Number of bits.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteUBits(System.Int64,System.UInt32)">
            <summary>
            Writes unsigned bits.
            </summary>
            <param name="value">Value.</param>
            <param name="numberOfBits">Number of bits.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteSBits(System.Int32,System.UInt32)">
            <summary>
            Writes signed bits.
            </summary>
            <param name="value">Value.</param>
            <param name="numberOfBits">Number of bits.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteSBits(System.Int16,System.UInt32)">
            <summary>
            Writes signed bits.
            </summary>
            <param name="value">Value.</param>
            <param name="numberOfBits">Number of bits.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteSBits(System.Int64,System.UInt32)">
            <summary>
            Writes signed bits.
            </summary>
            <param name="value">Value.</param>
            <param name="numberOfBits">Number of bits.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteFBits(System.Single,System.UInt32)">
            <summary>
            Writes the Fixed bits.
            </summary>
            <param name="value">Value.</param>
            <param name="numberOfBits">Number of bits.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteFWord(System.Single,System.UInt32,System.UInt32)">
            <summary>
            Writes the Fixed word.
            </summary>
            <param name="value">Value.</param>
            <param name="mantissaSize">Size of the mantissa.</param>
            <param name="fractionSize">Size of the fraction.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Byte)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.SByte)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Int16)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.UInt16)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteAt(System.UInt16,System.Int64)">
            <summary>
            Writes at.
            </summary>
            <param name="value">Value.</param>
            <param name="position">Position.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Int32)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.UInt32)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteAt(System.UInt32,System.Int64)">
            <summary>
            Writes at.
            </summary>
            <param name="value">Value.</param>
            <param name="position">Position.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.String)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Decimal)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Double)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Single)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Int64)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.UInt64)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Char)">
            <summary>
            Writes the specified ch.
            </summary>
            <param name="ch">Ch.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Char[])">
            <summary>
            Writes the specified chars.
            </summary>
            <param name="chars">Chars.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified chars.
            </summary>
            <param name="chars">Chars.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Byte[])">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">Buffer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.SByte[])">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">Buffer.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Write(System.Boolean)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seeks the specified offset.
            </summary>
            <param name="offset">Offset.</param>
            <param name="origin">Origin.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.BufferedBinaryWriter.WriteInternal(System.Byte[],System.Int32)">
            <summary>
            Writes the specified number of bytes from the start of the given byte array,
            after checking whether or not the writer has been disposed.
            </summary>
            <param name="bytes">The array of bytes to write from</param>
            <param name="length">The number of bytes to write</param>
        </member>
        <member name="T:SwfDotNet.IO.Utils.EndianBitConverter">
            <summary>
            Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:SwfDotNet.IO.Utils.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Utils.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Utils.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:SwfDotNet.IO.Utils.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating poing number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:SwfDotNet.IO.Utils.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:SwfDotNet.IO.Utils.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Utils.Endianness">
            <summary>
            Endianness of a converter
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:SwfDotNet.IO.Utils.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:SwfDotNet.IO.Utils.ImageFactory">
            <summary>
            ImageFactory provides methods to get the adapted tag object
            from an image.
            </summary>
            <remarks>
            Swf binary format has some different tags to
            include a picture in animation: DefineBitJpeg2 to
            include jpeg, DefineBitJpeg3 to include transparent
            jpeg, DefineBitsTag, DefineBitsLossLessTag to include
            bitmap and DefineBitsLossLessTag to include transparent
            bitmap. This class provides the way to automatically create
            the good tag object from picture files. 
            </remarks>
            <example>
            <code lang="C#">
            Image img = Image.FromFile("mypicture.jpeg");
            BaseTag tag = ImageFactory.GetPictureTag(img, swf.GetNewDefineId());
            </code>
            </example>
        </member>
        <member name="M:SwfDotNet.IO.Utils.ImageFactory.GetPictureTag(System.Drawing.Image,System.UInt16)">
            <summary>
            Gets the picture tag.
            </summary>
            <param name="image">Image.</param>
            <param name="characterId">Character id.</param>
            <returns></returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.ImageFactory.GetPictureBitsTag(System.Drawing.Image,System.UInt16)">
            <summary>
            Gets the picture bits tag.
            </summary>
            <param name="image">Image.</param>
            <param name="characterId">Character id.</param>
            <returns></returns>
        </member>
        <member name="T:SwfDotNet.IO.Utils.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:SwfDotNet.IO.Utils.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:SwfDotNet.IO.Utils.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:SwfDotNet.IO.Utils.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:SwfDotNet.IO.Utils.SimpleHash">
            <summary>
            This class generates and compares hashes using MD5, SHA1, SHA256, SHA384, 
            and SHA512 hashing algorithms. 
            </summary>
            <remarks>
            Before computing a hash, it appends a
            randomly generated salt to the plain text, and stores this salt appended
            to the result. To verify another plain text value against the given hash,
            this class will retrieve the salt value from the hash string and use it
            when computing a new hash of the plain text. Appending a salt value to
            the hash may not be the most efficient approach, so when using hashes in
            a real-life application, you may choose to store them separately. You may
            also opt to keep results as byte arrays instead of converting them into
            base64-encoded strings.
            </remarks>
        </member>
        <member name="M:SwfDotNet.IO.Utils.SimpleHash.ComputeHash(System.String,System.String,System.Byte[])">
            <summary>
            Generates a hash for the given plain text value and returns a
            base64-encoded result. Before the hash is computed, a random salt
            is generated and appended to the plain text. This salt is stored at
            the end of the hash value, so it can be used later for hash
            verification.
            </summary>
            <param name="plainText">
            Plaintext value to be hashed. The function does not check whether
            this parameter is null.
            </param>
            <param name="hashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1",
            "SHA256", "SHA384", and "SHA512" (if any other value is specified
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="saltBytes">
            Salt bytes. This parameter can be null, in which case a random salt
            value will be generated.
            </param>
            <returns>
            Hash value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:SwfDotNet.IO.Utils.SimpleHash.VerifyHash(System.String,System.String,System.String)">
            <summary>
            Compares a hash of the specified plain text value to a given hash
            value. Plain text is hashed with the same salt value as the original
            hash.
            </summary>
            <param name="plainText">
            Plain text to be verified against the specified hash. The function
            does not check whether this parameter is null.
            </param>
            <param name="hashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1", 
            "SHA256", "SHA384", and "SHA512" (if any other value is specified,
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="hashValue">
            Base64-encoded hash value produced by ComputeHash function. This value
            includes the original salt appended to it.
            </param>
            <returns>
            If computed hash mathes the specified hash the function the return
            value is true; otherwise, the function returns false.
            </returns>
        </member>
        <member name="T:FastBitmapLib.FastBitmap">
            <summary>
            Encapsulates a Bitmap for fast bitmap pixel operations using 32bpp images
            </summary>
        </member>
        <member name="F:FastBitmapLib.FastBitmap.BytesPerPixel">
            <summary>
            Specifies the number of bytes available per pixel of the bitmap object being manipulated
            </summary>
        </member>
        <member name="F:FastBitmapLib.FastBitmap._bitmap">
            <summary>
            The Bitmap object encapsulated on this FastBitmap
            </summary>
        </member>
        <member name="F:FastBitmapLib.FastBitmap._bitmapData">
            <summary>
            The BitmapData resulted from the lock operation
            </summary>
        </member>
        <member name="F:FastBitmapLib.FastBitmap._scan0">
            <summary>
            The first pixel of the bitmap
            </summary>
        </member>
        <member name="P:FastBitmapLib.FastBitmap.Width">
            <summary>
            Gets the width of this FastBitmap object
            </summary>
        </member>
        <member name="P:FastBitmapLib.FastBitmap.Height">
            <summary>
            Gets the height of this FastBitmap object
            </summary>
        </member>
        <member name="P:FastBitmapLib.FastBitmap.Scan0">
            <summary>
            Gets the pointer to the first pixel of the bitmap
            </summary>
        </member>
        <member name="P:FastBitmapLib.FastBitmap.Stride">
            <summary>
            Gets the stride width of the bitmap
            </summary>
        </member>
        <member name="P:FastBitmapLib.FastBitmap.Locked">
            <summary>
            Gets a boolean value that states whether this FastBitmap is currently locked in memory
            </summary>
        </member>
        <member name="P:FastBitmapLib.FastBitmap.DataArray">
            <summary>
            Gets an array of 32-bit color pixel values that represent this FastBitmap
            </summary>
            <exception cref="T:System.Exception">The locking operation required to extract the values off from the underlying bitmap failed</exception>
            <exception cref="T:System.InvalidOperationException">The bitmap is already locked outside this fast bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new instance of the FastBitmap class with a specified Bitmap.
            The bitmap provided must have a 32bpp depth
            </summary>
            <param name="bitmap">The Bitmap object to encapsulate on this FastBitmap object</param>
            <exception cref="T:System.ArgumentException">The bitmap provided does not have a 32bpp pixel format</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.Dispose">
            <summary>
            Disposes of this fast bitmap object and releases any pending resources.
            The underlying bitmap is not disposes, and is unlocked, if currently locked
            </summary>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.Lock">
            <summary>
            Locks the bitmap to start the bitmap operations. If the bitmap is already locked,
            an exception is thrown
            </summary>
            <returns>A fast bitmap locked struct that will unlock the underlying bitmap after disposal</returns>
            <exception cref="T:System.InvalidOperationException">The bitmap is already locked</exception>
            <exception cref="T:System.Exception">The locking operation in the underlying bitmap failed</exception>
            <exception cref="T:System.InvalidOperationException">The bitmap is already locked outside this fast bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.Lock(System.Drawing.Imaging.ImageLockMode)">
            <summary>
            Locks the bitmap to start the bitmap operations
            </summary>
            <param name="lockMode">The lock mode to use on the bitmap</param>
            <returns>A fast bitmap locked struct that will unlock the underlying bitmap after disposal</returns>
            <exception cref="T:System.Exception">The locking operation in the underlying bitmap failed</exception>
            <exception cref="T:System.InvalidOperationException">The bitmap is already locked outside this fast bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.Lock(System.Drawing.Imaging.ImageLockMode,System.Drawing.Rectangle)">
            <summary>
            Locks the bitmap to start the bitmap operations
            </summary>
            <param name="lockMode">The lock mode to use on the bitmap</param>
            <param name="rect">The rectangle to lock</param>
            <returns>A fast bitmap locked struct that will unlock the underlying bitmap after disposal</returns>
            <exception cref="T:System.ArgumentException">The provided region is invalid</exception>
            <exception cref="T:System.Exception">The locking operation in the underlying bitmap failed</exception>
            <exception cref="T:System.InvalidOperationException">The bitmap region is already locked</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.Unlock">
            <summary>
            Unlocks the bitmap and applies the changes made to it. If the bitmap was not locked
            beforehand, an exception is thrown
            </summary>
            <exception cref="T:System.InvalidOperationException">The bitmap is already unlocked</exception>
            <exception cref="T:System.Exception">The unlocking operation in the underlying bitmap failed</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the pixel color at the given coordinates. If the bitmap was not locked beforehands,
            an exception is thrown
            </summary>
            <param name="x">The X coordinate of the pixel to set</param>
            <param name="y">The Y coordinate of the pixel to set</param>
            <param name="color">The new color of the pixel to set</param>
            <exception cref="T:System.InvalidOperationException">The fast bitmap is not locked</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided coordinates are out of bounds of the bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.SetPixel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the pixel color at the given coordinates. If the bitmap was not locked beforehands,
            an exception is thrown
            </summary>
            <param name="x">The X coordinate of the pixel to set</param>
            <param name="y">The Y coordinate of the pixel to set</param>
            <param name="color">The new color of the pixel to set</param>
            <exception cref="T:System.InvalidOperationException">The fast bitmap is not locked</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided coordinates are out of bounds of the bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.SetPixel(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel color at the given coordinates. If the bitmap was not locked beforehands,
            an exception is thrown
            </summary>
            <param name="x">The X coordinate of the pixel to set</param>
            <param name="y">The Y coordinate of the pixel to set</param>
            <param name="color">The new color of the pixel to set</param>
            <exception cref="T:System.InvalidOperationException">The fast bitmap is not locked</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided coordinates are out of bounds of the bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the pixel color at the given coordinates. If the bitmap was not locked beforehands,
            an exception is thrown
            </summary>
            <param name="x">The X coordinate of the pixel to get</param>
            <param name="y">The Y coordinate of the pixel to get</param>
            <exception cref="T:System.InvalidOperationException">The fast bitmap is not locked</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided coordinates are out of bounds of the bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.GetPixelInt(System.Int32,System.Int32)">
            <summary>
            Gets the pixel color at the given coordinates as an integer value. If the bitmap
            was not locked beforehands, an exception is thrown
            </summary>
            <param name="x">The X coordinate of the pixel to get</param>
            <param name="y">The Y coordinate of the pixel to get</param>
            <exception cref="T:System.InvalidOperationException">The fast bitmap is not locked</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided coordinates are out of bounds of the bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.GetPixelUInt(System.Int32,System.Int32)">
            <summary>
            Gets the pixel color at the given coordinates as an unsigned integer value.
            If the bitmap was not locked beforehands, an exception is thrown
            </summary>
            <param name="x">The X coordinate of the pixel to get</param>
            <param name="y">The Y coordinate of the pixel to get</param>
            <exception cref="T:System.InvalidOperationException">The fast bitmap is not locked</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided coordinates are out of bounds of the bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.CopyFromArray(System.Int32[],System.Boolean)">
            <summary>
            Copies the contents of the given array of colors into this FastBitmap.
            Throws an ArgumentException if the count of colors on the array mismatches the pixel count from this FastBitmap
            </summary>
            <param name="colors">The array of colors to copy</param>
            <param name="ignoreZeroes">Whether to ignore zeroes when copying the data</param>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.Clear(System.Drawing.Color)">
            <summary>
            Clears the bitmap with the given color
            </summary>
            <param name="color">The color to clear the bitmap with</param>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.Clear(System.Int32)">
            <summary>
            Clears the bitmap with the given color
            </summary>
            <param name="color">The color to clear the bitmap with</param>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.ClearRegion(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Clears a square region of this image w/ a given color
            </summary>
            <param name="region"></param>
            <param name="color"></param>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.ClearRegion(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Clears a square region of this image w/ a given color
            </summary>
            <param name="region"></param>
            <param name="color"></param>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.CopyRegion(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Copies a region of the source bitmap into this fast bitmap
            </summary>
            <param name="source">The source image to copy</param>
            <param name="srcRect">The region on the source bitmap that will be copied over</param>
            <param name="destRect">The region on this fast bitmap that will be changed</param>
            <exception cref="T:System.ArgumentException">The provided source bitmap is the same bitmap locked in this FastBitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.CopyPixels(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Performs a copy operation of the pixels from the Source bitmap to the Target bitmap.
            If the dimensions or pixel depths of both images don't match, the copy is not performed
            </summary>
            <param name="source">The bitmap to copy the pixels from</param>
            <param name="target">The bitmap to copy the pixels to</param>
            <returns>Whether the copy proceedure was successful</returns>
            <exception cref="T:System.ArgumentException">The provided source and target bitmaps are the same</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.ClearBitmap(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Clears the given bitmap with the given color
            </summary>
            <param name="bitmap">The bitmap to clear</param>
            <param name="color">The color to clear the bitmap with</param>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.ClearBitmap(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Clears the given bitmap with the given color
            </summary>
            <param name="bitmap">The bitmap to clear</param>
            <param name="color">The color to clear the bitmap with</param>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.CopyRegion(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Copies a region of the source bitmap to a target bitmap
            </summary>
            <param name="source">The source image to copy</param>
            <param name="target">The target image to be altered</param>
            <param name="srcRect">The region on the source bitmap that will be copied over</param>
            <param name="destRect">The region on the target bitmap that will be changed</param>
            <exception cref="T:System.ArgumentException">The provided source and target bitmaps are the same bitmap</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.SliceBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Returns a bitmap that is a slice of the original provided 32bpp Bitmap.
            The region must have a width and a height > 0, and must lie inside the source bitmap's area
            </summary>
            <param name="source">The source bitmap to slice</param>
            <param name="region">The region of the source bitmap to slice</param>
            <returns>A Bitmap that represents the rectangle region slice of the source bitmap</returns>
            <exception cref="T:System.ArgumentException">The provided bimap is not 32bpp</exception>
            <exception cref="T:System.ArgumentException">The provided region is invalid</exception>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.memcpy(System.IntPtr,System.IntPtr,System.UInt64)">
            <summary>
            .NET wrapper to native call of 'memcpy'. Requires Microsoft Visual C++ Runtime installed
            </summary>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.memcpy(System.Void*,System.Void*,System.UInt64)">
            <summary>
            .NET wrapper to native call of 'memcpy'. Requires Microsoft Visual C++ Runtime installed
            </summary>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.memset(System.Void*,System.Int32,System.UInt64)">
            <summary>
            .NET wrapper to native call of 'memset'. Requires Microsoft Visual C++ Runtime installed
            </summary>
        </member>
        <member name="T:FastBitmapLib.FastBitmap.FastBitmapLocker">
            <summary>
            Represents a disposable structure that is returned during Lock() calls, and unlocks the bitmap on Dispose calls
            </summary>
        </member>
        <member name="F:FastBitmapLib.FastBitmap.FastBitmapLocker._fastBitmap">
            <summary>
            The fast bitmap instance attached to this locker
            </summary>
        </member>
        <member name="P:FastBitmapLib.FastBitmap.FastBitmapLocker.FastBitmap">
            <summary>
            Gets the fast bitmap instance attached to this locker
            </summary>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.FastBitmapLocker.#ctor(FastBitmapLib.FastBitmap)">
            <summary>
            Initializes a new instance of the FastBitmapLocker struct with an initial fast bitmap object.
            The fast bitmap object passed will be unlocked after calling Dispose() on this struct
            </summary>
            <param name="fastBitmap">A fast bitmap to attach to this locker which will be released after a call to Dispose</param>
        </member>
        <member name="M:FastBitmapLib.FastBitmap.FastBitmapLocker.Dispose">
            <summary>
            Disposes of this FastBitmapLocker, essentially unlocking the underlying fast bitmap
            </summary>
        </member>
        <member name="T:FastBitmapLib.FastBitmapExtensions">
            <summary>
            Static class that contains fast bitmap extension methdos for the Bitmap class
            </summary>
        </member>
        <member name="M:FastBitmapLib.FastBitmapExtensions.FastLock(System.Drawing.Bitmap)">
            <summary>
            Locks this bitmap into memory and returns a FastBitmap that can be used to manipulate its pixels
            </summary>
            <param name="bitmap">The bitmap to lock</param>
            <returns>A locked FastBitmap</returns>
        </member>
        <member name="M:FastBitmapLib.FastBitmapExtensions.DeepClone(System.Drawing.Bitmap)">
            <summary>
            Returns a deep clone of this Bitmap object, with all the data copied over.
            After a deep clone, the new bitmap is completely independent from the original
            </summary>
            <param name="bitmap">The bitmap to clone</param>
            <returns>A deep clone of this Bitmap object, with all the data copied over</returns>
        </member>
    </members>
</doc>
